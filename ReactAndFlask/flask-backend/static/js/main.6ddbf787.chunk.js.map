{"version":3,"sources":["images/logo.png","javascript/Constants.jsx","javascript/enums/privilegeTypes.ts","javascript/helpers/functions/GetURL.jsx","javascript/models/enums/ModelCommands.ts","javascript/models/enums/ModelInputs.ts","javascript/helpers/StatusDisplay.jsx","javascript/ShibLogin.jsx","javascript/Login.jsx","javascript/models/helpers/ExportModel.jsx","javascript/models/helpers/FilterModel.jsx","javascript/models/helpers/CreateModel.jsx","javascript/models/ModelConstants.jsx","javascript/models/helpers/ModelsTable.jsx","javascript/users/enums/UserCommands.ts","javascript/models/pages/ModelsView.jsx","javascript/users/helpers/functions/PrivilegePicker.jsx","javascript/users/enums/PrivilegeCommands.ts","javascript/users/helpers/FilterUser.jsx","javascript/users/helpers/CreateUser.jsx","javascript/users/helpers/UsersTable.jsx","javascript/users/UserConstants.jsx","javascript/users/pages/UsersView.jsx","javascript/assets/enums/AssetInputs.ts","javascript/assets/enums/AssetCommands.ts","javascript/users/helpers/functions/MakeCreateJSON.jsx","javascript/users/helpers/functions/MakeEditJSON.jsx","javascript/users/helpers/functions/MakeDeleteJSON.jsx","javascript/users/helpers/functions/MakeDetailViewJSON.jsx","javascript/assets/AssetConstants.jsx","javascript/assets/helpers/NetworkGraph.jsx","javascript/assets/helpers/functions/StringToMacAddress.jsx","javascript/assets/helpers/EditAsset.jsx","javascript/assets/helpers/DetailsAsset.jsx","javascript/assets/helpers/FilterAsset.jsx","javascript/helpers/functions/DescendingComparator.jsx","javascript/assets/helpers/CreateAsset.jsx","javascript/assets/helpers/ImportAsset.jsx","javascript/assets/helpers/AddAsset.jsx","javascript/assets/helpers/ExportAsset.jsx","javascript/assets/helpers/TableAssets.jsx","javascript/racks/enums/DatacenterCommands.ts","javascript/helpers/functions/GetComparator.jsx","javascript/helpers/functions/StableSort.jsx","javascript/errors/ErrorBoundry.jsx","javascript/assets/pages/AssetsView.jsx","javascript/racks/helpers/CreateDatacenter.jsx","javascript/racks/helpers/EditDatacenter.jsx","javascript/racks/pages/RacksView.jsx","javascript/racks/enums/RackCommands.ts","javascript/racks/helpers/functions/ShowDatacenters.jsx","javascript/racks/helpers/ConfirmDeleteDC.jsx","javascript/statistics/enums/StatsCommands.ts","javascript/racks/pages/DatacentersView.jsx","javascript/racks/pages/DatacenterManagerView.jsx","javascript/helpers/functions/JSONtoArr.jsx","javascript/logs/enums/LogCommands.ts","javascript/statistics/pages/StatisticsView.jsx","javascript/logs/pages/LogsView.jsx","javascript/changeplans/pages/ChangePlans.jsx","javascript/Tabs.jsx","javascript/PageSelector.jsx","index.jsx"],"names":["module","exports","serverEndpoint","RackX","ASSETS_MAIN_PATH","MODELS_MAIN_PATH","USERS_MAIN_PATH","RACKS_MAIN_PATH","DATACENTERS_MAIN_PATH","LOGS_MAIN_PATH","PERMISSIONS_MAIN_PATH","DECOMMISSIONS_MAIN_PATH","CLIENT_ID","SHIB_REDIRECT_URI","window","location","href","Privilege","SHIBBOLETH_LOGIN","encodeURIComponent","HTTPS_STATUS_OK","getURL","path","endpoint","Constants","ModelCommand","ModelInput","StatusDisplay","props","state","Snackbar","open","this","autoHideDuration","onClose","closeStatus","elevation","variant","severity","message","IconButton","aria-label","color","size","onClick","fontSize","React","Component","ShibLogin","username","password","statusMessage","showStatus","statusSeverity","Grid","container","spacing","direction","justify","alignItems","onKeyDown","e","onKeyPressed","style","item","xs","src","logo","alt","height","Card","minWidth","CardContent","Typography","fontWeight","gutterBottom","closeShowStatus","loginMainPath","queryString","require","Login","getDukeCredentials","token","axios","get","headers","then","response","post","data","netid","mail","displayName","status","setState","initialized","oauth","loginFuncOAuth","loginWithOAuth","bind","submitCredentials","params","parse","hash","substring","access_token","console","log","loginFunc","event","target","value","key","preventDefault","stopPropagation","TextField","id","label","required","ref","onChange","updateUsername","type","updatePassword","Button","direciton","width","ExportModel","Paper","downloadTable","startIcon","showAll","createInputs","name","inputs","FilterModel","filters","hasOwnProperty","newFilters","forceUpdate","search","sm","md","lg","Autocomplete","options","includeInputInList","freeSolo","renderInput","vendor","updateSearchText","onBlur","fullWidth","InputProps","inputProps","min","max","blackColor","CreateModel","updateColor","updateModelColor","hex","showModal","showImportModal","closeModal","networkPorts","numPorts","closeImportModal","create","createModel","mountType","uploadFile","FormData","append","importedFile","sendUploadedFile","chooseFile","files","updateNetworkPorts","ports","i","push","toString","updateModelCreator","updatePort","port","updateMountType","classes","background","Modal","aria-labelledby","aria-describedby","className","modal","closeAfterTransition","Fade","in","Backdrop","grid","onSubmit","modelNumber","InputLabel","Select","labelId","MenuItem","ethernetPorts","powerPorts","cpu","memory","storage","comment","List","root","subheader","ListSubheader","component","maxHeight","overflow","Array","from","length","x","map","_","index","ListItem","role","undefined","dense","button","ListItemText","primary","defaultValue","accept","withStyles","theme","flexGrow","display","justifyContent","backgroundColor","palette","paper","boxShadow","shadows","padding","progress","marginLeft","GENERAL_MODEL_ERROR","modelsMainPath","UserCommand","mountTypeLookup","ModelsTable","oldDetails","detailedValues","display_color","showDetailedView","row","detailViewLoading","detailViewModel","modelNum","detailView","model","originalVendor","originalModelNumber","originalHeight","catch","error","ModelConstants","closeDetailedView","showDeleteModal","closeDeleteModal","delete","deleteModel","edit","editModel","clickInfo","popoverAnchor","clickComment","commentPopover","handlePopoverClose","handleCommentPopoverClose","updateModelEdited","save","defaults","common","privilege","TableContainer","Table","TableHead","TableRow","columns","col","TableCell","align","TableBody","vals","hover","admin","scope","keys","margin","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","CircularProgress","model_number","mount_type","ethernet_ports","power_ports","adminColumns","columnLookup","ModelsView","createdModel","Vendor","Height","CPU","Memory","Storage","Comment","showCreateModal","getVendorList","searchModels","createshowStatus","originalModelNum","detailshowStatus","detailStatusMessage","detailStatusSeverity","viewVendor","viewModel","filter","searchVendor","searchModelNum","searchMountType","searchMinHeight","searchMaxHeight","searchMinNetworkPorts","searchMaxNetworkPorts","searchMinPower","searchMaxPower","searchCPU","searchMinMem","searchMaxMem","searchStore","searchComment","models","rows","Object","values","forEach","includes","parseInt","items","searchText","VENDOR_VALUES","vendorsList","results","madeVendorQuery","UPLOAD_FILE","summary","EXPORT_FILE","searchHeight","csvData","csvLink","link","click","searchAll","openCreateModal","openImportModal","closeCreateModal","updateModelColorDetails","reason","createStatusClose","detailStatusClose","createdVendor","createdModelNum","createdMountType","createdHeight","createdDispClr","createdEthPorts","createdPwrPorts","createdCPU","createdMem","createdStorage","createdComments","deleteVendor","maxWidth","statusClose","useAutocomplete","filename","r","PrivilegePicker","generalPrivileges","title","defaultPrivs","defaultDCs","defaultPrivileges","asset","audit","power","datacenters","multiple","getOptionLabel","option","updatePrivilege","loading","dcPrivileges","updateDCPrivilege","PrivilegeCommand","Filters","resetCreate","success","display_name","email","searchUsers","updateprivilege","privs","priv","privileges","CreateModal","selectedPrivileges","updateSelectedPrivileges","UsersTable","beginEditing","canEdit","originalUsername","Username","Email","endEditing","USER_SUCCESS_TOKEN","USER_FAILURE_TOKEN","USER_CREATION_SUCCESS_MESSAGE","USER_EDIT_SUCCESS_MESSAGE","USER_EDIT_FAILURE_MESSAGE","USER_DELETE_SUCCESS_MESSAGE","USER_DELETE_FAILURE_MESSAGE","AssetInput","AssetCommand","blankSearch","UsersView","createUser","completion","makeCreateJSON","UserConstants","setDisplayStatus","editUser","makeEditJSON","processResponse","deleteUser","makeDeleteJSON","detailViewUser","makeDetailViewJSON","getPrivileges","GET_PRIVILEGES","allDCPrivileges","loadingPrivileges","statusOpen","updateUserEdited","newDetails","successMessage","failureMessage","searchUsernm","searchEml","searchDspNm","searchPriv","deleteUsername","viewUser","updateUserCreator","updateEditUser","CHANGE_PLAN_PATH","SUCCESS_TOKEN","ERROR_TOKEN","getGraph","primaryHosts","host","hostnameMapping","nodes","edges","primaryHostID","entries","primaryHost","secondaryHosts","to","secondaryHostID","secondaryHost","Exception","NetworkGraph","graph","GET_NETWORK_NEIGHBORHOOD","assetNum","layout","hierarchical","interaction","dragNodes","dragView","events","select","isDecommissioned","decomAsset","network_neighborhood","getNetwork","network","document","getElementById","stringToMac","val","returnVal","replace","toLowerCase","showTooltip","description","emptySearch","searchPath","left","right","EditAsset","forwardRef","Slide","getPowerFromProps","pwrCons","pwr","pwrCon","getPowerPortFromProps","pwrPorts","getLists","getModelList","getOwnerList","getDatacenterList","getAssetList","getChassisList","instances","instanceNames","instance","hostname","chassisList","modelNames","networkNames","powerPortNames","modelKey","loadingModels","modelList","networkList","powerPortList","mountTypes","users","user","loadingOwners","ownerList","datacenter","abbreviation","loadingDatacenters","datacenterList","hostnames","hostToModel","loadingHostnames","assetNumList","assetNumToModelList","availableNetworkConnections","editAsset","json","createJSON","changePlanJSON","changePlanID","changePlanStep","defaultValues","asset_number","url","changePlanActive","AssetConstants","CHANGE_PLAN_CREATE_ACTION","incrementChangePlanStep","updateModel","networkConns","network_connections","updateBladeChassis","blade_chassis","updateBladePosition","blade_position","updateHostname","updateRack","rackVal","rack","updateRackU","rackU","updateOwner","owner","updateComment","updateDatacenter","isOffline","dc","is_offline_storage","datacenter_name","datacenterIsOffline","updateTags","tags","changeNetworkMacAddress","prevState","assign","mac_address","changeNetworkHostname","connection_hostname","getPortOptions","changeNetworkPort","connection_port","updatePowerPort","power_connections","changePowerPortState","portNum","leftRight","updateAssetNumber","getPowerConnections","pwrConns","num","split","customColor","customCPU","customMemory","customStorage","availableNetworks","networList","availableConnections","fetchAllAssets","portOptions","getModel","displayNetworks","getNetworkConnections","getMacValue","netCons","getConnectingHostname","getConnectionPort","connectionsDisabled","deleteAsset","showConfirmationBox","close","decommissionAsset","DECOMMISSION","openConfirmationBox","closeConfirmationBox","cancelUpgrades","customizeModel","display_colorOriginal","cpuOriginal","memoryOriginal","storageOriginal","restoreDefaults","loadingAssetNumber","selectedConnection","powerPortState","canSubmit","updated","MODEL","HOSTNAME","RACK","RACK_U","OWNER","COMMENT","DATACENTER","MAC_ADDRESS","NETWORK_CONNECTIONS","POWER_CONNECTIONS","ASSET_NUMBER","BLADE_CHASSIS","BLADE_POSITION","rack_position","div","decommission_user","timestamp","form","dialogDiv","Tooltip","placement","disabled","bladeChassis","buttons","networkPort","macAddress","networkConnections","k","FormControl","RadioGroup","FormControlLabel","control","Radio","labelPlacement","multiline","Alert","action","BackdropComponent","BackdropProps","timeout","border","appBar","position","flex","Transition","DetailAsset","closeDetailView","toggleDetails","detailsExpanded","networkNodes","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","edge","AlertTitle","changePlanName","FilterAsset","updateStartingLetter","startingLetter","updateEndingLetter","endingLetter","updateStartingNum","startingNum","updateEndingNum","endingNum","updateStartDate","startDate","updateEndDate","endDate","updateUser","assetType","decAssets","Date","decDate","allAssets","offline","updateItems","switchAssetType","Fragment","FormHelperText","InputLabelProps","shrink","descendingComparator","a","b","orderBy","CreateAsset","getNextAssetNum","originalModels","GET_NEXT_ASSET_NUM","validJSON","createAsset","validateForm","firstFree","free_left","pwrLst","powerPort","exception","currModel","next_pair","free_right","onSelect","ImportAsset","setFile","file","closeImport","showImport","AddAsset","openImport","openCreate","showCreate","closeCreate","ExportAsset","componentDidMount","canCreateChangePlans","openChangePlanModal","changePlanModal","closeChangePlanModal","updatePlanName","beginChangePlan","changeDescriptionModal","CHANGE_PLAN_CREATE","updateChangePlan","change_plan","closeDescriptionModal","decomType","createData","DatacenterCommand","headCells","numeric","decommissionHeadCells","TableAsset","CHANGE_PLAN_GET_ACTIONS","actions","change_plan_actions","assetNums","asset_numberOriginal","newInstances","new_record","tableItems","getDecommissionedAssets","body","originalRack","originalrack_position","generateLabels","selectedItems","GENERATE_LABELS","responseType","blob","Blob","createElement","URL","createObjectURL","download","createSortHandler","property","isAsc","order","openDetailedView","dAsset","assets","offlineAssets","currAsset","detailAsset","rowOwner","decommissions","showStatusBar","onSelectAllClick","newSelected","n","indexOf","concat","deselectAllClick","selectedIndex","slice","addCheckedItem","getAttribute","openSpeedDial","speedDialOpen","closeSpeedDial","exitChangePlan","current","allSelected","detailStatusOpen","deleteAssetRack","deleteAssetrack_position","detailHostname","createRef","elem","table","styledTableRow","headCell","tableCellHead","sortDirection","TableSortLabel","active","visuallyHidden","array","comparator","stabilizedThis","el","sort","stableSort","aria-checked","selected","tabIndex","Checkbox","checked","showDecommissioned","SpeedDial","ariaLabel","bottom","hidden","icon","onOpen","SpeedDialAction","tooltipTitle","paddingLeft","paddingRight","styledTableCell","marginBottom","clip","top","ErrorBoundary","hasError","errorInfo","children","AssetsView","offlineStorageVal","datacenterVal","CreateDatacenter","generateCreateJSON","datacenterAbbreviation","datacenterName","siteType","createDatacenter","CREATE","updateDatacenterName","updateDatacenterAbbrevation","getAbbreviation","selectSiteType","selectDatacenter","scroll","column","EditDatacenter","generateEditJSON","dcName","dcAbbrev","editDatacenter","EDIT","show","MinusSquare","SvgIcon","d","PlusSquare","CloseSquare","useSpring","opacity","transform","Collapse","RackCommand","StyledTreeItem","iconContainer","group","borderLeft","fade","text","TreeItem","RacksView","handleFormat","newFormats","formats","sortRacks","rack1","rack2","substr","firstRack","secondRack","racksList","racks","f","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultEndIcon","nodeId","heading","typography","pxToRem","fontWeightRegular","ShowDatacenters","useState","rackType","setRackType","setRack1","setRack2","datacentersList","selectedDatacenter","isOfflineStorage","ToggleButtonGroup","exclusive","newType","ToggleButton","updateRacks","CREATE_RACKS","DELETE_RACKS","StatsCommand","ConfirmDeteleDC","deleteDatacenter","racksMainPath","DatacenterView","getDatacenters","loadingDCList","GET_ALL_DATACENTERS","fullDatacenter","getAllRacks","currentDatacenter","DELETE","openEditDatacenter","datacenterAbbrev","editDCName","editDCAbbr","showEditDC","closeEditDatacenter","command","GET_RACK_DETAILS","win","focus","showSnack","GET_ALL_RACKS","letter","closeEditDatacneter","DatacenterManagerView","jsonToArr","incomingJSON","JSON","constructor","LogCommand","statsMainPath","tables","tableCols","StatisticsView","generateReport","generatingReport","GENERATE_REPORT","totalUsage","totalUsageRow","spaceUsage","JSONtoArr","vendorUsage","modelUsage","ownerUsage","tableValues","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","isNaN","typeKey","timestampKey","LogsView","getLogs","GET_LOGS","parseLog","logs","makeTableData","logItems","filteredLogs","allLogs","filterUser","filterAsset","filteredItems","entry","hasAsset","hasUser","match","request","updateFilterUser","updateFilterAsset","searchbar","placeholder","logItem","aligh","changePlanPath","ChangePlansView","fetchAllChangePlans","CHANGE_PLAN_GET_PLANS","change_plans","changePlans","plan","identifier","details","changePlanDetails","startEditing","editId","editStep","editName","planName","renameChangePlan","closeRenameDialog","CHANGE_PLAN_EDIT","planId","openRenameDialog","renameDialog","openExecuteDialog","executeDialog","executeId","closeExecuteDialog","executeChangePlan","CHANGE_PLAN_EXECUTE","openDeleteDialog","deleteDialog","deleteId","closeDeleteDialog","deleteChangePlan","CHANGE_PLAN_DELETE","openDescriptionModal","currentStep","reducePorts","portList","result","validate","conflicts","deleteAction","step","CHANGE_PLAN_DELETE_ACTION","lookup","generateWorkOrder","executed","s","Math","Chip","detail","diff","isCreate","charAt","toUpperCase","currentTab","TabViewer","handleProfileMenuOpen","currentTarget","isMenuOpen","handleMenuClose","currentTabID","handleChange","sessionStorage","getItem","tab","removeItem","newValue","setItem","aria-controls","aria-haspopup","Menu","keepMounted","logout","Tabs","indicatorColor","textColor","centered","Tab","Container","ChangePlans","menuButton","marginRight","storedToken","storedPrivilege","storedLoggedIn","storedUsername","PageSelector","login","stringify","loggedIn","history","replaceState","shib","redirected","ReactDOM","render","referrer"],"mappings":"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","file":"static/js/main.6ddbf787.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.df79d0ea.png\";","/**\r\n * Constants file\r\n */\r\n\r\nexport const localServerEndpoint = 'http://localhost:4010/';\r\nexport const testServerEndpoint = 'https://parseltongue-finishinge-lfw68m.herokuapp.com/';\r\nexport const devServerEndpoint = 'https://parseltongue-dev.herokuapp.com/';\r\nexport const prodServerEndpoint = 'https://parseltongue-prod.herokuapp.com/';\r\n\r\nexport const serverEndpoint = localServerEndpoint;\r\n\r\n\r\nexport const RackX = [\r\n    'A', 'B', 'C', 'D', 'E',\r\n    'F', 'G', 'H', 'I', 'J',\r\n    'K', 'L', 'M', 'N', 'O',\r\n    'P', 'Q', 'R', 'S', 'T',\r\n    'W', 'X', 'Y', 'Z',\r\n]\r\n\r\nexport const ASSETS_MAIN_PATH = 'instances/';\r\nexport const MODELS_MAIN_PATH = \"models/\";\r\nexport const USERS_MAIN_PATH = \"users/\";\r\nexport const RACKS_MAIN_PATH = \"racks/\";\r\nexport const DATACENTERS_MAIN_PATH = \"datacenters/\";\r\nexport const LOGS_MAIN_PATH = \"logs/\"\r\nexport const PERMISSIONS_MAIN_PATH = \"permissions/\";\r\nexport const DECOMMISSIONS_MAIN_PATH = \"decommissions/\";\r\n\r\nexport const CLIENT_ID = \"ParselTonguesUserAuth\";\r\nexport const CLIENT_SECRET = \"LpUwB*eiK4Iw#1gaCu5jYp1u5uRF3ERsdmuNUGoKYNzn7rHm7b\";\r\nexport const SCOPE = \"basic\";\r\n\r\nexport var SHIB_REDIRECT_URI = \"\";\r\n\r\nif (window.location.href === \"http://localhost:3000\" || window.location.href === \"http://localhost:3000/\") {\r\n    SHIB_REDIRECT_URI = window.location.href;\r\n} else {\r\n    SHIB_REDIRECT_URI = serverEndpoint;\r\n}\r\n\r\nexport const SHIBBOLETH_LOGIN =\r\n    \"https://oauth.oit.duke.edu/oauth/authorize.php?\"\r\n     + \"client_id=\" + encodeURIComponent(CLIENT_ID)\r\n     + \"&client_secret=\" + encodeURIComponent(CLIENT_SECRET)\r\n     + \"&redirect_uri=\" + encodeURIComponent(SHIB_REDIRECT_URI)\r\n     + \"&response_type=token\"\r\n     + \"&state=1129\"\r\n     + \"&scope=\" + encodeURIComponent(SCOPE);\r\n\r\nexport const HTTPS_STATUS_OK = 200;\r\n","export enum Privilege  {\r\n    ADMIN = \"admin\",\r\n    USER = \"user\",\r\n};\r\n","import * as Constants from '../../Constants';\r\n\r\nexport default function getURL(path, endpoint) {\r\n    return Constants.serverEndpoint + path + endpoint;\r\n}\r\n","export enum ModelCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search = 'search/',\r\n    VENDOR_VALUES = 'assistedvendor/',\r\n    UPLOAD_FILE = 'import/',\r\n    EXPORT_FILE = 'export/'\r\n}\r\n","export enum ModelInput {\r\n    Vendor = 'vendor',\r\n    model_number = 'model_number',\r\n    mount_type = 'mount_type',\r\n    Height = 'height',\r\n    display_color = 'display_color',\r\n    ethernet_ports = 'ethernet_ports',\r\n    power_ports = 'power_ports',\r\n    CPU = 'cpu',\r\n    Memory = 'memory',\r\n    Storage = 'storage',\r\n    Comment = 'comment'\r\n}\r\n","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\nexport default class StatusDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Snackbar open={this.props.open} autoHideDuration={4000} onClose={this.props.closeStatus}>\r\n                    <MuiAlert elevation={6} variant=\"filled\"\r\n                        severity={this.props.severity}\r\n                    >\r\n                        <div>\r\n                        {this.props.message}\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={this.props.closeStatus}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                        </div>\r\n                    </MuiAlert >\r\n                </Snackbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport StatusDisplay from './helpers/StatusDisplay';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from '../images/logo.png';\r\n\r\n\r\n\r\nexport default class ShibLogin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username:'',\r\n            password:'',\r\n            statusMessage:'',\r\n            showStatus:false,\r\n            statusSeverity:'info',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid\r\n                container\r\n                spacing={5}\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n                onKeyDown={(e) => this.onKeyPressed(e)}\r\n                style={{\r\n                    \"minHeight\": \"102vh\",\r\n                    \"background\": \"linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                }}\r\n            >\r\n                <Grid item xs={12}>\r\n                    <img src={logo} alt=\"\" style={{height: \"200px\", \"marginTop\": \"50px\"}} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Card\r\n                        style={\r\n                            {\r\n                                minWidth: '20vw',\r\n                            }\r\n                        }\r\n                    >\r\n                        <CardContent>\r\n                            <Grid\r\n                                container\r\n                                spacing={1}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid container item alignItems=\"flex-start\" xs={12}>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        color=\"textPrimary\"\r\n                                        fontWeight=\"fontWeightBold\"\r\n                                        gutterBottom\r\n                                    >\r\n                                        Please wait while we log you in...\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <StatusDisplay\r\n                        open={this.state.showStatus}\r\n                        severity={this.state.statusSeverity}\r\n                        closeStatus={this.closeShowStatus}\r\n                        message={this.state.statusMessage}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Grid, Button, TextField, Card, CardContent, Typography } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport getURL from './helpers/functions/GetURL';\r\nimport { Privilege } from './enums/privilegeTypes.ts'\r\nimport StatusDisplay from './helpers/StatusDisplay';\r\nimport logo from '../images/logo.png';\r\nimport ShibLogin from './ShibLogin';\r\nimport * as Constants from \"./Constants\";\r\n\r\nconst loginMainPath = 'users/';\r\nconst queryString = require('query-string');\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // Login info\r\n            username:'',\r\n            password:'',\r\n\r\n            // Snackbar\r\n            statusMessage: '',\r\n            showStatus: false,\r\n            statusSeverity: 'info',\r\n\r\n            // If view has been initialized\r\n            initialized: false,\r\n\r\n            // OAuth NetID login\r\n            oauth: false,\r\n        };\r\n\r\n        this.closeShowStatus = this.closeShowStatus.bind(this);\r\n        this.submitCredentials = this.submitCredentials.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            var params = queryString.parse(window.location.hash.substring(1));\r\n            if (params.access_token != null) {\r\n                this.getDukeCredentials(params.access_token);\r\n                this.setState({ oauth: true });\r\n            }\r\n        } catch(e) {\r\n            console.log(\"tried:\")\r\n        }\r\n\r\n        this.setState({ initialized: true });\r\n    }\r\n\r\n    // Login and send credentials to backend\r\n    submitCredentials() {\r\n        axios.post(\r\n            getURL(loginMainPath, 'authenticate'), {\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n            }).then(response => {\r\n                const message = response.data['message'];\r\n                if (message === 'success') {\r\n                    this.setState({ message: '' });\r\n                    console.log(response);\r\n                    this.props.loginFunc(response.data['token'], this.state.username, response.data['privilege']);\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: message });\r\n                }\r\n            });\r\n        //this.props.loginFunc('token', \"Administrator\", Privilege.ADMIN);\r\n    }\r\n\r\n    // Set the username\r\n    updateUsername(event) {\r\n        this.setState({ username: event.target.value })\r\n    }\r\n\r\n    // Set the password\r\n    updatePassword(event) {\r\n        this.setState({ password: event.target.value })\r\n    }\r\n\r\n    // Close snackbar\r\n    closeShowStatus() {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    // Fired when key is pressed, login on enter\r\n    onKeyPressed(event) {\r\n        if (event.key === 'Enter') {\r\n            // Intercept key event\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            // Login\r\n            this.submitCredentials();\r\n        }\r\n    }\r\n\r\n    // Get Duke info from colab API\r\n    getDukeCredentials = (token) => {\r\n        axios.get('https://api.colab.duke.edu/identity/v1/', {\r\n            headers: {\r\n                'x-api-key': Constants.CLIENT_ID,\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then(response => {\r\n            axios.post(\r\n                getURL(loginMainPath, 'oauth'), {\r\n                    \"username\": response.data.netid,\r\n                    \"email\": response.data.mail,\r\n                    \"display_name\": response.data.displayName,\r\n                    \"client_id\": Constants.CLIENT_ID,\r\n                    \"token\": token,\r\n                }).then(response => {\r\n                    const message = response.data['message'];\r\n                    if (response.status === Constants.HTTPS_STATUS_OK) {\r\n                        this.setState({\r\n                            username: '',\r\n                            password: '',\r\n\r\n                            statusMessage: '',\r\n                            showStatus: false,\r\n                            statusSeverity:' info',\r\n\r\n                            initialized: false,\r\n\r\n                            oauth:false,\r\n                         });\r\n\r\n                        this.props.loginFuncOAuth(response.data['token'], response.data.username, response.data['privilege']);\r\n                    } else {\r\n                        this.setState({ showStatus: true, statusMessage: message });\r\n                    }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Redirect to shibboleth login\r\n    loginWithOAuth = () => {\r\n        window.location = Constants.SHIBBOLETH_LOGIN;\r\n    }\r\n\r\n    // Render view\r\n    render() {\r\n        return (\r\n            <div>\r\n                { (this.state.oauth) ? <ShibLogin /> :\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    onKeyDown={(e) => this.onKeyPressed(e)}\r\n                    style={{\r\n                        \"minHeight\": \"102vh\",\r\n                        \"background\": \"#56ab2f\",\r\n                        \"background\": \"-webkit-linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                        \"background\": \"linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                    }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <img src={logo} style={{ height: \"200px\", \"marginTop\": \"50px\" }} alt=\"Hyposoft\" />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Card style={{ minWidth: '20vw' }}>\r\n                            <CardContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={1}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                >\r\n                                    <Grid container item alignItems=\"flex-start\" xs={12}>\r\n                                        <Typography\r\n                                            variant=\"h4\"\r\n                                            color=\"textPrimary\"\r\n                                            fontWeight=\"fontWeightBold\"\r\n                                            gutterBottom\r\n                                        >\r\n                                            Login\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"username-input\"\r\n                                            label=\"Username\"\r\n                                            variant=\"outlined\"\r\n                                            required={true}\r\n                                            ref='username'\r\n                                            onChange={this.updateUsername.bind(this)}\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"password-input\"\r\n                                            label=\"Password\"\r\n                                            variant=\"outlined\"\r\n                                            required={true}\r\n                                            ref='password'\r\n                                            type=\"password\"\r\n                                            onChange={this.updatePassword.bind(this)}\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button\r\n                                            onClick={this.submitCredentials}\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        >\r\n                                            Sign In\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                            <hr style={{width: \"5vw\"}} />\r\n                                            <Typography color=\"textSecondary\">\r\n                                                Or\r\n                                            </Typography>\r\n                                            <hr style={{width: \"5vw\"}} />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button\r\n                                            onClick={this.loginWithOAuth}\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                        >\r\n                                            Sign In with NetID\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <StatusDisplay\r\n                            open={this.state.showStatus}\r\n                            severity={this.state.statusSeverity}\r\n                            closeStatus={this.closeShowStatus}\r\n                            message={this.state.statusMessage}\r\n                        />\r\n                    </Grid>\r\n                </Grid>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\n\nexport default class ExportModel extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <Paper elevation={3}>\n                <Grid\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                    style={{\"padding\": \"10px\"}}\n                >\n                    <Grid item xs={12}>\n                        <Typography variant=\"h6\">Export</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography>Download what is currently shown in the table.</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.props.downloadTable}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            startIcon={<CloudDownloadIcon />}\n                            style={{\n                                width: \"100%\"\n                            }}\n                        >\n                            Export\n                        </Button>\n                    </Grid>\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\n                        <hr style={{width: \"5vw\"}} />\n                        <Typography color=\"textSecondary\">\n                            Or\n                        </Typography>\n                        <hr style={{width: \"5vw\"}} />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.props.showAll}\n                            variant=\"contained\"\n                            color=\"default\"\n                            style={{\n                                width: \"100%\"\n                            }}\n                        >\n                            Show all models\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            </div>\n        );\n    }\n}\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nfunction createInputs(name, label) {\r\n    return {label, name};\r\n}\r\n\r\nconst inputs = {\r\n    \"vendor\": createInputs('vendor', \"Vendor\"),\r\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\r\n    \"height\": createInputs('height', \"Height\"),\r\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\r\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\r\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\r\n    \"cpu\": createInputs('cpu', \"CPU\"),\r\n    \"memory\": createInputs('memory', \"Memory\"),\r\n    \"storage\": createInputs('storage', \"Storage\"),\r\n    \"comments\": createInputs('comments', \"Comments\"),\r\n}\r\n\r\nexport default class FilterModel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filters: {},\r\n        };\r\n    }\r\n\r\n    updateSearchText(event) {\r\n        if (this.state.filters.hasOwnProperty(event.target.id)) {\r\n            const newFilters = this.state.filters;\r\n            newFilters[event.target.id] = event.target.value;\r\n            this.setState({ filters: newFilters });\r\n            this.forceUpdate();\r\n        } else {\r\n            const newFilters = this.state.filters;\r\n            newFilters[event.target.id] = event.target.value;\r\n            this.setState({ filters: newFilters });\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    search() {\r\n        this.props.search(this.state.filters);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Paper elevation={3}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{\"padding\": \"10px\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\">Search</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <Autocomplete\r\n                            id=\"vendor\"\r\n                            options={this.props.options}\r\n                            includeInputInList\r\n                            freeSolo\r\n                            renderInput={params => (\r\n                            <TextField {...params} label={inputs.vendor.label} name={inputs.vendor.name} onChange={this.updateSearchText.bind(this)} onBlur={this.updateSearchText.bind(this)} variant=\"outlined\" fullWidth />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"model_number\" variant=\"outlined\" label=\"Model Number\" name=\"model_number\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_height\" type=\"number\" variant=\"outlined\" label=\"Min Height\" name=\"min_height\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 1, max: 42} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_height\" type=\"number\" variant=\"outlined\" label=\"Max Height\" name=\"max_height\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 1, max: 42} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_ethernet_ports\" type=\"number\" variant=\"outlined\" label=\"Min Network Ports\" name=\"min_ethernet_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_ethernet_ports\" type=\"number\" variant=\"outlined\" label=\"Max Network Ports\" name=\"max_ethernet_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_power_ports\" type=\"number\" variant=\"outlined\" label=\"Min Power Ports\" name=\"min_power_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_power_ports\" type=\"number\" variant=\"outlined\" label=\"Max Power Ports\" name=\"max_power_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"cpu\" variant=\"outlined\" label=\"CPU\" name=\"cpu\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_memory\" type=\"number\" variant=\"outlined\" label=\"Min Memory\" name=\"min_memory\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_memory\" type=\"number\" variant=\"outlined\" label=\"Max Memory\" name=\"max_memory\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"storage\" variant=\"outlined\" label=\"Storage\" name=\"storage\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"comment\" variant=\"outlined\" label=\"Comment\" name=\"comment\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            onClick={this.search.bind(this)}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\r\n                                width: \"100%\"\r\n                            }}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { TextField, Button, Typography, Paper, Grid, Modal, Backdrop, Fade, List, ListItem, ListItemText, ListSubheader } from \"@material-ui/core\";\r\nimport { InputLabel, Select, MenuItem } from \"@material-ui/core\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nimport { CompactPicker } from 'react-color';\r\nimport '../stylesheets/ModelStyles.css';\r\n\r\nfunction createInputs(name, label) {\r\n    return {label, name};\r\n}\r\n\r\nconst inputs = {\r\n    \"vendor\": createInputs('vendor', \"Vendor\"),\r\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\r\n    \"height\": createInputs('height', \"Height\"),\r\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\r\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\r\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\r\n    \"cpu\": createInputs('cpu', \"CPU\"),\r\n    \"memory\": createInputs('memory', \"Memory\"),\r\n    \"storage\": createInputs('storage', \"Storage\"),\r\n    \"comment\": createInputs('comment', \"Comment\"),\r\n    \"mount_type\": createInputs('mount_type', \"Mount Type\"),\r\n}\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: \"100%\",\r\n      },\r\n      grid: {\r\n          backgroundColor: theme.palette.background.paper,\r\n          boxShadow: theme.shadows[5],\r\n          padding: theme.spacing(2, 4, 3),\r\n          width: \"50%\"\r\n      },\r\n      progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n      },\r\n});\r\n\r\nconst blackColor = {'hsl': {'h': 0, 's': 0, 'l': 0, 'a': 1}, 'hex': '#000000', 'rgb': {'r': 0, 'g': 0, 'b': 0, 'a': 1}, 'hsv': {'h': 0, 's': 0, 'v': 0, 'a': 1}, 'oldHue': 0};\r\n\r\nclass CreateModel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            color: blackColor,\r\n            showModal: false,\r\n            showImportModal: false,\r\n            importedFile: null,\r\n            networkPorts: [],\r\n            numPorts: 0,\r\n            mountType: \"rackmount\",\r\n        };\r\n    }\r\n\r\n    updateColor = (color) => {\r\n        this.setState({ color: color });\r\n        this.props.updateModelColor(color.hex);\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    showImportModal = () => {\r\n        this.setState({ showImportModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({ showModal: false, networkPorts: [], numPorts: 0 });\r\n    }\r\n\r\n    closeImportModal = () => {\r\n        this.setState({ showImportModal: false });\r\n    }\r\n\r\n    create = (event) => {\r\n        event.preventDefault();\r\n        this.props.createModel(this.state.networkPorts, this.state.mountType, this.state.color.hex);\r\n        this.closeModal();\r\n        this.updateColor(blackColor);\r\n    }\r\n\r\n    uploadFile = () => {\r\n        const data = new FormData();\r\n        data.append('file', this.state.importedFile);\r\n        this.props.sendUploadedFile(data);\r\n    }\r\n\r\n    chooseFile = (event) => {\r\n        this.setState({ importedFile: event.target.files[0] })\r\n    }\r\n\r\n    updateNetworkPorts = (event) => {\r\n        const numPorts = event.target.value === '' ? 0 : event.target.value;\r\n\r\n        var ports = [];\r\n        for (var i = 1; i <= numPorts; i++) {\r\n            ports.push(i.toString());\r\n        }\r\n\r\n        this.setState({ networkPorts: ports, numPorts: numPorts });\r\n        this.props.updateModelCreator(event);\r\n    }\r\n\r\n    updatePort = (port, event) => {\r\n        const ports = this.state.networkPorts;\r\n        ports[port] = event.target.value;\r\n\r\n        this.setState({ networkPorts: ports });\r\n    }\r\n\r\n    updateMountType = (event) => {\r\n        this.setState({ mountType: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n        <div>\r\n            <Paper elevation={3}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{\"padding\": \"10px\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h5\"\r\n                        >\r\n                            Add\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                width: \"100%\",\r\n                                background: \"green\",\r\n                                color: \"white\"\r\n                            }}\r\n                            onClick={this.showModal}\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                        <hr style={{width: \"5vw\"}} />\r\n                        <Typography color=\"textSecondary\">\r\n                            Or\r\n                        </Typography>\r\n                        <hr style={{width: \"5vw\"}} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{width: \"100%\"}}\r\n                            startIcon={<CloudUploadIcon />}\r\n                            onClick={() => {this.showImportModal()} }\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.showModal}\r\n                onClose={this.closeModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.showModal}>\r\n                    <Backdrop\r\n                        open={this.state.showModal}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                            <form\r\n                                onSubmit={(event) => this.create(event)}\r\n                            >\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h5\">New Model</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                                <Autocomplete\r\n                                    id=\"select-vendor\"\r\n                                    options={this.props.options}\r\n                                    includeInputInList\r\n                                    freeSolo\r\n                                    renderInput={params => (\r\n                                        <TextField {...params} required={true} label={inputs.vendor.label} name={inputs.vendor.name} onChange={this.props.updateModelCreator} onBlur={this.props.updateModelCreator} variant=\"outlined\" fullWidth />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                                <TextField id=\"standard-basic\" required={true} variant=\"outlined\" label={inputs.modelNumber.label} name={inputs.modelNumber.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <InputLabel id=\"select-mount-type-label\">Mount Type</InputLabel>\r\n                                <Select\r\n                                    labelId=\"select-mount-type-label\"\r\n                                    id=\"select-mount-type\"\r\n                                    value={this.state.mountType}\r\n                                    required={true}\r\n                                    onChange={this.updateMountType}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    <MenuItem value=\"rackmount\">Rack Mounted</MenuItem>\r\n                                    <MenuItem value=\"chassis\">Blade Chassis</MenuItem>\r\n                                    <MenuItem value=\"blade\">Blade</MenuItem>\r\n                                </Select>\r\n                            </Grid>\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" required={true} variant=\"outlined\" label={inputs.height.label} name={inputs.height.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 1, max: 42} }} style={{ width: \"100%\" }} />\r\n                            </Grid>\r\n                            : null }\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.ethernetPorts.label} name={inputs.ethernetPorts.name} onChange={this.updateNetworkPorts} InputProps={{ inputProps: { min: 0} }} />\r\n                            </Grid>\r\n                            : null }\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.powerPorts.label} name={inputs.powerPorts.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 0} }}/>\r\n                            </Grid> : null }\r\n                            <Grid item xs={3}>\r\n                                <TextField id=\"standard-basic\" variant=\"outlined\" label={inputs.cpu.label} name={inputs.cpu.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.memory.label} name={inputs.memory.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 0} }} style={{ width: \"100%\" }}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <TextField id=\"standard-basic\" variant=\"outlined\" label={inputs.storage.label} name={inputs.storage.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <TextField id=\"standard-basic\" variant=\"outlined\" label={inputs.comment.label} name={inputs.comment.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography>Display Color</Typography>\r\n                                <CompactPicker\r\n                                    color={this.state.color}\r\n                                    onChange={this.updateColor}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                            { this.state.mountType !== \"blade\" ?\r\n                                <List\r\n                                    className={classes.root}\r\n                                    subheader={\r\n                                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                                        Network Ports\r\n                                        </ListSubheader>\r\n                                    }\r\n                                    style={{\r\n                                        maxHeight: \"30vh\",\r\n                                        overflow: \"auto\"\r\n                                    }}\r\n                                >\r\n                                {Array.from({length: this.state.numPorts}, (x,i) => i).map((_, index) => {\r\n                                    const labelId = `list-label-${this.state.networkPorts[index]}`;\r\n\r\n                                    return (\r\n                                    <ListItem key={index} role={undefined} dense button>\r\n                                        <ListItemText id={labelId} primary={\"Port \" + (index+1).toString()} />\r\n                                        <TextField defaultValue={this.state.networkPorts[index]} onChange={(e) => this.updatePort(index, e)} />\r\n                                    </ListItem>\r\n                                    );\r\n                                })}\r\n                                {this.state.numPorts === 0 ? <ListItem key=\"add-items\" role={undefined} dense>\r\n                                <ListItemText id=\"add-items-label\" primary=\"Enter the number of network ports above\" />\r\n                                </ListItem> : null}\r\n                                </List> : null }\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={this.closeModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </form>\r\n                </div>\r\n                </Backdrop>\r\n\r\n                </Fade>\r\n            </Modal>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.showImportModal}\r\n                onClose={this.closeImportModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.showImportModal}>\r\n                    <Backdrop\r\n                        open={this.state.showImportModal}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={9}>\r\n                                <Typography variant=\"h5\">Import Models</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    onClick={this.closeImportModal}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item direction=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype='file'\r\n                                    accept=\".csv\"\r\n                                    name=\"models_upload\"\r\n\t\t\t\t\t\t\t\t\tonChange={(event) => this.chooseFile(event)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n\t\t\t\t\t\t\t\t\tstyle={{width: \"40%\"}}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {this.uploadFile()}}\r\n                                >\r\n                                    Upload File\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(CreateModel);\r\n","\r\n\r\n\r\nexport const GENERAL_MODEL_ERROR =  \"There was an error in the backend. Could not perform the given model operation at this time.\";\r\n","import React from 'react';\nimport { CompactPicker } from 'react-color';\nimport axios from 'axios';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Paper, Popover, Typography, Modal, Backdrop, Fade } from '@material-ui/core';\nimport { TextField, Button, Grid, InputLabel, Select, MenuItem, CircularProgress } from \"@material-ui/core\";\nimport { List, ListItem, ListItemText, ListSubheader } from '@material-ui/core';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { ModelCommand } from '../enums/ModelCommands.ts'\nimport getURL from '../../helpers/functions/GetURL';\nimport * as ModelConstants from \"../ModelConstants\";\n\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    modal: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: \"100%\",\n            margin:\"0 auto\",\n            overflow: \"scroll\"\n        },\n        grid: {\n                backgroundColor: theme.palette.background.paper,\n                boxShadow: theme.shadows[5],\n                padding: theme.spacing(2, 4, 3),\n                width: \"50%\"\n        },\n        progress: {\n            display: 'flex',\n            '& > * + *': {\n                marginLeft: theme.spacing(2),\n            },\n        },\n});\n\nconst modelsMainPath = 'models/';\n\nfunction createInputs(name, label) {\n        return {label, name};\n}\n\nconst inputs = {\n    \"vendor\": createInputs('vendor', \"Vendor\", ),\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\n    \"mount_type\": createInputs('mount_type', 'Mount Type'),\n    \"height\": createInputs('height', \"Height\"),\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\n    \"cpu\": createInputs('cpu', \"CPU\"),\n    \"memory\": createInputs('memory', \"Memory\"),\n    \"storage\": createInputs('storage', \"Storage\"),\n    \"comment\": createInputs('comment', \"Comment\"),\n};\n\nconst mountTypeLookup = {\n    \"rackmount\": \"Rack Mounted\",\n    \"chassis\": \"Blade Chassis\",\n    \"blade\": \"Blade\",\n};\n\nclass ModelsTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n                popoverAnchor: null,\n                commentPopover: null,\n\n                networkPorts: [],\n                numPorts: 0,\n\n                showDetailedView: false,\n                showDeleteModal: false,\n\n                row: null,\n                comment: \"\",\n                color: '#000',\n\n                detailViewLoading: false,\n\n                detailedValues : {\n                    'vendor': '',\n                    'model_number': '',\n                    'mount_type': '',\n                    'height': '',\n                    'display_color': '',\n                    'ethernet_ports': [],\n                    'power_ports': '',\n                    'cpu': '',\n                    'memory': '',\n                    'storage': '',\n                    'comment': '',\n                },\n\n                originalVendor: '',\n                originalModelNumber: '',\n                originalHeight: '',\n\n                mountType: null,\n        };\n\n        axios.defaults.headers.common['token'] = this.props.token;\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\n    }\n\n    updateColor = (color) => {\n        var oldDetails = this.state.detailedValues;\n        oldDetails.display_color = color.hex;\n        this.setState({ color: color, detailedValues: oldDetails });\n        this.props.updateModelColor(color.hex);\n    }\n\n    // Show the detail view of a model to edit\n    showDetailedView = (row) => {\n        this.setState({\n            row: row,\n            showDetailedView: true,\n            detailViewLoading: true,\n            color: row[\"Display Color\"] === null ? \"#000000\" : row[\"Display Color\"],\n            networkPorts: row[\"Network Ports\"] === null ? [] : row[\"Network Ports\"],\n            numPorts: row[\"Network Ports\"] === null ? 0 : row[\"Network Ports\"].length,\n            mountType: row[\"Mount Type\"],\n        });\n\n        this.detailViewModel(row[\"Vendor\"], row[\"Model Number\"]);\n    }\n\n    // Get the details of a model\n    detailViewModel = (vendor, modelNum) => {\n        axios.post(\n            getURL(modelsMainPath, ModelCommand.detailView), {\n                'vendor': vendor,\n                'model_number': modelNum,\n            }).then(response => {\n                    const model = response.data['models'][0];\n                    this.setState({\n                        detailedValues: model,\n                        detailViewLoading: false,\n                        originalVendor: model[\"vendor\"],\n                        originalModelNumber: model[\"model_number\"],\n                        originalHeight: model[\"height\"]\n                    });\n            }).catch(function(error) {\n                this.setState({\n                    showStatus: true,\n                    statusMessage: ModelConstants.GENERAL_MODEL_ERROR,\n                    statusSeverity: \"error\"\n                });\n            });\n    }\n\n    // Close the detail view of a model\n    closeDetailedView = () => {\n        this.setState({ showDetailedView: false, row: null, color: \"#000000\", originalVendor: \"\", originalModelNumber: \"\", originalHeight: \"\" });\n    }\n\n    // Show delete model confirmation\n    showDeleteModal = (row) => {\n        this.setState({ showDeleteModal: true, originalVendor: row[\"Vendor\"], originalModelNumber: row[\"Model Number\"] });\n    }\n\n    // Close delete model confirmation\n    closeDeleteModal = () => {\n        this.setState({ showDeleteModal: false, originalVendor: \"\", originalModelNumber: \"\", originalHeight: \"\" });\n    }\n\n    // Delete a model\n    delete = () => {\n        this.props.deleteModel(this.state.originalVendor, this.state.originalModelNumber);\n        this.closeDeleteModal();\n    }\n\n    edit = (event) => {\n        event.preventDefault();\n        this.props.editModel(this.state.originalVendor, this.state.originalModelNumber, this.state.originalHeight, this.state.detailedValues, this.state.networkPorts);\n        this.closeDetailedView();\n    }\n\n    clickInfo = (event, ports) => {\n        this.setState({ popoverAnchor: event.target, networkPorts: ports });\n    }\n\n    clickComment = (event, comment) => {\n        this.setState({ commentPopover: event.target, comment: comment });\n    }\n\n    handlePopoverClose = () => {\n        this.setState({ popoverAnchor: null });\n    }\n\n    handleCommentPopoverClose = () => {\n        this.setState({ commentPopover: null });\n    }\n\n    updateNetworkPorts = (event) => {\n        const numPorts = event.target.value === '' ? 0 : event.target.value;\n\n        var ports = [];\n        for (var i = 1; i <= numPorts; i++) {\n                ports.push(i.toString());\n        }\n\n        this.setState({ networkPorts: ports, numPorts: numPorts });\n        this.updateModelEdited(event);\n    }\n\n    updatePort = (port, event) => {\n        const ports = this.state.networkPorts;\n        ports[port] = event.target.value;\n\n        this.setState({ networkPorts: ports });\n    }\n\n    save = () => {\n        this.props.editModel(this.state.originalVendor, this.state.originalModelNumber, this.state.originalHeight, this.state.detailedValues, this.state.networkPorts);\n        this.closeDetailedView();\n    }\n\n    updateModelEdited = (event) => {\n        this.state.detailedValues[event.target.name] = event.target.value;\n        this.forceUpdate();\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <TableContainer component={Paper}>\n                    <Table style={{ minWidth: 1000 }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                {this.props.columns.map(col => (\n                                    <TableCell align=\"center\">\n                                        <span id={col} style={{ fontWeight: \"bold\" }}>\n                                            {col}\n                                        </span>\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.props.vals.map((row, index) => (\n                                <TableRow id={index} hover={true}>\n                                    {this.props.privilege.admin || this.props.privilege.model ? (\n                                        <TableCell scope=\"row\" align=\"center\">\n                                            <Button\n                                                startIcon={<EditIcon />}\n                                                onClick={() => this.showDetailedView(row)}\n                                            />\n                                            <Button\n                                                startIcon={<DeleteIcon />}\n                                                onClick={() => this.showDeleteModal(row)}\n                                            />\n                                        </TableCell>\n                                    ) : null}\n                                    {this.props.keys.map(key => {\n                                        if (key === \"Display Color\") {\n                                            return (\n                                                <TableCell\n                                                    scope=\"row\"\n                                                    align=\"center\"\n                                                    style={{\n                                                        backgroundColor: row[key]\n                                                    }}\n                                                ></TableCell>\n                                            );\n                                        }\n\n                                        if (key === \"Network Ports\") {\n                                            return (\n                                                <TableCell scope=\"row\" align=\"center\">\n                                                    {row[key] === null ? \"\" : row[key].length}\n                                                    {row[key] == null ? null : (\n                                                        <Button style={{ margin: \"5px\" }}>\n                                                            <ViewListIcon\n                                                                onClick={e => {\n                                                                    this.clickInfo(e, row[key]);\n                                                                }}\n                                                            />\n                                                        </Button>\n                                                    )}\n                                                </TableCell>\n                                            );\n                                        }\n\n                                        if (key == \"Comment\") {\n                                            return row[\"Comment\"] !== null && row[\"Comment\"].length > 0 ? (\n                                                <TableCell scope=\"row\" align=\"center\">\n                                                    <Button\n                                                        startIcon={<CommentIcon />}\n                                                        onClick={e => this.clickComment(e, row[\"Comment\"])}\n                                                    />\n                                                </TableCell>\n                                            ) : (\n                                                <TableCell scope=\"row\" align=\"center\"></TableCell>\n                                            );\n                                        }\n\n                                        if (key == \"Mount Type\") {\n                                            return (\n                                            <TableCell scope=\"row\" align=\"center\">\n                                                {mountTypeLookup[row[key]]}\n                                            </TableCell>\n                                        );\n                                        }\n\n                                        return (\n                                            <TableCell scope=\"row\" align=\"center\">\n                                                {row[key]}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Popover\n                    id={Boolean(this.state.popoverAnchor) ? \"simple-popover\" : undefined}\n                    open={Boolean(this.state.popoverAnchor)}\n                    anchorEl={this.state.popoverAnchor}\n                    onClose={this.handlePopoverClose}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\"\n                    }}\n                    transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"center\"\n                    }}\n                >\n                    <List\n                        className={classes.root}\n                        subheader={\n                            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                                Network Ports\n                            </ListSubheader>\n                        }\n                    >\n                        {this.state.networkPorts.map(value => {\n                            const labelId = `checkbox-list-label-${value}`;\n\n                            return (\n                                <ListItem key={value} role={undefined} dense button>\n                                    <ListItemText id={labelId} primary={value} />\n                                </ListItem>\n                            );\n                        })}\n                    </List>\n                </Popover>\n                <Popover\n                    id={Boolean(this.state.commentPopover) ? \"simple-popover\" : undefined}\n                    open={Boolean(this.state.commentPopover)}\n                    anchorEl={this.state.commentPopover}\n                    onClose={this.handleCommentPopoverClose}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\"\n                    }}\n                    transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"center\"\n                    }}\n                >\n                    <Typography\n                        variant=\"body1\"\n                        style={{\n                            padding: \"30px\"\n                        }}\n                    >\n                        {this.state.comment}\n                    </Typography>\n                </Popover>\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={this.state.showDetailedView}\n                    onClose={this.closeDetailedView}\n                    closeAfterTransition\n                >\n                    <Fade in={this.state.showDetailedView}>\n                        <Backdrop open={this.state.showDetailedView}>\n                            <div className={classes.grid}>\n                                {this.state.detailViewLoading ? (\n                                    <CircularProgress />\n                                ) : (\n                                    <form\n                                        onSubmit={(event) => this.edit(event)}\n                                    >\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={12}>\n                                            <Typography variant=\"h5\">Model Details</Typography>\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={6} lg={6}>\n                                            <Autocomplete\n                                                id=\"select-vendor\"\n                                                options={this.props.options}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.vendor\n                                                }\n                                                includeInputInList\n                                                freeSolo\n                                                renderInput={params => (\n                                                    <TextField\n                                                        {...params}\n                                                        label={inputs.vendor.label}\n                                                        required={true}\n                                                        name={inputs.vendor.name}\n                                                        onChange={this.updateModelEdited}\n                                                        onBlur={this.updateModelEdited}\n                                                        variant=\"outlined\"\n                                                        fullWidth\n                                                    />\n                                                )}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={6} md={4} lg={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.modelNumber.label}\n                                                name={inputs.modelNumber.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.model_number\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <InputLabel id=\"select-mount-type-label\">Mount Type</InputLabel>\n                                            <Select\n                                                labelId=\"select-mount-type-label\"\n                                                id=\"select-mount-type\"\n                                                name={inputs.mount_type.name}\n                                                value={this.state.mountType}\n                                                required={true}\n                                                onChange={this.updateModelEdited}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                <MenuItem value=\"rackmount\">Rack Mounted</MenuItem>\n                                                <MenuItem value=\"chassis\">Blade Chassis</MenuItem>\n                                                <MenuItem value=\"blade\">Blade</MenuItem>\n                                            </Select>\n                                        </Grid>\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.height.label}\n                                                name={inputs.height.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.height\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 1, max: 42 } }}\n                                                style={{ width: \"100%\" }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.ethernetPorts.label}\n                                                name={inputs.ethernetPorts.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.ethernet_ports == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.ethernet_ports.length\n                                                }\n                                                onChange={this.updateNetworkPorts}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.powerPorts.label}\n                                                name={inputs.powerPorts.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.power_ports\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.cpu.label}\n                                                name={inputs.cpu.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.cpu\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.memory.label}\n                                                name={inputs.memory.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.memory\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                                style={{ width: \"100%\" }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.storage.label}\n                                                name={inputs.storage.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.storage\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.comment.label}\n                                                name={inputs.comment.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.comment\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>Display Color</Typography>\n                                            <CompactPicker\n                                                color={this.state.color}\n                                                onChange={this.updateColor}\n                                            />\n                                        </Grid>\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={12}>\n                                            <List\n                                                className={classes.root}\n                                                subheader={\n                                                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                                                        Network Ports\n                                                    </ListSubheader>\n                                                }\n                                                style={{\n                                                    maxHeight: \"30vh\",\n                                                    overflow: \"auto\"\n                                                }}\n                                            >\n                                                {Array.from({ length: this.state.numPorts }, (x, i) => i).map(\n                                                    (_, index) => {\n                                                        const labelId = `list-label-${this.state.networkPorts[index]}`;\n\n                                                        return (\n                                                            <ListItem key={index} role={undefined} dense button>\n                                                                <ListItemText\n                                                                    id={labelId}\n                                                                    primary={\"Port \" + (index + 1).toString()}\n                                                                />\n                                                                <TextField\n                                                                    defaultValue={this.state.networkPorts[index]}\n                                                                    onChange={e => this.updatePort(index, e)}\n                                                                />\n                                                            </ListItem>\n                                                        );\n                                                    }\n                                                )}\n                                                {this.state.numPorts === 0 ? (\n                                                    <ListItem key=\"add-items\" role={undefined} dense>\n                                                        <ListItemText\n                                                            id=\"add-items-label\"\n                                                            primary=\"Enter the number of network ports above\"\n                                                        />\n                                                    </ListItem>\n                                                ) : null}\n                                            </List>\n                                        </Grid>\n                                        : null }\n                                        <Grid item xs={3}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                type=\"submit\"\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Save\n                                            </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeDetailedView}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                    </form>\n                                )}\n                            </div>\n                        </Backdrop>\n                    </Fade>\n                </Modal>\n\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={this.state.showDeleteModal}\n                    onClose={this.closeDeleteModal}\n                    closeAfterTransition\n                >\n                    <Fade in={this.state.showDeleteModal}>\n                        <Backdrop open={this.state.showDeleteModal}>\n                            <div className={classes.grid}>\n                                <Grid\n                                    container\n                                    spacing={1}\n                                    direction=\"row\"\n                                    justify=\"flex-start\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={12}>\n                                        <Typography variant=\"h5\">Are you sure?</Typography>\n                                    </Grid>\n                                    <Grid item xs={12} sm={12} md={6} lg={6}>\n                                        <Typography variant=\"body1\">\n                                            Doing this will remove the model permanently.\n                                        </Typography>\n                                    </Grid>\n\n                                    <Grid item xs={3}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={this.delete}\n                                            style={{ width: \"100%\" }}\n                                        >\n                                            Yes\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={this.closeDeleteModal}\n                                            style={{ width: \"100%\" }}\n                                        >\n                                            No\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Backdrop>\n                    </Fade>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(ModelsTable);\n","export enum UserCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search='search/',\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport { ModelCommand } from '../enums/ModelCommands.ts'\r\nimport { ModelInput } from '../enums/ModelInputs.ts'\r\n\r\nimport ExportModel from '../helpers/ExportModel';\r\nimport FilterModel from '../helpers/FilterModel';\r\nimport CreateModel from '../helpers/CreateModel';\r\n\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport ModelsTable from '../helpers/ModelsTable';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport * as ModelConstants from \"../ModelConstants\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\";\r\n\r\nconst columns = [\r\n    'Vendor',\r\n    'Model Number',\r\n    'Mount Type',\r\n    'Height',\r\n    'Display Color',\r\n    'Network Ports',\r\n    'Power Ports',\r\n    'CPU',\r\n    'Memory',\r\n    'Storage',\r\n    'Comment',\r\n]\r\n\r\nconst adminColumns = [\r\n    'Actions',\r\n    'Vendor',\r\n    'Model Number',\r\n    'Mount Type',\r\n    'Height',\r\n    'Display Color',\r\n    'Network Ports',\r\n    'Power Ports',\r\n    'CPU',\r\n    'Memory',\r\n    'Storage',\r\n    'Comment',\r\n]\r\n\r\nconst columnLookup = {\r\n    \"vendor\": \"Vendor\",\r\n    \"model_number\": \"Model Number\",\r\n    'mount_type': \"Mount Type\",\r\n    \"height\": \"Height\",\r\n    'display_color': 'Display Color',\r\n    'ethernet_ports': 'Network Ports',\r\n    'power_ports': 'Power Ports',\r\n    'cpu': 'CPU',\r\n    'memory': 'Memory',\r\n    'storage': 'Storage',\r\n    'comment': \"Comment\"\r\n}\r\n\r\nconst modelsMainPath = 'models/';\r\nconst modelDownloadFileName = 'models.csv';\r\n\r\nexport default class ModelsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // modals\r\n            showCreateModal: false,\r\n            showImportModal: false,\r\n\r\n            // table items\r\n            items: [],\r\n            rows: [],\r\n\r\n            // vals for creating a new model\r\n            createdModel : {\r\n                'vendor': '',\r\n                'model_number': '',\r\n                'mount_type': '',\r\n                'height': '',\r\n                'display_color': '#A52A2A',\r\n                'ethernet_ports': '',\r\n                'power_ports': '',\r\n                'cpu': '',\r\n                'memory': '',\r\n                'storage': '',\r\n                'comment': '',\r\n            },\r\n            createdVendor: '',\r\n            createdModelNum: '',\r\n            createdMountType: '',\r\n            createdHeight: '',\r\n            createdDispClr: '',\r\n            createdEthPorts: '',\r\n            createdPwrPorts: '',\r\n            createdCPU: '',\r\n            createdMem: '',\r\n            createdStorage: '',\r\n            createdComments: '',\r\n\r\n            detailedValues : {\r\n                'vendor': '',\r\n                'model_number': '',\r\n                'mount_type': '',\r\n                'height': '',\r\n                'display_color': '',\r\n                'ethernet_ports': '',\r\n                'power_ports': '',\r\n                'cpu': '',\r\n                'memory': '',\r\n                'storage': '',\r\n                'comment': '',\r\n            },\r\n\r\n            // vals for deleting a model\r\n            deleteVendor:'',\r\n            deleteModel:'',\r\n\r\n            // vals for viewing a model\r\n            viewVendor:'',\r\n            viewModel:'',\r\n\r\n            // searching a model\r\n            searchText: \"\",\r\n            searchVendor: '',\r\n            searchModelNum: '',\r\n            searchMountType: '',\r\n            searchMinHeight: '',\r\n            searchMaxHeight: '',\r\n            searchMinNetworkPorts: '',\r\n            searchMaxNetworkPorts: '',\r\n            searchMinPower: '',\r\n            searchMaxPower: '',\r\n            searchCPU: '',\r\n            searchMinMem: '',\r\n            searchMaxMem: '',\r\n            searchStore: '',\r\n            searchComment: '',\r\n\r\n            // csv data\r\n            csvData: '',\r\n\r\n            showStatus: false,\r\n            statusSeverity: '',\r\n            statusMessage: '',\r\n            detailshowStatus: false,\r\n            detailStatusSeverity: '',\r\n            detailStatusMessage: '',\r\n            createshowStatus: false,\r\n            statusSeverity:' ',\r\n            statusMessage: '',\r\n\r\n            vendorsList: [],\r\n            madeVendorQuery: false,\r\n        };\r\n\r\n        axios.defaults.headers.common['token'] = this.props.token;\r\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchModels();\r\n        this.getVendorList();\r\n    }\r\n\r\n    createModel = (networkPorts, mountType, color) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.create),\r\n            {\r\n                'vendor': this.state.createdModel[ModelInput.Vendor],\r\n                'model_number': this.state.createdModel[ModelInput.model_number],\r\n                'mount_type': mountType,\r\n                'height': this.state.createdModel[ModelInput.Height],\r\n                'display_color': color,\r\n                'ethernet_ports': this.state.createdModel[ModelInput.ethernet_ports],\r\n                'power_ports': this.state.createdModel[ModelInput.power_ports],\r\n                'cpu': this.state.createdModel[ModelInput.CPU],\r\n                'memory': this.state.createdModel[ModelInput.Memory],\r\n                'storage': this.state.createdModel[ModelInput.Storage],\r\n                'comment': this.state.createdModel[ModelInput.Comment],\r\n                'ethernet_ports': networkPorts,\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusMessage: \"Successfully created model\",\r\n                            statusSeverity: \"success\",\r\n                            createdModel : {\r\n                                'vendor': '',\r\n                                'model_number': '',\r\n                                'mount_type': '',\r\n                                'height': '',\r\n                                'display_color': '',\r\n                                'ethernet_ports': '',\r\n                                'power_ports': '',\r\n                                'cpu': '',\r\n                                'memory': '',\r\n                                'storage': '',\r\n                                'comment': '',\r\n                            },\r\n                            showCreateModal:false,\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n                    } else {\r\n                        this.setState({ createshowStatus: true, showStatus:true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                    }\r\n                }).catch(\r\n                    this.setState({ createshowStatus: true, statusMessage: ModelConstants.GENERAL_MODEL_ERROR, statusSeverity: \"error\" })\r\n                );\r\n    }\r\n\r\n    editModel = (originalVendor, originalModelNum, originalHeight, detailedValues, networkPorts) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.edit),\r\n            {\r\n                'vendorOriginal': originalVendor,\r\n                'model_numberOriginal': originalModelNum,\r\n                'heightOriginal': originalHeight,\r\n                'vendor': detailedValues[ModelInput.Vendor],\r\n                'model_number': detailedValues[ModelInput.model_number],\r\n                'mount_type': detailedValues[ModelInput.mount_type],\r\n                'height': detailedValues[ModelInput.Height],\r\n                'display_color': detailedValues[ModelInput.display_color],\r\n                'ethernet_ports': networkPorts,\r\n                'power_ports': detailedValues[ModelInput.power_ports],\r\n                'cpu': detailedValues[ModelInput.CPU],\r\n                'memory': detailedValues[ModelInput.Memory],\r\n                'storage': detailedValues[ModelInput.Storage],\r\n                'comment': detailedValues[ModelInput.Comment],\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusSeverity: 'success',\r\n                            statusMessage: \"Successfully edited model\",\r\n                            showDetailedView: false\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n                    } else {\r\n                        this.setState({ detailshowStatus: true, detailStatusMessage: response.data.message, detailStatusSeverity: \"error\" })\r\n                    }\r\n                }).catch(\r\n                    this.setState({ detailshowStatus: true, detailStatusMessage: ModelConstants.GENERAL_MODEL_ERROR, detailStatusSeverity: \"error\" })\r\n                );\r\n    }\r\n\r\n    deleteModel = (originalVendor, originalModelNumber) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.delete),\r\n            {\r\n                'vendor': originalVendor,\r\n                'model_number': originalModelNumber,\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusSeverity:'success',\r\n                            statusMessage: \"Successfully deleted model\",\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n                    } else {\r\n                        this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                    }\r\n                });\r\n    }\r\n\r\n    detailViewModel = (vendor, modelNum) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.detailView),\r\n            {\r\n                'vendor': vendor,\r\n                'model_number': modelNum,\r\n            }\r\n            ).then(response => {\r\n                this.setState({ detailedValues: response.data['models'][0], detailViewLoading: false});\r\n            }\r\n            ).catch(function(error) {\r\n                this.setState({ showStatus: true, statusMessage: ModelConstants.GENERAL_MODEL_ERROR, statusSeverity:\"error\" });\r\n            });\r\n\r\n        this.setState({\r\n            viewVendor: '',\r\n            viewModel: '',\r\n        });\r\n    }\r\n\r\n    searchModels = () => {\r\n        const filter = {\r\n            \"vendor\": this.state.searchVendor,\r\n            \"model_number\": this.state.searchModelNum,\r\n            'mount_type': this.state.searchMountType,\r\n            \"min_height\": this.state.searchMinHeight,\r\n            \"max_height\": this.state.searchMaxHeight,\r\n            \"min_ethernet_ports\": this.state.searchMinNetworkPorts,\r\n            \"max_ethernet_ports\": this.state.searchMaxNetworkPorts,\r\n            \"min_power_ports\": this.state.searchMinPower,\r\n            \"max_power_ports\": this.state.searchMaxPower,\r\n            'cpu': this.state.searchCPU,\r\n            'min_memory': this.state.searchMinMem,\r\n            'max_memory': this.state.searchMaxMem,\r\n            'storage': this.state.searchStore,\r\n            'comment': this.state.searchComment,\r\n        };\r\n\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.search),\r\n            {\r\n                'filter': {\r\n                    'vendor': \"\",\r\n                    'model_number': \"\",\r\n                    'height': \"\"\r\n                }\r\n            }\r\n            ).then(response => {\r\n                const models = response.data['models'] === undefined ? [] : response.data['models'];\r\n                var rows = [];\r\n                Object.values(models).forEach(model => {\r\n                    var row = {};\r\n                    Object.keys(model).forEach(key => {\r\n                        if (key in columnLookup) {\r\n                            row[columnLookup[key]] = model[key];\r\n                        } else {\r\n                            row[key] = model[key];\r\n                        }\r\n                    });\r\n\r\n\r\n                    if (\r\n                        (filter[\"vendor\"] == undefined || filter[\"vendor\"] === \"\" || row[\"Vendor\"] === undefined || row[\"Vendor\"].includes(filter[\"vendor\"])) &&\r\n                        (filter[\"model_number\"] === undefined || filter[\"model_number\"] === \"\" || row[\"Model Number\"].includes(filter[\"model_number\"])) &&\r\n                        (filter[\"mount_type\"] === undefined || filter[\"mount_type\"] === \"\" || row[\"Mount Type\"] === filter[\"mount_type\"]) &&\r\n                        (filter[\"min_height\"] === undefined || filter[\"min_height\"] === \"\" ||  row[\"Height\"] >= parseInt(filter[\"min_height\"])) &&\r\n                        (filter[\"max_height\"] === undefined || filter[\"max_height\"] === \"\" ||  row[\"Height\"] <= parseInt(filter[\"max_height\"])) &&\r\n\r\n                        (filter[\"min_ethernet_ports\"] === undefined || filter[\"min_ethernet_ports\"] === \"\" ||  row[\"Network Ports\"].length >= parseInt(filter[\"min_ethernet_ports\"])) &&\r\n                        (filter[\"max_ethernet_ports\"] === undefined || filter[\"max_ethernet_ports\"] === \"\" ||  row[\"Network Ports\"].length <= parseInt(filter[\"max_ethernet_ports\"])) &&\r\n\r\n\r\n                        (filter[\"min_power_ports\"] === undefined || filter[\"min_power_ports\"] === \"\" ||  row[\"Power Ports\"] >= parseInt(filter[\"min_power_ports\"])) &&\r\n                        (filter[\"max_power_ports\"] === undefined || filter[\"max_power_ports\"] === \"\" ||  row[\"Power Ports\"] <= parseInt(filter[\"max_power_ports\"])) &&\r\n\r\n\r\n                        (filter[\"cpu\"] === undefined || filter[\"cpu\"] === \"\" || row[\"CPU\"] === null || row[\"CPU\"].includes(filter[\"cpu\"])) &&\r\n                        (filter[\"min_memory\"] === undefined || filter[\"min_memory\"] === \"\" ||  row[\"Memory\"] >= parseInt(filter[\"min_memory\"])) &&\r\n                        (filter[\"max_memory\"] === undefined || filter[\"max_memory\"] === \"\" ||  row[\"Memory\"] <= parseInt(filter[\"max_memory\"])) &&\r\n\r\n                        (filter[\"storage\"] === undefined || filter[\"storage\"] === \"\" || row[\"Storage\"] === null || row[\"Storage\"].includes(filter[\"storage\"])) &&\r\n                        (filter[\"comment\"] === undefined || filter[\"comment\"] === \"\" || row[\"Comment\"] === null || row[\"Comment\"].includes(filter[\"comment\"]))\r\n                    ) {\r\n                        rows.push(row);\r\n                    }\r\n\r\n                });\r\n\r\n                this.setState({ rows: rows, items: models })\r\n            });\r\n\r\n        this.setState({\r\n            searchText: '',\r\n        });\r\n    }\r\n\r\n    getVendorList = () => {\r\n        axios.get(\r\n            getURL(modelsMainPath, ModelCommand.VENDOR_VALUES), {}\r\n        ).then(response => this.setState({ vendorsList: response.data.results }));\r\n\r\n        this.setState({ madeVendorQuery: true });\r\n    }\r\n\r\n    sendUploadedFile = (data) => {\r\n        axios.post(\r\n            getURL(\"models/\", ModelCommand.UPLOAD_FILE), data\r\n        ).then(response => {\r\n                if (response.data.message === 'success') {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.summary, statusSeverity: 'success', showImportModal: false,})\r\n                    this.searchModels();\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                }\r\n            });\r\n    }\r\n\r\n    downloadTable = () => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.EXPORT_FILE),\r\n            {\r\n                'filter': {\r\n                    'vendor': this.state.searchVendor,\r\n                    'model_number': this.state.searchModelNum,\r\n                    'height': this.state.searchHeight,\r\n                }\r\n            }\r\n        ).then(response => {\r\n            this.setState({ csvData: response.data.csvData });\r\n            this.csvLink.link.click();\r\n        });\r\n    }\r\n\r\n    search = (filters) => {\r\n        this.setState({\r\n            searchVendor: filters['vendor'],\r\n            searchModelNum: filters['model_number'],\r\n            searchMountType: filters['mount_type'],\r\n            searchMinHeight: filters['min_height'],\r\n            searchMaxHeight: filters['max_height'],\r\n            searchMinNetworkPorts: filters[\"min_ethernet_ports\"],\r\n            searchMaxNetworkPorts: filters[\"max_ethernet_ports\"],\r\n            searchMinPower: filters[\"min_power_ports\"],\r\n            searchMaxPower: filters[\"max_power_ports\"],\r\n            searchCPU: filters[\"cpu\"],\r\n            searchMinMem: filters[\"min_memory\"],\r\n            searchMaxMem: filters[\"max_memory\"],\r\n            searchStore: filters[\"storage\"],\r\n            searchComment: filters[\"comment\"],\r\n        }, this.searchModels);\r\n    }\r\n\r\n    searchAll = () => {\r\n        var filters = {\r\n            'vendor': '',\r\n            'model_number': '',\r\n            'height': ''\r\n        };\r\n\r\n        this.search(filters);\r\n    }\r\n\r\n    openCreateModal = () => {\r\n        this.setState({showCreateModal: true});\r\n    }\r\n\r\n    openImportModal = () => {\r\n        this.setState({showImportModal: true});\r\n    }\r\n\r\n    showDetailedView = (row) => {\r\n        this.setState({\r\n            detailViewLoading: true,\r\n         });\r\n\r\n        var vendor = row['Vendor'];\r\n        var modelNum = row['Model Number'];\r\n\r\n        this.detailViewModel(vendor, modelNum);\r\n    }\r\n\r\n    closeCreateModal = () => {\r\n        this.setState({showCreateModal: false});\r\n    }\r\n\r\n    closeImportModal = () => {\r\n        this.setState({showImportModal: false});\r\n    }\r\n\r\n    closeDetailedView = () => {\r\n        this.setState({ showDetailedView: false })\r\n    }\r\n\r\n    updateModelCreator = (event) => {\r\n        this.state.createdModel[event.target.name] = event.target.value;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateModelColor = (color) => {\r\n        this.state.createdModel['display_color'] = color;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateModelColorDetails = (color) => {\r\n        this.state.detailedValues['display_color'] = color;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateSearchText = (event) => {\r\n        this.setState({ searchText: event.target.value})\r\n    }\r\n\r\n    closeShowStatus = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    createStatusClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ createshowStatus: false })\r\n    }\r\n\r\n    detailStatusClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ detailshowStatus: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\">\r\n                            Models\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        {(this.props.privilege.admin || this.props.privilege.model) ?\r\n                        (<div>\r\n                            <CreateModel\r\n                                showStatus={this.state.createshowStatus}\r\n                                statusSeverity={this.state.statusSeverity}\r\n                                statusClose={this.createStatusClose}\r\n                                statusMessage={this.state.statusMessage}\r\n                                showCreateModal={this.state.showCreateModal}\r\n                                closeCreateModal={this.closeCreateModal}\r\n                                createModel={this.createModel}\r\n                                updateModelCreator={this.updateModelCreator}\r\n                                options={this.state.vendorsList}\r\n                                useAutocomplete={true}\r\n                                updateModelColor={this.updateModelColor}\r\n                                sendUploadedFile={this.sendUploadedFile}\r\n                            />\r\n                        </div>) : null}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                        <FilterModel\r\n                            updateSearchText={this.updateSearchText}\r\n                            search={this.search}\r\n                            filters={columns}\r\n                            options={this.state.vendorsList}\r\n                            useAutocomplete={true}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <ExportModel\r\n                            downloadTable={this.downloadTable}\r\n                            showAll={this.searchAll}\r\n                        />\r\n                        <CSVLink\r\n                            data={this.state.csvData}\r\n                            filename={modelDownloadFileName}\r\n                            className=\"hidden\"\r\n                            ref={(r) => this.csvLink = r}\r\n                            target=\"_blank\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <ModelsTable\r\n                            columns={this.props.privilege.admin || this.props.privilege.model ? adminColumns : columns}\r\n                            vals={this.state.rows}\r\n                            privilege={this.props.privilege}\r\n                            token={this.props.token}\r\n                            keys={columns}\r\n                            filters={this.props.privilege.admin || this.props.privilege.model ? adminColumns : columns}\r\n                            updateModelColor={this.updateModelColorDetails}\r\n                            deleteModel={this.deleteModel}\r\n                            editModel={this.editModel}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <StatusDisplay\r\n                    open={this.state.showStatus}\r\n                    severity={this.state.statusSeverity}\r\n                    closeStatus={this.closeShowStatus}\r\n                    message={this.state.statusMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nexport default function PrivilegePicker(props) {\r\n\tconst generalPrivileges=[\r\n\t\t{title:\"Model Management\", value:\"model\"},\r\n\t\t{title:\"Global Asset Management\", value:\"asset\"},\r\n\t\t{title:\"Auditing\", value:\"audit\"},\r\n\t\t{title:\"Power Management\", value:\"power\"},\r\n\t\t{title:\"Administrator\", value:\"admin\"},\r\n\t]\r\n\r\n\tvar defaultPrivs = [];\r\n\tvar defaultDCs = [];\r\n\r\n\tif(props.defaultPrivileges !== undefined) {\r\n\t\tif (props.defaultPrivileges.model) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[0]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.asset) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[1]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.audit) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[2]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.power) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[3]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.admin) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[4]);\r\n\t\t}\r\n\r\n\t\tdefaultDCs = props.defaultPrivileges.datacenters\r\n\t}\r\n\r\n\treturn (\r\n\t\t<span>\r\n\t\t\t<Typography>Privileges</Typography>\r\n\t\t\t<Autocomplete\r\n\t\t\t\tmultiple\r\n\t\t\t\tid=\"tags-standard\"\r\n\t\t\t\tgetOptionLabel={option => option.title}\r\n\t\t\t\toptions={generalPrivileges}\r\n\t\t\t\tonChange={props.updatePrivilege}\r\n\t\t\t\tdefaultValue={defaultPrivs}\r\n\t\t\t\trenderInput={params => (\r\n\t\t\t\t<TextField\r\n\t\t\t\t\t{...params}\r\n\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\tlabel=\"General Privileges\"\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t\t{props.loading ? <CircularProgress /> :\r\n\t\t\t<Autocomplete\r\n\t\t\t\tmultiple\r\n\t\t\t\tid=\"tags-standard\"\r\n\t\t\t\toptions={props.dcPrivileges}\r\n\t\t\t\tonChange={props.updateDCPrivilege}\r\n\t\t\t\tdefaultValue={defaultDCs}\r\n\t\t\t\trenderInput={params => (\r\n\t\t\t\t<TextField\r\n\t\t\t\t\t{...params}\r\n\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\tlabel=\"Datacenter Asset Privileges\"\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t/>}\r\n\t\t</span>\r\n\t)\r\n\r\n}\r\n","export enum PrivilegeCommand {\r\n    GET_PRIVILEGES = \"getPermissions/\",\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport '../../../stylesheets/Models.css';\r\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nexport default class Filters extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            display_name: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            privilege:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetCreate = (success) => {\r\n        if (success) {\r\n            this.setState({username: \"\", display_name: \"\", password: \"\", email: \"\", privilege:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },});\r\n        }\r\n    }\r\n\r\n    searchUsers = () => {\r\n        this.props.search( { \"filter\":this.state } );\r\n    }\r\n\r\n    updateprivilege = (event, values) => {\r\n        var privs = {\r\n            \"model\":false,\r\n            \"asset\":false,\r\n            \"datacenters\":this.state.privilege[\"datacenters\"],\r\n            \"power\":false,\r\n            \"audit\":false,\r\n            \"admin\":false,\r\n        };\r\n        values.map(priv => { privs[priv.value] = true; });\r\n        this.setState({ privilege: privs });\r\n    }\r\n\r\n    updateDCPrivilege = (event, values) => {\r\n        var privs = this.state.privilege;\r\n        privs[\"datacenters\"] = values;\r\n        this.setState({ privilege: privs });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Card elevation={3} padding>\r\n            <Typography variant=\"h6\">Search</Typography>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Username\" name=\"username\" value={this.state.username} onChange={(e) => this.setState({ username: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Display Name\" name=\"display_name\" value={this.state.display_name} onChange={(e) => this.setState({ display_name: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Password\" name=\"password\" type=\"password\" value={this.state.password} onChange={(e) => this.setState({ password: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Email\" name=\"email\" type=\"email\" value={this.state.email} onChange={(e) => this.setState({ email: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <PrivilegePicker\r\n                        dcPrivileges={this.props.privileges}\r\n                        loading={this.props.loading}\r\n                        updatePrivilege={this.updateprivilege}\r\n                        updateDCPrivilege={this.updateDCPrivilege}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    item\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    xs={12}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={this.searchUsers}\r\n                        style={{\r\n                            \"width\": \"100%\",\r\n                            \"marginTop\": \"20px\",\r\n                            \"backgroundColor\": \"blue\",\r\n                            \"color\": \"white\"\r\n                        }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport '../../../stylesheets/Models.css';\r\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nexport default class CreateModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            display_name: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            selectedPrivileges:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetCreate = (success) => {\r\n        if (success) {\r\n\r\n        }\r\n    }\r\n\r\n    createModel = () => {\r\n        this.props.createModel(this.state.username, this.state.password, this.state.display_name, this.state.email, this.state.selectedPrivileges, this.resetCreate);\r\n    }\r\n\r\n    updateSelectedPrivileges = (event, values) => {\r\n        var privs = {\r\n            \"model\":false,\r\n            \"asset\":false,\r\n            \"datacenters\":this.state.selectedPrivileges[\"datacenters\"],\r\n            \"power\":false,\r\n            \"audit\":false,\r\n            \"admin\":false,\r\n        };\r\n        values.map(priv => { privs[priv.value] = true; });\r\n        this.setState({ selectedPrivileges: privs });\r\n    }\r\n\r\n    updateDCPrivilege = (event, values) => {\r\n        var privs = this.state.selectedPrivileges;\r\n        privs[\"datacenters\"] = values;\r\n        this.setState({ selectedPrivileges: privs });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Card elevation={3} padding>\r\n            <Typography variant=\"h6\">Create</Typography>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Username\" name=\"username\" value={this.state.username} onChange={(e) => this.setState({ username: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Display Name\" name=\"display_name\" value={this.state.display_name} onChange={(e) => this.setState({ display_name: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Password\" name=\"password\" type=\"password\" value={this.state.password} onChange={(e) => this.setState({ password: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Email\" name=\"email\" type=\"email\" value={this.state.email} onChange={(e) => this.setState({ email: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <PrivilegePicker\r\n                        dcPrivileges={this.props.privileges}\r\n                        loading={this.props.loading}\r\n                        updatePrivilege={this.updateSelectedPrivileges}\r\n                        updateDCPrivilege={this.updateDCPrivilege}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    item\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    xs={12}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={this.createModel}\r\n                        style={{\r\n                            \"width\": \"100%\",\r\n                            \"marginTop\": \"20px\",\r\n                            \"backgroundColor\": \"green\",\r\n                            \"color\": \"white\"\r\n                        }}\r\n                    >\r\n                        Create\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Button from '@material-ui/core/Button';\nimport { Privilege } from '../../enums/privilegeTypes';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\n\nconst useStyles = theme => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmodal: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\twidth: \"100%\",\n\t\tmargin: \"0 auto\",\n\t\toverflow: \"scroll\"\n\t},\n\tgrid: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3),\n\t\twidth: \"50%\"\n\t},\n\tprogress: {\n\t\tdisplay: 'flex',\n\t\t'& > * + *': {\n\t\t\tmarginLeft: theme.spacing(2),\n\t\t},\n\t},\n});\n\nclass UsersTable extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcanEdit: false,\n\t\t\tshowDeleteModal: false,\n\t\t\tusername: '',\n\n\t\t\toriginalUsername:\"\",\n\t\t\tusername: \"\",\n\t\t\tdisplay_name: \"\",\n\t\t\tpassword: \"\",\n\t\t\temail: \"\",\n\t\t\tselectedPrivileges:{\n\t\t\t\t\"model\":false,\n\t\t\t\t\"asset\":false,\n\t\t\t\t\"datacenters\":[],\n\t\t\t\t\"power\":false,\n\t\t\t\t\"audit\":false,\n\t\t\t\t\"admin\":false,\n\t\t\t},\n\t\t\tpassword:\"\",\n\t\t};\n\t}\n\n\tshowDetailedView(index) {\n\t\tthis.props.showDetailedView(index);\n\t}\n\n\tbeginEditing = (event, row) => {\n\t\tthis.setState({ canEdit: true });\n\t\tconsole.log(row);\n\t\tthis.setState({\n\t\t\toriginalUsername:row.Username,\n\t\t\tusername:row.Username,\n\t\t\tdisplay_name:row[\"Display Name\"],\n\t\t\temail:row.Email,\n\t\t\tselectedPrivileges:row.Privilege,\n\t\t\tpassword:row.password,\n\t\t});\n\t}\n\n\tendEditing = () => {\n\t\tthis.setState({ canEdit: false });\n\t\tthis.props.save(\n\t\t\tthis.state.originalUsername,\n\t\t\tthis.state.username,\n\t\t\tthis.state.password,\n\t\t\tthis.state.display_name,\n\t\t\tthis.state.email,\n\t\t\tthis.state.selectedPrivileges\n\t\t);\n\t}\n\n\tshowDeleteModal = (row) => {\n\t\tthis.setState({ showDeleteModal: true, username: row[\"Username\"] });\n\t}\n\n\tcloseDeleteModal = () => {\n\t\tthis.setState({ showDeleteModal: false, username: \"\" });\n\t}\n\n\tdelete = () => {\n\t\tthis.props.delete(this.state.username);\n\t\tthis.closeDeleteModal();\n\t}\n\n\tupdateSelectedPrivileges = (event, values) => {\n        var privs = {\n            \"model\":false,\n            \"asset\":false,\n            \"datacenters\":this.state.selectedPrivileges[\"datacenters\"],\n            \"power\":false,\n            \"audit\":false,\n            \"admin\":false,\n        };\n        values.map(priv => { privs[priv.value] = true; });\n        this.setState({ selectedPrivileges: privs });\n    }\n\n    updateDCPrivilege = (event, values) => {\n        var privs = this.state.selectedPrivileges;\n        privs[\"datacenters\"] = values;\n        this.setState({ selectedPrivileges: privs });\n    }\n\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<TableContainer component={Paper}>\n\t\t\t\t\t<Table style={{ minWidth: 1000 }} aria-label=\"simple table\">\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow >\n\t\t\t\t\t\t\t\t{this.props.columns.map(col => {\n\t\t\t\t\t\t\t\t\tif (col === \"Privilege\") {\n\t\t\t\t\t\t\t\t\t\treturn (this.state.canEdit ? <TableCell align=\"center\"><span id={col} style={{ fontWeight: \"bold\" }}>{col}</span></TableCell>:null)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn <TableCell align=\"center\"><span id={col} style={{ fontWeight: \"bold\" }}>{col}</span></TableCell>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{this.props.vals.map((row, index) => (\n\t\t\t\t\t\t\t\t<TableRow id={index}>\n\t\t\t\t\t\t\t\t\t{this.props.privilege.admin ? <TableCell scope=\"row\" align=\"center\">\n\t\t\t\t\t\t\t\t\t\t{row[\"Username\"] !== \"admin\" ? <div><Button>\n\t\t\t\t\t\t\t\t\t\t\t{this.state.canEdit ? <SaveIcon onClick={this.endEditing} /> : <EditIcon onClick={(e) => { this.beginEditing(e, row) }} />}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t<Button>\n\t\t\t\t\t\t\t\t\t\t\t\t<DeleteIcon onClick={() => this.showDeleteModal(row)} />\n\t\t\t\t\t\t\t\t\t\t\t</Button></div> : null}\n\t\t\t\t\t\t\t\t\t</TableCell> : null}\n\t\t\t\t\t\t\t\t\t{this.props.keys.map(key => {\n\t\t\t\t\t\t\t\t\t\tif (key === \"Privilege\") {\n\t\t\t\t\t\t\t\t\t\t\treturn (this.state.canEdit && row[\"Username\"] !== \"admin\" ? <TableCell scope=\"row\" align=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<PrivilegePicker\n\t\t\t\t\t\t\t\t\t\t\t\t\tdcPrivileges={this.props.privileges}\n\t\t\t\t\t\t\t\t\t\t\t\t\tloading={this.props.loading}\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdatePrivilege={this.updateSelectedPrivileges}\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdateDCPrivilege={this.updateDCPrivilege}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefaultPrivileges={row.Privilege}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</TableCell> : null);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn (<TableCell scope=\"row\" align=\"center\">{row[key]}</TableCell>)\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\n\t\t\t\t<Modal\n\t\t\t\t\taria-labelledby=\"transition-modal-title\"\n\t\t\t\t\taria-describedby=\"transition-modal-description\"\n\t\t\t\t\tclassName={classes.modal}\n\t\t\t\t\topen={this.state.showDeleteModal}\n\t\t\t\t\tonClose={this.closeDeleteModal}\n\t\t\t\t\tcloseAfterTransition\n\t\t\t\t>\n\t\t\t\t\t<Fade in={this.state.showDeleteModal}>\n\t\t\t\t\t\t<Backdrop\n\t\t\t\t\t\t\topen={this.state.showDeleteModal}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className={classes.grid}>\n\t\t\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\t\t\tcontainer\n\t\t\t\t\t\t\t\t\tspacing={1}\n\t\t\t\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\t\t\t\tjustify=\"flex-start\"\n\t\t\t\t\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h5\">Are you sure?</Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={12} md={6} lg={6}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\n\t\t\t\t\t\t\t\t\t\t\tDoing this will remove the user permanently.\n                                </Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.delete}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tYes\n                                </Button>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.closeDeleteModal}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tNo\n                                </Button>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Backdrop>\n\n\t\t\t\t\t</Fade>\n\t\t\t\t</Modal>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withStyles(useStyles)(UsersTable);\n","\r\n\r\nexport const GENERAL_USER_ERROR =  \"There was an error in the backend. Could not perform the given user operation at this time.\";\r\n\r\nexport const USER_SUCCESS_TOKEN = \"success\";\r\nexport const USER_FAILURE_TOKEN = \"error\";\r\n\r\nexport const USER_CREATION_SUCCESS_MESSAGE = \"Successfully created user\";\r\nexport const USER_CREATION_FAILURE_MESSAGE = \"Failed to create user\";\r\n\r\nexport const USER_EDIT_SUCCESS_MESSAGE = \"Successfully updated user\";\r\nexport const USER_EDIT_FAILURE_MESSAGE = \"Failed to update user\";\r\n\r\nexport const USER_DELETE_SUCCESS_MESSAGE = \"Successfully deleted user\";\r\nexport const USER_DELETE_FAILURE_MESSAGE = \"Failed to delete user\";\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Typography,\r\n    Grid,\r\n} from '@material-ui/core';\r\n\r\nimport { UserCommand } from '../enums/UserCommands.ts'\r\nimport FilterUser from '../helpers/FilterUser';\r\nimport CreateUser from '../helpers/CreateUser';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport UsersTable from '../helpers/UsersTable';\r\nimport StatusDisplay from '../../helpers/StatusDisplay';\r\nimport * as UserConstants from \"../UserConstants\";\r\nimport { PrivilegeCommand } from \"../enums/PrivilegeCommands.ts\";\r\nimport * as Constants from \"../../Constants\";\r\nimport makeCreateJSON from \"../helpers/functions/MakeCreateJSON\";\r\nimport makeEditJSON from \"../helpers/functions/MakeEditJSON\";\r\nimport makeDeleteJSON from \"../helpers/functions/MakeDeleteJSON\";\r\nimport makeDetailViewJSON from \"../helpers/functions/MakeDetailViewJSON\";\r\n\r\nconst inputs = [\r\n    'username',\r\n    'email',\r\n    'display_name',\r\n    'privilege',\r\n    'password',\r\n]\r\n\r\nconst columns = [\r\n    'Username',\r\n    'Email',\r\n    'Display Name',\r\n    'Privilege',\r\n]\r\n\r\nconst adminColumns = [\r\n    'Actions',\r\n    'Username',\r\n    'Email',\r\n    'Display Name',\r\n    'Privilege'\r\n]\r\n\r\nconst columnLookup = {\r\n    \"username\": \"Username\",\r\n    \"email\": \"Email\",\r\n    \"display_name\": \"Display Name\",\r\n    'privilege': 'Privilege'\r\n}\r\n\r\nconst blankSearch = {\r\n    \"filter\":\r\n    {\r\n        \"username\": \"\",\r\n        \"display_name\": \"\",\r\n        \"email\": \"\",\r\n        \"privilege\": {\r\n            \"model\": false,\r\n            \"asset\": false,\r\n            \"datacenters\": [],\r\n            \"power\": false,\r\n            \"audit\": false,\r\n            \"admin\": false,\r\n        }\r\n    }\r\n}\r\n\r\nexport default class UsersView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            statusOpen: false,\r\n            statusSeverity: '',\r\n            statusMessage: '',\r\n            searchUsernm: '',\r\n            searchEml: '',\r\n            searchDspNm: '',\r\n            searchPriv: '',\r\n            deleteUsername: '',\r\n            viewUser: '',\r\n            csvData: [],\r\n            showDetailedView: false,\r\n            detailViewLoading: false,\r\n            originalUsername: '',\r\n            allDCPrivileges: [],\r\n            loadingPrivileges: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchUsers(blankSearch);\r\n        this.getPrivileges();\r\n    }\r\n\r\n    createUser = (username, password, display_name, email, privileges, completion) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.create),\r\n            makeCreateJSON(username, password, display_name, email, privileges)\r\n        ).then(response => {\r\n            if (response.data.message === UserConstants.USER_SUCCESS_TOKEN) {\r\n                completion(true);\r\n                this.setDisplayStatus(true, UserConstants.USER_CREATION_SUCCESS_MESSAGE, UserConstants.USER_SUCCESS_TOKEN);\r\n                this.searchUsers(blankSearch);\r\n            } else {\r\n                completion(false);\r\n                this.setDisplayStatus(true, response.data.message, UserConstants.USER_FAILURE_TOKEN)\r\n            }\r\n        });\r\n    }\r\n\r\n    editUser = (originalUsername, username, password, display_name, email, privileges, completion) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.edit),\r\n            makeEditJSON(originalUsername, username, password, display_name, email, privileges)\r\n        ).then(response => this.processResponse(response, UserConstants.USER_EDIT_SUCCESS_MESSAGE, UserConstants.USER_EDIT_FAILURE_MESSAGE));\r\n    }\r\n\r\n    deleteUser = (username) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.delete),\r\n            makeDeleteJSON(username)\r\n        ).then(response =>\r\n            this.processResponse(response, UserConstants.USER_DELETE_SUCCESS_MESSAGE, UserConstants.USER_DELETE_FAILURE_MESSAGE)\r\n        );\r\n    }\r\n\r\n    detailViewUser = (username) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.detailView),\r\n            makeDetailViewJSON(username)\r\n        ).then(response => this.setState({ detailedValues: response.data['user'], detailViewLoading: false }));\r\n    }\r\n\r\n    searchUsers = (filters) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.search),\r\n            filters,\r\n        ).then(response => {\r\n            const models = response.data['users'] === undefined ? [] : response.data['users'];\r\n            var rows = [];\r\n            Object.values(models).forEach(model => {\r\n                var row = {};\r\n                Object.keys(model).forEach(key => {\r\n                    if (key in columnLookup) {\r\n                        row[columnLookup[key]] = model[key];\r\n                    } else {\r\n                        row[key] = model[key];\r\n                    }\r\n                });\r\n                rows.push(row);\r\n            });\r\n\r\n            this.setState({ items: rows });\r\n        });\r\n    }\r\n\r\n    getPrivileges = () => {\r\n        axios.get(getURL(Constants.PERMISSIONS_MAIN_PATH, PrivilegeCommand.GET_PRIVILEGES)).then(\r\n            response => {\r\n                try {\r\n                    this.setState({\r\n                        allDCPrivileges: response.data.datacenters,\r\n                        loadingPrivileges: false,\r\n                    });\r\n                } catch {\r\n                    this.setState({\r\n                        allDCPrivileges: [],\r\n                        loadingPrivileges: false,\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setDisplayStatus = (open, message, severity) => {\r\n        this.setState({ statusOpen: open, statusMessage: message, statusSeverity: severity });\r\n    }\r\n\r\n    showDetailedView = (id) => {\r\n        this.setState({\r\n            showDetailedView: true,\r\n            detailViewLoading: true,\r\n            originalUsername: this.state.items[id]['username'],\r\n        });\r\n\r\n        var username = this.state.items[id]['username'];\r\n\r\n        this.detailViewUser(username);\r\n        //this.setState({ detailedValues: Constants.testUserArray[id], detailViewLoading:false})\r\n    }\r\n\r\n    closeDetailedView = () => {\r\n        this.setState({ showDetailedView: false })\r\n    }\r\n\r\n    updateUserEdited = (event) => {\r\n        const newDetails = this.state.detailedValues;\r\n        newDetails[event.target.name] = event.target.value;\r\n        this.setState({ detailedValues: newDetails });\r\n        this.forceUpdate()\r\n    }\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ statusOpen: false })\r\n    }\r\n\r\n    processResponse = (response, successMessage, failureMessage) => {\r\n        console.log(response);\r\n        if (response.data.message === UserConstants.USER_SUCCESS_TOKEN) {\r\n            this.setDisplayStatus(true, successMessage, UserConstants.USER_SUCCESS_TOKEN);\r\n            this.searchUsers(blankSearch);\r\n        } else {\r\n            this.setDisplayStatus(true, response.data.message, UserConstants.USER_FAILURE_TOKEN);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatusDisplay\r\n                    open={this.state.statusOpen}\r\n                    severity={this.state.statusSeverity}\r\n                    closeStatus={this.closeShowStatus}\r\n                    message={this.state.statusMessage}\r\n                />\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{ margin: \"0px\", maxWidth: \"95vw\" }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\">\r\n                            Users\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={6}>\r\n                        {(this.props.privilege.admin) ?\r\n                            (<div>\r\n                                <CreateUser\r\n                                    showCreateModal={this.state.showCreateModal}\r\n                                    closeCreateModal={this.closeCreateModal}\r\n                                    createModel={this.createUser}\r\n                                    updateModelCreator={this.updateUserCreator}\r\n                                    inputs={inputs}\r\n                                    options={[]}\r\n                                    useAutocomplete={false}\r\n                                    loading={this.state.loadingPrivileges}\r\n                                    privileges={this.state.allDCPrivileges}\r\n                                />\r\n                            </div>) : null}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={6}>\r\n                        <FilterUser\r\n                            updateSearchText={this.updateSearchText}\r\n                            search={this.searchUsers}\r\n                            filters={columns}\r\n                            loading={this.state.loadingPrivileges}\r\n                            privileges={this.state.allDCPrivileges}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <UsersTable\r\n                            columns={this.props.privilege.admin ? adminColumns : columns}\r\n                            vals={this.state.items}\r\n                            keys={columns}\r\n                            privilege={this.props.privilege}\r\n                            showDetailedView={this.showDetailedView}\r\n                            filters={this.props.privilege.admin ? adminColumns : columns}\r\n                            delete={this.deleteUser}\r\n                            save={this.editUser}\r\n                            editUser={this.updateEditUser}\r\n                            loading={this.state.loadingPrivileges}\r\n                            privileges={this.state.allDCPrivileges}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export enum AssetInput {\r\n    MODEL = 'model',\r\n    HOSTNAME = 'hostname',\r\n    RACK = 'rack',\r\n    RACK_U = 'rack_position',\r\n    RACK_ORIGINAL = 'rackOriginal',\r\n    RACK_U_ORIGINAL = 'rack_positionOriginal',\r\n    OWNER = 'owner',\r\n    COMMENT = 'comment',\r\n    DATACENTER = 'datacenter_id',\r\n    TAGS = 'tags',\r\n    MAC_ADDRESS = 'mac_address',\r\n    NETWORK_CONNECTIONS = 'network_connections',\r\n    POWER_CONNECTIONS = 'power_connections',\r\n    ASSET_NUMBER = 'asset_number',\r\n    BLADE_CHASSIS = 'blade_chassis',\r\n    BLADE_POSITION = 'blade_position',\r\n}\r\n","export enum AssetCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search = 'search/',\r\n    GET_ALL_MODELS = 'assistedmodel/',\r\n    GET_ALL_OWNERS = 'assistedowner/',\r\n    GET_ALL_DATACENTERS = 'assisteddatacenter/',\r\n    GET_ALL_HOSTNAME = 'assistedhostname/',\r\n    UPLOAD_FILE = 'import/',\r\n    EXPORT_FILE = 'export/',\r\n    GET_NEXT_ASSET_NUM = 'nextAssetNumber/',\r\n    GET_NETWORK_NEIGHBORHOOD = \"networkNeighborhood/\",\r\n    CHANGE_PLAN_CREATE = 'createplan/',\r\n    CHANGE_PLAN_DELETE = 'deleteplan/',\r\n    CHANGE_PLAN_EDIT = 'editplan/',\r\n    CHANGE_PLAN_EXECUTE = 'execute/',\r\n    CHANGE_PLAN_GET_PLANS = 'getplans/',\r\n    CHANGE_PLAN_CREATE_ACTION = 'createaction/',\r\n    CHANGE_PLAN_EDIT_ACTION = 'editaction/',\r\n    CHANGE_PLAN_DELETE_ACTION = 'deleteaction/',\r\n    CHANGE_PLAN_GET_ACTIONS = 'getactions/',\r\n    GENERATE_LABELS = 'labelgen/',\r\n    DECOMMISSION = \"decommission_asset/\",\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeCreateJSON(username, password, display_name, email, privileges) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t\t'password': password,\r\n\t\t'display_name': display_name,\r\n\t\t'email': email,\r\n\t\t'privilege': privileges,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeEditJSON(originalUsername, username, password, display_name, email, privileges) {\r\n\treturn {\r\n\t\t'username_original':originalUsername,\r\n\t\t'username': username,\r\n\t\t'password': password,\r\n\t\t'display_name': display_name,\r\n\t\t'email': email,\r\n\t\t'privilege': privileges,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeDeleteJSON(username) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeDetailViewJSON(username) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t}\r\n}\r\n","\r\n\r\n\r\nexport const GENERAL_ASSET_ERROR =  \"There was an error in the backend. Could not perform the given asset operation at this time.\";\r\n\r\n\r\nexport const ASSETS_MAIN_PATH = 'instances/';\r\nexport const CHANGE_PLAN_PATH = 'changeplans/';\r\nexport const ASSET_DOWNLOAD_FILE_NAME = 'assets.csv';\r\nexport const SUCCESS_TOKEN = \"success\";\r\nexport const ERROR_TOKEN = \"error\";\r\n","import React from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport axios from \"axios\";\r\n\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport { AssetCommand } from \"../enums/AssetCommands.ts\";\r\nimport getURL from \"../../helpers/functions/GetURL\"\r\nimport * as Constants from \"../../Constants\";\r\n\r\n// nodes: [\r\n//     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\r\n//     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\r\n//     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\r\n//     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\r\n//     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\r\n//   ],\r\n//   edges: [\r\n//     { from: 1, to: 2 },\r\n//     { from: 1, to: 3 },\r\n//     { from: 2, to: 4 },\r\n//     { from: 2, to: 5 },\r\n//     { from: 5, to: 2 }\r\n//   ]\r\n//\r\n// vals: {\r\n//      \"host1\": [ \"host2\", \"host4\" ],\r\n//      \"host3\": [\"host5\", \"host7\", \"host9\", \"host11\"]\r\n// }\r\n\r\nfunction getGraph(primaryHosts, host) {\r\n    if (host === \"\") {\r\n        return {};\r\n    }\r\n\r\n    var hostnameMapping = {};\r\n    const hostID = 0;\r\n\r\n    var nodes = [];\r\n    nodes.push({\r\n        id: hostID,\r\n        label: \"\" + host,\r\n        color: \"#F5F5DC\"\r\n    });\r\n\r\n    hostnameMapping[host] = hostID;\r\n\r\n    var edges = [];\r\n    var primaryHostID = 1;\r\n\r\n    try {\r\n        console.log(\"nodes and edges\");\r\n        console.log(primaryHosts);\r\n        Object.entries(primaryHosts).map(([primaryHost, secondaryHosts]) => {\r\n            if (primaryHost !== \"message\" && primaryHost !== \"\" && primaryHost !== \"metadata\") {\r\n                if (hostnameMapping[primaryHost] !== undefined) {\r\n                    edges.push({ from: hostID, to: hostnameMapping[primaryHost] });\r\n                    edges.push({ from: hostnameMapping[primaryHost], to: hostID });\r\n                } else {\r\n                    nodes.push({\r\n                        id: primaryHostID,\r\n                        label: \"\" + primaryHost,\r\n                        color: \"#F0FFFF\"\r\n                    });\r\n                    edges.push({ from: hostID, to: primaryHostID });\r\n                    edges.push({ from: primaryHostID, to: hostID });\r\n                    hostnameMapping[primaryHost] = primaryHostID;\r\n                }\r\n                console.log(\"nodes and edges\");\r\n                var secondaryHostID = primaryHostID + 1;\r\n                try {\r\n                    secondaryHosts.map(secondaryHost => {\r\n                        if (secondaryHost !== \"\") {\r\n                            if (hostnameMapping[secondaryHost] !== undefined) {\r\n                                edges.push({ from: primaryHostID, to: hostnameMapping[secondaryHost] });\r\n                                edges.push({ to: primaryHostID, from: hostnameMapping[secondaryHost] });\r\n                            } else {\r\n                                nodes.push({\r\n                                    id: secondaryHostID,\r\n                                    label: \"\" + secondaryHost,\r\n                                    color: \"#7FFFD4\"\r\n                                });\r\n                                edges.push({ from: primaryHostID, to: secondaryHostID });\r\n                                edges.push({ to: primaryHostID, from: secondaryHostID });\r\n                                hostnameMapping[secondaryHost] = secondaryHostID;\r\n                                secondaryHostID++;\r\n                            }\r\n                        }\r\n                    });\r\n                } catch {\r\n\r\n                }\r\n\r\n                console.log(\"nodes and edges\");\r\n                primaryHostID = secondaryHostID + 1;\r\n            }\r\n        });\r\n\r\n        console.log(\"nodes and edges\");\r\n        console.log(nodes);\r\n        console.log(edges);\r\n        return { nodes: nodes, edges: edges };\r\n\r\n    } catch (Exception) {\r\n        console.log(\"in here\")\r\n        console.log(Exception);\r\n        return { nodes: [], edges: [] }\r\n    }\r\n}\r\n\r\nclass NetworkGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            graph: {\r\n                nodes: [],\r\n                edges: [],\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.GET_NETWORK_NEIGHBORHOOD), {\r\n            \"asset_number\": this.props.assetNum,\r\n        }).then(response => {\r\n            this.setState({ graph: getGraph(response.data, this.props.host) });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            layout: {\r\n                hierarchical: false\r\n            },\r\n            edges: {\r\n                color: \"#000000\"\r\n            },\r\n            height: \"500px\",\r\n            interaction: {\r\n                dragNodes: false,\r\n                dragView: false,\r\n            }\r\n        };\r\n\r\n        const events = {\r\n            select: function (event) {\r\n                var { nodes, edges } = event;\r\n            }\r\n        };\r\n\r\n        return (\r\n            <span>\r\n                {this.props.isDecommissioned ?\r\n                    <Graph\r\n                        graph={getGraph(this.props.decomAsset.network_neighborhood, this.props.host)}\r\n                        options={options}\r\n                        events={events}\r\n                        getNetwork={network => {\r\n                            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n                        }}\r\n                    />\r\n                    :\r\n                    this.state.graph.edges.length === 0 ?\r\n                        <Typography>This asset is not currently connected to any other assets</Typography> :\r\n                        <Graph\r\n                            graph={this.state.graph}\r\n                            options={options}\r\n                            events={events}\r\n                            getNetwork={network => {\r\n                                //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n                            }}\r\n                        />\r\n                }\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n\r\nexport default NetworkGraph;\r\n","/**\r\n * For MAC addresses, the system should accept a six-byte hexadecimal value\r\n * with any byte seperator punctuation (including colon, dash, underscore, and\r\n * no seperator at all). Upon accepting the value, it should be formatted into a\r\n * lower-case colon-delimited canonical form.\r\n *\r\n * @param {string} val\r\n */\r\n\r\nexport default function stringToMac(val) {\r\n    // A  A  :  A  A  :  A  A  :  A  A  :  A  A  :  A  A\r\n    // 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16\r\n\r\n    var returnVal = \"\";\r\n\r\n    returnVal = val.replace(/[^0-9A-Fa-f]*/g, \"\").toLowerCase();\r\n\r\n    if (returnVal.length > 12) {\r\n        returnVal = returnVal.substring(0, 12);\r\n    }\r\n\r\n    if (returnVal.length === 1 || returnVal.length === 2) {\r\n        return returnVal;\r\n    }\r\n\r\n    if (returnVal.length === 3 || returnVal.length === 4) {\r\n        return returnVal.substring(0, 2) + \":\" + returnVal.substring(2);\r\n    }\r\n\r\n    if (returnVal.length === 5 || returnVal.length === 6) {\r\n        return returnVal.substring(0, 2) + \":\" + returnVal.substring(2, 4) + \":\" + returnVal.substring(4);\r\n    }\r\n\r\n    if (returnVal.length === 7 || returnVal.length === 8) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6);\r\n    }\r\n\r\n    if (returnVal.length === 9 || returnVal.length === 10) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6, 8)\r\n        + \":\" + returnVal.substring(8);\r\n    }\r\n\r\n    if (returnVal.length === 11 || returnVal.length === 12) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6, 8)\r\n        + \":\" + returnVal.substring(8, 10)\r\n        + \":\" + returnVal.substring(10,12);\r\n    }\r\n\r\n    return returnVal;\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\nimport { CompactPicker } from 'react-color';\r\n\r\nimport { TextField, Button, Tooltip, CircularProgress, Grid } from \"@material-ui/core\";\r\nimport { Autocomplete, Alert } from '@material-ui/lab';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Radio, RadioGroup, FormControl, FormControlLabel, FormHelperText } from '@material-ui/core';\r\nimport { IconButton, Slide, InputLabel, MenuItem, Select } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Modal, Backdrop } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport PowerIcon from '@material-ui/icons/Power';\r\nimport PowerOffIcon from '@material-ui/icons/PowerOff';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\n\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport * as Constants from \"../../Constants\";\r\nimport { Typography } from '@material-ui/core';\r\nimport stringToMac from \"./functions/StringToMacAddress\"\r\nimport stringToRack from \"./functions/StringToRack\";\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst emptySearch = {\r\n    \"filter\": {\r\n        \"vendor\": null,\r\n        \"model_number\": null,\r\n        \"height\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"username\": null,\r\n        \"display_name\": null,\r\n        \"email\": null,\r\n        \"privilege\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"starting_rack_letter\": null,\r\n        \"ending_rack_letter\": null,\r\n        \"starting_rack_number\": null,\r\n        \"ending_rack_number\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null\r\n    },\r\n    \"datacenter_name\": \"\",\r\n}\r\n\r\nconst searchPath = \"search/\";\r\nconst left = \"left\";\r\nconst right = \"right\";\r\nconst off = \"off\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogDiv: {\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    form: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n    buttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass EditAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // next available asset number\r\n            loadingAssetNumber: true,\r\n\r\n            // model information\r\n            loadingModels: true,\r\n            modelList: [],\r\n            networkList: null,\r\n            powerPortList: null,\r\n\r\n            // owner information\r\n            loadingOwners: true,\r\n            ownerList: [],\r\n\r\n            // datacenter information\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n\r\n            // hostname information\r\n            loadingHostnames: true,\r\n            assetNumList: [],\r\n            assetNumToModelList: null,\r\n\r\n            model: \"\",\r\n            hostname: \"\",\r\n            rack: \"\",\r\n            rackU: -1,\r\n            owner: \"\",\r\n            comment: \"\",\r\n            datacenter_name: \"\",\r\n            tags: [],\r\n            network_connections: null,\r\n            power_connections: null,\r\n            asset_number: -1,\r\n            blade_chassis: \"\",\r\n            blade_position: null,\r\n            mount_type: null,\r\n\r\n            chassisList: [],\r\n            mountTypes: null,\r\n\r\n            selectedConnection: null,\r\n\r\n            statusOpen: false,\r\n            statusMessage: \"\",\r\n            statusSeverity: \"\",\r\n\r\n            showModal: false,\r\n\r\n            powerPortState: null,\r\n            leftRight: null,\r\n            availableConnections: false,\r\n            portOptions: [],\r\n\r\n            canSubmit: false,\r\n            updated: false,\r\n            showConfirmationBox: false,\r\n\r\n            inputs: {\r\n                \"model\": createInputs(AssetInput.MODEL, \"Model\", false, \"A reference to an existing model\"),\r\n                \"hostname\": createInputs(AssetInput.HOSTNAME, \"Hostname\", false, \"A short string compliant with RFC 1034’s definition of 'label'\"),\r\n                \"rack\": createInputs(AssetInput.RACK, \"Rack\", false, \"The rack the equipment is installed in, written as a row letter and rack number, e.g. 'B12'\"),\r\n                \"rackU\": createInputs(AssetInput.RACK_U, \"Rack U\", false, \"An integer indicating the vertical location of the bottom of the equipment (e.g. '5')\"),\r\n                \"owner\": createInputs(AssetInput.OWNER, \"Owner\", false, \"A reference to an existing user on the system who owns this equipment\"),\r\n                \"comment\": createInputs(AssetInput.COMMENT, \"Comments\", false, \"Any additional information associated with this asset\"),\r\n                \"datacenter\": createInputs(AssetInput.DATACENTER, \"Datacenter\", false, \"A reference to an existing datacenter\"),\r\n                \"macAddress\": createInputs(AssetInput.MAC_ADDRESS, \"Mac Address\", false, \"A 6-byte hexadecimal string per network port shown canonically in lower case with colon delimiters (e.g., '00:1e:c9:ac:78:aa').\\nA hostname is required to enter in this value\"),\r\n                \"networkConnections\": createInputs(AssetInput.NETWORK_CONNECTIONS, \"Port Name\", false, \"For each network port, a reference to another network port on another piece of gear\"),\r\n                \"powerConnections\": createInputs(AssetInput.POWER_CONNECTIONS, \"Power Connections\", false, \"Choice of PDU port number (0 means not plugged in)\"),\r\n                \"assetNum\": createInputs(AssetInput.ASSET_NUMBER, \"Asset Number\", false, \"A six-digit serial number unique associated with an asset.\"),\r\n                \"bladeChassis\": createInputs(AssetInput.BLADE_CHASSIS, \"Blade Chassis\", false, \"A reference to a blade chassis asset\"),\r\n                \"bladePosition\": createInputs(AssetInput.BLADE_POSITION, \"Blade Position\", false, \"An integer indicating the slot number of a blade\"),\r\n            },\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if ((this.props.defaultValues.model !== this.state.model\r\n            || this.props.defaultValues.hostname !== this.state.hostname\r\n            || this.props.defaultValues.rack !== this.state.rack\r\n            || this.props.defaultValues.rack_position !== this.state.rackU\r\n            || this.props.defaultValues.owner !== this.state.owner\r\n            || this.props.defaultValues.comment !== this.state.comment\r\n            || this.props.defaultValues.datacenter_name !== this.state.datacenter_name\r\n            || this.props.defaultValues.tags !== this.state.tags\r\n            || this.props.defaultValues.network_connections !== this.state.network_connections\r\n            || this.props.defaultValues.power_connections !== this.state.power_connections\r\n            || this.props.defaultValues.asset_number !== this.state.asset_number)\r\n            && !this.state.updated\r\n        ) {\r\n            this.setState({\r\n                model: this.props.defaultValues.model,\r\n                hostname: this.props.defaultValues.hostname,\r\n                rack: this.props.defaultValues.rack,\r\n                rackU: this.props.defaultValues.rack_position,\r\n                owner: this.props.defaultValues.owner,\r\n                comment: this.props.defaultValues.comment,\r\n                datacenter_name: this.props.defaultValues.datacenter_name,\r\n                tags: this.props.defaultValues.tags,\r\n                network_connections: this.props.defaultValues.network_connections,\r\n                power_connections: this.getPowerPortFromProps(this.props.defaultValues.power_connections),\r\n                asset_number: this.props.defaultValues.asset_number,\r\n                customCPU: this.props.defaultValues.cpu,\r\n                customColor: this.props.defaultValues.display_color,\r\n                customMemory: this.props.defaultValues.memory,\r\n                customStorage: this.props.defaultValues.storage,\r\n                leftRight: this.getPowerFromProps(this.props.defaultValues.power_connections),\r\n            });\r\n        } else {\r\n            //this.setState({ updated: true, });\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLists();\r\n    }\r\n\r\n    getPowerFromProps = (pwrCons) => {\r\n        var pwr = [];\r\n\r\n        pwrCons.map(pwrCon => {\r\n            if (pwrCon.includes(\"L\")) {\r\n                pwr.push(\"left\");\r\n            } else if (pwrCon.includes(\"R\")) {\r\n                pwr.push(\"right\");\r\n            } else {\r\n                pwr.push(\"off\");\r\n            }\r\n        })\r\n\r\n        return pwr;\r\n    }\r\n\r\n    getPowerPortFromProps = (pwrCons) => {\r\n        var pwrPorts = [];\r\n\r\n        try {\r\n            pwrCons.map(pwrCon => {\r\n                pwrPorts.push(parseInt(pwrCon.substring(1)));\r\n            });\r\n        } catch {\r\n\r\n        }\r\n\r\n        return pwrPorts;\r\n    }\r\n\r\n    getLists = () => {\r\n        this.getModelList();\r\n        this.getOwnerList();\r\n        this.getDatacenterList();\r\n        this.getAssetList();\r\n        this.getChassisList();\r\n    }\r\n\r\n    getChassisList = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getchassis\")\r\n        ).then(\r\n            response => {\r\n                var instances = response.data.instances;\r\n                var instanceNames = [];\r\n\r\n                instances.map(instance => {\r\n                    instanceNames.push(instance.hostname);\r\n                });\r\n\r\n                this.setState({ chassisList: instanceNames });\r\n            }\r\n        )\r\n    }\r\n\r\n    getModelList = () => {\r\n        axios.post(\r\n            getURL(Constants.MODELS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var models = response.data.models;\r\n\r\n                    var modelNames = [];\r\n                    var networkNames = {};\r\n                    var powerPortNames = {};\r\n                    var mountType = {};\r\n\r\n                    models.map(model => {\r\n                        var modelKey = model.vendor + \" \" + model.model_number;\r\n                        modelNames.push(modelKey);\r\n                        networkNames[modelKey] = model.ethernet_ports;\r\n                        powerPortNames[modelKey] = parseInt(model.power_ports);\r\n                        mountType[modelKey] = model.mount_type;\r\n                    });\r\n\r\n                    this.setState({ loadingModels: false, modelList: modelNames, networkList: networkNames, powerPortList: powerPortNames, mountTypes: mountType });\r\n                });\r\n    }\r\n\r\n    getOwnerList = () => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, searchPath), {\r\n            \"filter\":\r\n            {\r\n                \"username\": \"\",\r\n                \"display_name\": \"\",\r\n                \"email\": \"\",\r\n                \"privilege\": {\r\n                    \"model\": false,\r\n                    \"asset\": false,\r\n                    \"datacenters\": [],\r\n                    \"power\": false,\r\n                    \"audit\": false,\r\n                    \"admin\": false\r\n                }\r\n            }\r\n        }).then(\r\n            response => {\r\n                try {\r\n                    console.log(response);\r\n                    var users = [];\r\n                    response.data.users.map(user => users.push(user.username + \"/\" + user.display_name));\r\n                    this.setState({ loadingOwners: false, ownerList: users });\r\n                } catch {\r\n                    this.setState({ loadingOwners: false })\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n                response => {\r\n                    var datacenters = [];\r\n                    response.data.datacenters.map(datacenter => {\r\n                        if (this.props.privilege.datacenters.length > 0) {\r\n                            if (this.props.privilege.datacenters[0] === \"*\" || this.props.privilege.datacenters.includes(datacenter.abbreviation) || this.props.privilege.asset || this.props.privilege.admin) {\r\n                                datacenters.push(datacenter);\r\n                            }\r\n                        }\r\n                    });\r\n                    this.setState({ loadingDatacenters: false, datacenterList: datacenters })\r\n                });\r\n\r\n    }\r\n\r\n    getAssetList = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var instances = response.data.instances;\r\n\r\n                    var hostnames = [];\r\n                    var hostToModel = {};\r\n                    instances.map(instance => {\r\n                        hostnames.push(instance.hostname);\r\n                        hostToModel[instance.hostname] = instance.model;\r\n                    })\r\n\r\n                    this.setState({ loadingHostnames: false, assetNumList: hostnames, assetNumToModelList: hostToModel }, this.availableNetworkConnections());\r\n                });\r\n    }\r\n\r\n    editAsset = (event) => {\r\n        event.preventDefault();\r\n        var json = this.createJSON();\r\n        console.log(json);\r\n        var changePlanJSON = {\r\n            \"change_plan_id\": this.props.changePlanID,\r\n            \"step\": this.props.changePlanStep,\r\n            \"action\": \"update\",\r\n            \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n            \"new_record\": json\r\n        };\r\n        var url = this.props.changePlanActive ? getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION) : getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.edit);\r\n        axios.post(\r\n            url,\r\n            this.props.changePlanActive ? changePlanJSON : json\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                    this.props.incrementChangePlanStep();\r\n                    this.setState({ statusOpen: true, statusMessage: \"Successfully saved edits\", statusSeverity: AssetConstants.SUCCESS_TOKEN });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            });\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        console.log(event.target.value);\r\n        var model = event.target.value;\r\n\r\n        if (model !== \"\") {\r\n            var ports = this.state.networkList[model];\r\n            var networkConns = {};\r\n\r\n            if (ports !== null) {\r\n                ports.map(port => {\r\n                    var defaultNetworkPort = {\r\n                        \"mac_address\": \"\",\r\n                        \"connection_hostname\": \"\",\r\n                        \"connection_port\": \"\",\r\n                    }\r\n                    networkConns[port] = defaultNetworkPort;\r\n                });\r\n            }\r\n\r\n            this.setState({ mount_type: this.state.mountTypes[model] });\r\n        } else {\r\n            var networkConns = {};\r\n        }\r\n\r\n\r\n        this.setState({ model: model, network_connections: networkConns }, () => { });\r\n    }\r\n\r\n    updateBladeChassis = (event) => {\r\n        this.setState({ blade_chassis: event.target.value });\r\n    }\r\n\r\n    updateBladePosition = (event) => {\r\n        this.setState({ blade_position: event.target.value });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value });\r\n    }\r\n\r\n    updateRack = (event) => {\r\n        var rackVal = stringToRack(event.target.value);\r\n        this.setState({ rack: rackVal }, () => { });\r\n    }\r\n\r\n    updateRackU = (event) => {\r\n        this.setState({ rackU: event.target.value }, () => { });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        this.setState({ owner: event.target.value }, () => { });\r\n    }\r\n\r\n    updateComment = (event) => {\r\n        this.setState({ comment: event.target.value }, () => { });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        var isOffline = false;\r\n\r\n        this.state.datacenterList.map(dc => {\r\n            if (dc.name === event.target.value) {\r\n                isOffline = dc.is_offline_storage;\r\n            }\r\n        });\r\n\r\n        this.setState({ datacenter_name: event.target.value, datacenterIsOffline: isOffline }, () => { });\r\n    }\r\n\r\n    updateTags = (event) => {\r\n        this.setState({ tags: event.target.value }, () => { });\r\n    }\r\n\r\n    changeNetworkMacAddress = (event, port) => {\r\n        var val = stringToMac(event.target.value);\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].mac_address = val;\r\n            return { network_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    changeNetworkHostname = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].connection_hostname = val;\r\n            return { network_connections };\r\n        }, () => { this.getPortOptions(val); });\r\n    }\r\n\r\n    changeNetworkPort = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port] = (network_connections[port] === null) ? {} : network_connections[port];\r\n            network_connections[port].connection_port = val;\r\n            return { network_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    updatePowerPort = (event, port) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let power_connections = Object.assign({}, prevState.power_connections);\r\n            power_connections[port] = val;\r\n            return { power_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    changePowerPortState = (event, portNum) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let leftRight = Object.assign({}, prevState.leftRight);\r\n            leftRight[portNum] = val;\r\n            return { leftRight };\r\n        }, () => { });\r\n    }\r\n\r\n    updateAssetNumber = (event) => {\r\n        this.setState({ asset_number: event.target.value }, () => { });\r\n    }\r\n\r\n    getPowerConnections = () => {\r\n        if (this.state.leftRight === null) {\r\n            return [];\r\n        }\r\n\r\n        var pwrConns = [];\r\n        var defaultValue = 1;\r\n        Object.entries(this.state.leftRight).map(([key, value]) => {\r\n            var num = this.state.power_connections === null ? defaultValue : this.state.power_connections[key];\r\n            switch (value) {\r\n                case left:\r\n                    pwrConns.push(\"L\" + num);\r\n                    break;\r\n                case right:\r\n                    pwrConns.push(\"R\" + num);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return pwrConns;\r\n    }\r\n\r\n    createJSON = () => {\r\n        return {\r\n            \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n            \"model\": this.state.model,\r\n            \"hostname\": this.state.hostname,\r\n            \"rack\": this.state.rack,\r\n            \"rack_position\": this.state.rackU,\r\n            \"owner\": this.state.owner.split(\"/\")[0],\r\n            \"comment\": this.state.comment,\r\n            \"datacenter_name\": this.state.datacenter_name,\r\n            \"tags\": this.state.tags,\r\n            \"network_connections\": ((this.state.network_connections === null) ? {} : this.state.network_connections),\r\n            \"power_connections\": this.getPowerConnections(),\r\n            'asset_number': this.state.asset_number,\r\n            \"blade_chassis\": this.state.blade_chassis,\r\n            \"blade_position\": this.state.blade_position,\r\n            \"display_color\": this.state.customColor,\r\n            \"cpu\": this.state.customCPU,\r\n            \"memory\": this.state.customMemory,\r\n            \"storage\": this.state.customStorage,\r\n        }\r\n    }\r\n\r\n    availableNetworkConnections = () => {\r\n        var availableNetworks = false;\r\n\r\n        var assets = this.state.assetNumList;\r\n        assets.map(asset => {\r\n            if (Object.keys(this.state.networList[this.state.assetNumToModelList[asset]].length).length > 0) {\r\n                availableNetworks = true;\r\n            }\r\n        });\r\n        this.setState({ availableConnections: availableNetworks });\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.props.fetchAllAssets();\r\n    }\r\n\r\n    statusClose = () => {\r\n        this.setState({ statusOpen: false, statusMessage: \"\", statusSeverity: \"\" });\r\n    }\r\n\r\n    getPortOptions = (hostname) => {\r\n        try {\r\n            this.setState({ portOptions: this.state.networkList[this.state.assetNumToModelList[hostname]] });\r\n        } catch {\r\n\r\n        }\r\n    }\r\n\r\n    getModel = () => {\r\n        return this.state.model;\r\n    }\r\n\r\n    displayNetworks = () => {\r\n        var model = this.getModel();\r\n        return (this.state.networkList && this.state.networkList[model] && !this.state.datacenterIsOffline);\r\n    }\r\n\r\n    getNetworkConnections = () => {\r\n        return this.state.network_connections;\r\n    }\r\n\r\n    getMacValue = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].mac_address : \"\"\r\n    }\r\n\r\n    getConnectingHostname = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].connection_hostname : \"\"\r\n    }\r\n\r\n    getConnectionPort = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].connection_port : \"\"\r\n    }\r\n\r\n    connectionsDisabled = () => {\r\n        return this.state.hostname === \"\";\r\n    }\r\n\r\n    deleteAsset = () => {\r\n        this.setState({ showConfirmationBox: false })\r\n        axios.post(getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.delete),\r\n            { \"asset_number\": this.props.defaultValues.asset_number, \"datacenter_name\": this.props.defaultValues.datacenter_name }).then(\r\n                response => {\r\n                    if (response.data.message === \"success\") {\r\n                        this.props.close();\r\n                        this.props.fetchAllAssets();\r\n                        this.props.showStatus(true, \"success\", \"Successfully deleted asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                }\r\n            )\r\n    }\r\n\r\n    decommissionAsset = () => {\r\n        if (this.props.changePlanActive) {\r\n            var json = this.createJSON();\r\n            console.log(json);\r\n            var changePlanJSON = {\r\n                \"change_plan_id\": this.props.changePlanID,\r\n                \"step\": this.props.changePlanStep,\r\n                \"action\": \"decommission\",\r\n                \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n                \"new_record\": json\r\n            };\r\n            var url = getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION);\r\n            axios.post(\r\n                url,\r\n                changePlanJSON\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                        this.props.incrementChangePlanStep();\r\n                        this.props.showStatus(true, \"success\", \"Successfully decommissioned asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                });\r\n        } else {\r\n            axios.post(getURL(Constants.DECOMMISSIONS_MAIN_PATH, AssetCommand.DECOMMISSION),\r\n                {\r\n                    \"asset_number\": this.props.defaultValues.asset_number,\r\n                    \"datacenter_name\": this.props.defaultValues.datacenter_name,\r\n                    \"decommission_user\": this.props.username,\r\n                }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === \"success\") {\r\n                        this.props.close();\r\n                        this.props.fetchAllAssets();\r\n                        this.props.showStatus(true, \"success\", \"Successfully decommissioned asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    openConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: true });\r\n    }\r\n\r\n    closeConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: false })\r\n    }\r\n\r\n    cancelUpgrades = () => {\r\n        this.setState({\r\n            customizeModel: false,\r\n            customColor: this.props.defaultValues.display_colorOriginal,\r\n            customCPU: this.props.defaultValues.cpuOriginal,\r\n            customMemory: this.props.defaultValues.memoryOriginal,\r\n            customStorage: this.props.defaultValues.storageOriginal\r\n        });\r\n    }\r\n\r\n    restoreDefaults = () => {\r\n        this.setState({\r\n            customColor: this.props.defaultValues.display_colorOriginal,\r\n            customCPU: this.props.defaultValues.cpuOriginal,\r\n            customMemory: this.props.defaultValues.memoryOriginal,\r\n            customStorage: this.props.defaultValues.storageOriginal\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span className={classes.div}>\r\n                <Paper elevation={3}>\r\n                    {this.props.isDecommissioned ? \"This asset was decommissioned by \" + this.props.defaultValues.decommission_user + \" on \" + this.props.defaultValues.timestamp : \"\"}\r\n                    {(\r\n                        (this.state.loadingDatacenters\r\n                            || this.state.loadingModels\r\n                            || this.state.loadingHostnames\r\n                            || this.state.loadingOwners)\r\n                        //&& false\r\n                    ) ? <div className={classes.progress}><CircularProgress /></div> :\r\n                        <form\r\n                            onSubmit={(event) => { this.editAsset(event) }}\r\n                            className={classes.form}\r\n                        >\r\n                            <div className={classes.dialogDiv}>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.model.Tooltip} title={this.state.inputs.model.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.model.label}\r\n                                            name={this.state.inputs.model.name}\r\n                                            value={this.props.isDecommissioned ? this.props.defaultValues.vendor + \" \" + this.props.defaultValues.model_number : this.state.model}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"select-model\"\r\n                                            options={this.state.modelList}\r\n                                            includeInputInList\r\n                                            value={this.state.model}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.model.label}\r\n                                                    name={this.state.inputs.model.name}\r\n                                                    onChange={this.updateModel}\r\n                                                    onBlur={this.updateModel}\r\n                                                    required\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.owner.Tooltip} title={this.state.inputs.owner.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.owner.label}\r\n                                            name={this.state.inputs.owner.name}\r\n                                            fullWidth\r\n                                            value={this.state.owner}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"select-owner\"\r\n                                            options={this.state.ownerList}\r\n                                            includeInputInList\r\n                                            value={this.state.owner}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.owner.label}\r\n                                                    name={this.state.inputs.owner.name}\r\n                                                    onChange={this.updateOwner}\r\n                                                    onBlur={this.updateOwner}\r\n                                                    fullWidth\r\n                                                    disabled={this.props.disabled}\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <Autocomplete\r\n                                        id=\"select-chassis\"\r\n                                        options={this.state.chassisList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.bladeChassis.label}\r\n                                                name={this.state.inputs.bladeChassis.name}\r\n                                                onChange={this.updateBladeChassis}\r\n                                                onBlur={this.updateBladeChassis}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    /> : null}\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <span>\r\n                                        <InputLabel id=\"select-blade-position-label\">Blade Position</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-blade-position-label\"\r\n                                            id=\"select-blade-position\"\r\n                                            value={this.state.blade_position}\r\n                                            required={true}\r\n                                            onChange={this.updateBladePosition}\r\n                                            style={{ width: \"100%\" }}\r\n                                        >\r\n                                            <MenuItem value={1}>1</MenuItem>\r\n                                            <MenuItem value={2}>2</MenuItem>\r\n                                            <MenuItem value={3}>3</MenuItem>\r\n                                            <MenuItem value={4}>4</MenuItem>\r\n                                            <MenuItem value={5}>5</MenuItem>\r\n                                            <MenuItem value={6}>6</MenuItem>\r\n                                            <MenuItem value={7}>7</MenuItem>\r\n                                            <MenuItem value={8}>8</MenuItem>\r\n                                            <MenuItem value={9}>9</MenuItem>\r\n                                            <MenuItem value={10}>10</MenuItem>\r\n                                            <MenuItem value={11}>11</MenuItem>\r\n                                            <MenuItem value={12}>12</MenuItem>\r\n                                            <MenuItem value={13}>13</MenuItem>\r\n                                            <MenuItem value={14}>14</MenuItem>\r\n                                        </Select>\r\n                                    </span> : null}\r\n\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.datacenter.label}\r\n                                            name={this.state.inputs.datacenter.name}\r\n                                            fullWidth\r\n                                            value={this.state.datacenter_name}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"input-datacenter\"\r\n                                            options={this.state.datacenterList.map(dc => dc.name)}\r\n                                            includeInputInList\r\n                                            value={this.state.datacenter_name}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.datacenter.label}\r\n                                                    name={this.state.inputs.datacenter.name}\r\n                                                    onChange={this.updateDatacenter}\r\n                                                    onBlur={this.updateDatacenter}\r\n\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    disabled={this.props.disabled}\r\n\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n\r\n                                {(this.state.datacenterIsOffline) ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rack.Tooltip} title={this.state.inputs.rack.description}>\r\n                                        <TextField\r\n                                            id=\"input-rack\"\r\n                                            label={this.state.inputs.rack.label}\r\n                                            name={this.state.inputs.rack.name}\r\n                                            onChange={this.updateRack}\r\n                                            value={this.state.rack}\r\n                                            required\r\n                                            fullWidth\r\n                                            disabled={this.props.disabled}\r\n                                            defaultValue={this.props.defaultValues.rack}\r\n                                        />\r\n                                    </Tooltip>}\r\n                                {(this.state.datacenterIsOffline) ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rackU.Tooltip} title={this.state.inputs.rackU.description}>\r\n                                        <TextField\r\n                                            id=\"input-rackU\"\r\n\r\n                                            type=\"number\"\r\n                                            InputProps={{ inputProps: { min: 1, max: 42 } }}\r\n                                            label={this.state.inputs.rackU.label}\r\n                                            name={this.state.inputs.rackU.name}\r\n                                            onChange={this.updateRackU}\r\n                                            required\r\n                                            fullWidth\r\n                                            disabled={this.props.disabled}\r\n                                            value={this.state.rackU}\r\n                                        />\r\n                                    </Tooltip>}\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.assetNum.Tooltip} title={this.state.inputs.assetNum.description}>\r\n                                    <TextField\r\n                                        id=\"input-asset-number\"\r\n\r\n                                        type=\"number\"\r\n                                        InputProps={{ inputProps: { min: 100000, max: 999999 } }}\r\n                                        label={this.state.inputs.assetNum.label}\r\n                                        name={this.state.inputs.assetNum.name}\r\n                                        onChange={this.updateAssetNumber}\r\n                                        value={this.state.asset_number}\r\n                                        required\r\n                                        fullWidth\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.hostname.Tooltip} title={this.state.inputs.hostname.description}>\r\n                                    <TextField\r\n                                        id=\"input-hostname\"\r\n\r\n                                        label={this.state.inputs.hostname.label}\r\n                                        name={this.state.inputs.hostname.name}\r\n                                        onChange={this.updateHostname}\r\n                                        fullWidth\r\n                                        disabled={this.props.disabled}\r\n                                        value={this.state.hostname}\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                <div>\r\n                                    {this.state.customizeModel || this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={\"primary\"}\r\n                                            onClick={() => this.setState({ customizeModel: true })}\r\n                                        >\r\n                                            {\"Customize Model Hardware\"}\r\n                                        </Button>\r\n                                    }\r\n                                    {this.state.customizeModel || this.props.disabled ?\r\n                                        <span>\r\n                                            <CompactPicker\r\n                                                color={this.state.customColor}\r\n                                                onChange={color => { this.setState({ customColor: color.hex }) }}\r\n                                                disabled={this.props.disabled}\r\n                                            />\r\n                                            <TextField disabled={this.props.disabled} label={\"CPU\"} value={this.state.customCPU} onChange={event => { this.setState({ customCPU: event.target.value }) }} />\r\n                                            <TextField disabled={this.props.disabled} type=\"number\" value={this.state.customMemory} label={\"Memory\"} onChange={event => { this.setState({ customMemory: event.target.value }) }} InputProps={{ inputProps: { min: 0 } }} />\r\n                                            <TextField disabled={this.props.disabled} label={\"Storage\"} value={this.state.customStorage} onChange={event => { this.setState({ customStorage: event.target.value }) }} />\r\n                                            {this.props.disabled ? null : <div className={classes.buttons}>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color={\"primary\"}\r\n                                                    onClick={() => this.restoreDefaults()}\r\n                                                >\r\n                                                    Use original Model Values\r\n                                        </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => this.cancelUpgrades()}\r\n                                                >\r\n                                                    Cancel Upgrades\r\n                                        </Button>\r\n                                            </div>}\r\n                                        </span>\r\n                                        : null}\r\n                                </div>\r\n\r\n\r\n                                {this.displayNetworks() ?\r\n                                    <span>\r\n                                        {this.state.networkList[this.getModel()].length === Object.keys(this.state.network_connections).length ?\r\n                                            this.state.networkList[this.getModel()].map(networkPort => (\r\n                                                <div>\r\n                                                    <Typography style={{ display: \"inline-block\", }}>{\"Network Port: \" + networkPort + \": \"}</Typography>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.macAddress.Tooltip} title={this.state.inputs.macAddress.description}>\r\n                                                        <TextField\r\n                                                            id=\"input-mac-address\"\r\n                                                            style={{ display: \"inline-block\" }}\r\n                                                            label={this.state.inputs.macAddress.label}\r\n                                                            name={this.state.inputs.macAddress.name}\r\n                                                            onChange={(event) => { this.changeNetworkMacAddress(event, networkPort) }}\r\n                                                            fullWidth\r\n                                                            value={this.getMacValue(networkPort)}\r\n                                                        />\r\n                                                    </Tooltip>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                        {this.props.disabled ?\r\n                                                            <TextField\r\n                                                                label={\"Connection Hostname\"}\r\n                                                                name={\"Connection Hostname\"}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                fullWidth\r\n                                                                value={this.getConnectingHostname(networkPort)}\r\n                                                                disabled\r\n                                                            /> :\r\n                                                            <Autocomplete\r\n                                                                id=\"input-network-ports-hostname\"\r\n                                                                options={this.state.assetNumList}\r\n                                                                includeInputInList\r\n                                                                onChange={(event, value) => { this.changeNetworkHostname(value, networkPort) }}\r\n                                                                required={this.getNetworkConnections()[networkPort].connection_port !== \"\"}\r\n                                                                value={this.getConnectingHostname(networkPort)}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                renderInput={params => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        label={\"Connection Hostname\"}\r\n                                                                        name={\"Connection Hostname\"}\r\n\r\n                                                                        fullWidth\r\n                                                                    />\r\n                                                                )}\r\n                                                            />}\r\n                                                    </Tooltip>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                        {this.props.disabled ?\r\n                                                            <TextField\r\n                                                                label={\"Connection Port\"}\r\n                                                                name={\"Connection Port\"}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                fullWidth\r\n                                                                value={this.getConnectionPort(networkPort)}\r\n                                                                disabled\r\n                                                            /> :\r\n                                                            <Autocomplete\r\n                                                                id=\"input-network-ports-connection-port\"\r\n                                                                options={this.state.portOptions}\r\n                                                                includeInputInList\r\n                                                                onChange={(event, value) => { this.changeNetworkPort(value, networkPort) }}\r\n                                                                required={this.getNetworkConnections()[networkPort].connection_hostname !== \"\"}\r\n                                                                value={this.getConnectionPort(networkPort)}\r\n                                                                disabled={this.connectionsDisabled()}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                renderInput={params => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        label={\"Connection Port\"}\r\n                                                                        name={\"Connection Port\"}\r\n\r\n                                                                        fullWidth\r\n                                                                    />\r\n                                                                )}\r\n                                                            />}\r\n                                                    </Tooltip>\r\n                                                </div>\r\n                                            )) : null}\r\n                                    </span> : null}\r\n\r\n                                {(\r\n                                    !(this.state.powerPortList\r\n                                        && this.state.powerPortList[this.state.model])\r\n                                    || this.state.datacenterIsOffline\r\n                                ) ? null :\r\n                                    Array.from({ length: this.state.powerPortList[this.state.model] }, (_, k) => (\r\n                                        <span>\r\n                                            <Typography>{\"Power Port: \" + k}</Typography>\r\n                                            <FormControl component=\"fieldset\">\r\n                                                <RadioGroup\r\n                                                    id={\"power-port-\" + k}\r\n                                                    aria-label=\"position\"\r\n                                                    name={\"position\" + k}\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    value={(this.state.leftRight === null) ? off : (this.state.leftRight[k] === undefined ? off : this.state.leftRight[k])}\r\n                                                    onChange={(event) => { this.changePowerPortState(event, k) }}\r\n                                                    row\r\n                                                >\r\n                                                    <FormControlLabel\r\n                                                        value={left}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Left\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={right}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Right\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={off}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"No Connection\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                </RadioGroup>\r\n                                            </FormControl>\r\n                                            {(this.state.leftRight === null) ? null : (this.state.leftRight[k] === undefined || this.state.leftRight[k] === off ? null :\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    value={(this.state.power_connections === null) ? 1 : (this.state.power_connections[k] === undefined ? 1 : this.state.power_connections[k])}\r\n                                                    InputProps={{ inputProps: { min: 1, max: 24 } }}\r\n                                                    onChange={(event) => { this.updatePowerPort(event, k) }}\r\n                                                    disabled={this.props.disabled}\r\n                                                />\r\n                                            )}\r\n                                        </span>\r\n                                    ))\r\n                                }\r\n                                <div>\r\n                                    <TextField\r\n                                        id=\"input-comment\"\r\n                                        fullWidth\r\n                                        label={this.state.inputs.comment.label}\r\n                                        name={this.state.inputs.comment.name}\r\n                                        onChange={this.updateComment}\r\n                                        multiline={true}\r\n                                        fullWidth\r\n                                        style={{ width: \"50%\" }}\r\n                                        defaultValue={this.props.defaultValues.comment}\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                </div>\r\n\r\n                                { this.state.blade_chassis.includes(\"BMI\") ?\r\n                                <div className={classes.buttons}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<PowerIcon />}\r\n                                        style={{\r\n                                            backgroundColor: \"green\",\r\n                                            color: \"white\"\r\n                                        }}\r\n                                    >\r\n                                        Power On\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<PowerOffIcon />}\r\n                                        style={{\r\n                                            backgroundColor: \"black\",\r\n                                            color: \"white\"\r\n                                        }}\r\n                                    >\r\n                                        Power Off\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<LoopIcon />}\r\n                                        color=\"primary\"\r\n                                    >\r\n                                        Power Cycle\r\n                                    </Button>\r\n                                </div>\r\n                                : null }\r\n                                <div className={classes.buttons}>\r\n                                    {this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={this.props.changePlanActive ? \"\" : \"primary\"}\r\n                                            type=\"submit\"\r\n                                            style={{\r\n                                                backgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\"\r\n                                            }}\r\n                                        >\r\n                                            {this.props.changePlanActive ? \"Save to Change Plan\" : \"Save\"}\r\n                                        </Button>}\r\n                                    {this.props.disabled || this.props.changePlanActive ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick={() => this.openConfirmationBox()}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>}\r\n                                    {this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            onClick={() => this.decommissionAsset()}\r\n                                        >\r\n                                            {this.props.changePlanActive ? \"Decommission in Change Plan\" : \"Decommission\"}\r\n                                        </Button>}\r\n                                </div>\r\n                            </div></form>}\r\n                    {this.state.statusOpen ?\r\n                        <Alert\r\n                            severity={this.state.statusSeverity}\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        this.statusClose()\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {this.state.statusMessage}\r\n                        </Alert> : null}\r\n\r\n                    <Modal\r\n                        aria-labelledby=\"transition-modal-title\"\r\n                        aria-describedby=\"transition-modal-description\"\r\n                        className={classes.modal}\r\n                        open={this.state.showConfirmationBox}\r\n                        onClose={this.closeConfirmationBox}\r\n                        closeAfterTransition\r\n                        BackdropComponent={Backdrop}\r\n                        BackdropProps={{\r\n                            timeout: 500,\r\n                        }}\r\n                    >\r\n                        <div className={classes.paper}>\r\n                            <Grid container spacing={5}>\r\n                                <Grid item xs={12}>\r\n                                    Are you sure you wish to delete?\r\n                                    </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.deleteAsset()}\r\n                                    >\r\n                                        Yes\r\n                                        </Button>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.closeConfirmationBox()}\r\n                                    >\r\n                                        No\r\n                                        </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Modal>\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(EditAsset);\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Button,\r\n    ExpansionPanel,\r\n    ExpansionPanelSummary,\r\n    ExpansionPanelDetails,\r\n    Dialog,\r\n    AppBar,\r\n    Toolbar,\r\n    Slide,\r\n    IconButton,\r\n    Grid,\r\n} from \"@material-ui/core/\"\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { Typography } from '@material-ui/core';\r\nimport NetworkGraph from \"./NetworkGraph\";\r\nimport EditAsset from \"./EditAsset\";\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst useStyles = theme => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(3),\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass DetailAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            networkNodes: null,\r\n            detailsExpanded: true,\r\n        };\r\n    }\r\n\r\n    closeDetailView = () => {\r\n        this.props.close();\r\n        this.props.fetchAllAssets();\r\n    }\r\n\r\n    toggleDetails = () => {\r\n        this.setState({ detailsExpanded: !this.state.detailsExpanded });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span>\r\n                <Dialog fullScreen open={this.props.open} TransitionComponent={Transition} padding={3}>\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={this.closeDetailView} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Asset Details\r\n                        </Typography>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    {this.props.changePlanActive ?\r\n                        <Alert severity=\"info\">\r\n                            <AlertTitle>Change Plan Mode</AlertTitle>\r\n                            <Typography>Current plan: {this.props.changePlanName}</Typography>\r\n\t\t\t\t\t\tYou are currently in change plan mode! Changes made are being logged in the plan and not actually made in the system.\r\n\t\t\t\t\t</Alert> : null}\r\n\r\n                    <EditAsset\r\n                        defaultValues={this.props.asset}\r\n                        disabled={this.props.disabled}\r\n                        close={this.props.close}\r\n                        getAssetList={this.props.getAssetList}\r\n                        privilege={this.props.privilege}\r\n                        changePlanActive={this.props.changePlanActive}\r\n                        changePlanID={this.props.changePlanID}\r\n                        changePlanStep={this.props.changePlanStep}\r\n                        incrementChangePlanStep={this.props.incrementChangePlanStep}\r\n                        username={this.props.username}\r\n                        fetchAllAssets={this.props.fetchAllAssets}\r\n                        isDecommissioned={this.props.isDecommissioned}\r\n                        showStatus={this.props.showStatus}\r\n                    />\r\n                    {this.props.asset.hostname !== undefined && this.props.asset.hostname !== \"\" ?\r\n                        <NetworkGraph\r\n                            vals={this.state.networkNodes}\r\n                            host={this.props.asset.hostname}\r\n                            assetNum={this.props.asset.asset_number}\r\n                            isDecommissioned={this.props.isDecommissioned}\r\n                            decomAsset={this.props.asset}\r\n                        /> : null}\r\n                </Dialog>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(DetailAsset);\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    Grid,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    Switch,\r\n    TextField,\r\n    Typography,\r\n    InputLabel,\r\n} from '@material-ui/core/';\r\nimport React from 'react';\r\nimport * as Constants from '../../Constants';\r\nimport getURL from '../../helpers/functions/GetURL';\r\n\r\n\r\nclass FilterAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            datacenter: \"\",\r\n            model: \"\",\r\n            hostname: \"\",\r\n            startingLetter: \"A\",\r\n            endingLetter: \"Z\",\r\n            startingNum: 1,\r\n            endingNum: 1000,\r\n            startDate: \"\",\r\n            endDate: \"\",\r\n            user: \"\",\r\n            datacenterList:[],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.search();\r\n        this.getDatacenterList();\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n            response => { this.setState({ datacenterList: response.data.datacenters }) });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        this.setState({ datacenter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        this.setState({ model: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartingLetter = (event) => {\r\n        this.setState({ startingLetter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateEndingLetter = (event) => {\r\n        this.setState({ endingLetter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartingNum = (event) => {\r\n        this.setState({ startingNum: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateEndingNum = (event) => {\r\n        this.setState({ endingNum: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartDate = (event) => {\r\n        console.log(event.target);\r\n        this.setState({ startDate: event.target.value }, () => this.search());\r\n    }\r\n\r\n    updateEndDate = (event) => {\r\n        this.setState({ endDate: event.target.value }, () => this.search());\r\n    }\r\n\r\n    updateUser = (event) => {\r\n        this.setState({ user: event.target.value }, () => this.search());\r\n    }\r\n\r\n    search = () => {\r\n        var items = [];\r\n        try {\r\n            if (this.props.assetType === \"decommissioned\") {\r\n                this.props.decAssets.map(asset => {\r\n                    var startDate = new Date(this.state.startDate === \"\" || parseInt(this.state.startDate) < 2000 ? \"01/01/2001\" : this.state.startDate + \" 00:00:00\");\r\n                    var endDate = new Date(this.state.endDate === \"\" || parseInt(this.state.endDate) < 2000 ? \"12/31/2025\" : this.state.endDate + \" 23:59:59\");\r\n                    var decDate = new Date(asset.timestamp);\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && (asset.vendor + asset.model_number).toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                        && asset.rack >= this.state.startingLetter + \"\" + this.state.startingNum\r\n                        && asset.rack <= this.state.endingLetter + \"\" + this.state.endingNum\r\n                        && asset.decommission_user.toLowerCase().includes(this.state.user.toLowerCase())\r\n                        && decDate >= startDate\r\n                        && decDate <= endDate\r\n                    ) {\r\n\r\n                        items.push(asset);\r\n                    }\r\n                });\r\n            } else if (this.props.assetType == \"active\") {\r\n                this.props.allAssets.map(asset => {\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && asset.model.toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                        && asset.rack >= this.state.startingLetter + \"\" + this.state.startingNum\r\n                        && asset.rack <= this.state.endingLetter + \"\" + this.state.endingNum\r\n                    ) {\r\n                        var offline = false;\r\n                        this.state.datacenterList.map(dc => {\r\n                            if (dc.is_offline_storage && asset.datacenter_name === dc.datacenter_name) {\r\n                                offline = true;\r\n                            }\r\n                        });\r\n                        if (!offline) {\r\n                            items.push(asset);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            } else if (this.props.assetType === \"offline\") {\r\n                this.props.allAssets.map(asset => {\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && asset.model.toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                    ) {\r\n                        var offline = false;\r\n                        this.state.datacenterList.map(dc => {\r\n                            if (dc.is_offline_storage && asset.datacenter_name === dc.datacenter_name) {\r\n                                offline = true;\r\n                            }\r\n                        });\r\n                        if (offline) {\r\n                            items.push(asset);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.props.updateItems(items);\r\n        } catch {\r\n            this.props.updateItems([]);\r\n        }\r\n\r\n    }\r\n\r\n    switchAssetType = (event) => {\r\n        console.log(event.target.value);\r\n        this.props.switchAssetType(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Paper elevation={3}>\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{ \"padding\": \"10px\" }}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\">Filter</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"site\"\r\n                                label=\"Site\"\r\n                                name=\"site\"\r\n                                onChange={(event) => { this.updateDatacenter(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"model\"\r\n                                label=\"Model\"\r\n                                name=\"model\"\r\n                                onChange={(event) => { this.updateModel(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"hostname\"\r\n                                label=\"Hostname\"\r\n                                name=\"hostname\"\r\n                                onChange={(event) => this.updateHostname(event)}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item item xs={12} sm={6} md={4} lg={3}></Grid>\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n                            <FormControl>\r\n                                <Select\r\n                                    id=\"starting-letter-selector\"\r\n                                    value={this.state.startingLetter}\r\n                                    onChange={this.updateStartingLetter}\r\n                                >\r\n                                    {Constants.RackX.map(val => (<MenuItem value={val}>{val}</MenuItem>))}\r\n                                </Select>\r\n                                <FormHelperText>Starting Letter</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n                            <FormControl>\r\n                                <Select\r\n                                    id=\"ending-letter-selector\"\r\n                                    value={this.state.endingLetter}\r\n                                    onChange={this.updateEndingLetter}\r\n                                >\r\n                                    {Constants.RackX.map(val => (<MenuItem value={val}>{val}</MenuItem>))}\r\n                                </Select>\r\n                                <FormHelperText>Ending Letter</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    id=\"starting-num-selector\"\r\n                                    type=\"number\"\r\n                                    value={this.state.startingNum}\r\n                                    onChange={this.updateStartingNum}\r\n                                    InputProps={{ inputProps: { min: 1 } }}\r\n                                />\r\n                                <FormHelperText>Starting Number</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    id=\"ending-num-selector\"\r\n                                    type=\"number\"\r\n                                    value={this.state.endingNum}\r\n                                    onChange={this.updateEndingNum}\r\n                                    InputProps={{ inputProps: { min: 1 } }}\r\n                                />\r\n                                <FormHelperText>Ending Number</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        <Grid item xs={2} sm={6} md={4} lg={3}>\r\n                            <InputLabel id=\"datacenter-select-label\">Asset Type</InputLabel>\r\n                            <Select\r\n                                name='asset-type'\r\n                                id=\"asset-type\"\r\n                                value={this.props.assetType}\r\n                                onChange={event => this.switchAssetType(event)}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <MenuItem value={\"active\"}>Active</MenuItem>\r\n                                <MenuItem value={\"decommissioned\"}>Decommissioned</MenuItem>\r\n                                <MenuItem value={\"offline\"}>Offline Storage</MenuItem>\r\n                            </Select>\r\n                        </Grid>\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"user\"\r\n                                label=\"User\"\r\n                                name=\"user\"\r\n                                onChange={(event) => { this.updateUser(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid> : null}\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"start-date\"\r\n                                label=\"Start Date\"\r\n                                type=\"date\"\r\n                                onChange={event => this.updateStartDate(event)}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid> : null}\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"end-date\"\r\n                                label=\"End Date\"\r\n                                type=\"date\"\r\n                                onChange={event => this.updateEndDate(event)}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid> : null}\r\n                    </Grid>\r\n                </Paper>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterAsset;\r\n","export default function descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\nimport { CompactPicker } from 'react-color';\r\n\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Tooltip,\r\n    CircularProgress,\r\n    withStyles,\r\n    Radio,\r\n    RadioGroup,\r\n    FormControl,\r\n    FormControlLabel,\r\n    InputLabel,\r\n    Typography,\r\n    Paper,\r\n    IconButton,\r\n    Slide,\r\n    MenuItem,\r\n    Select\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport * as Constants from \"../../Constants\";\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport stringToMac from \"./functions/StringToMacAddress\";\r\nimport stringToRack from \"./functions/StringToRack\";\r\n\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst emptySearch = {\r\n    \"filter\": {\r\n        \"vendor\": null,\r\n        \"model_number\": null,\r\n        \"height\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"username\": null,\r\n        \"display_name\": null,\r\n        \"email\": null,\r\n        \"privilege\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"starting_rack_letter\": null,\r\n        \"ending_rack_letter\": null,\r\n        \"starting_rack_number\": null,\r\n        \"ending_rack_number\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"blade_chassis\": null,\r\n        \"blade_position\": null,\r\n    },\r\n    \"datacenter_name\": \"\",\r\n}\r\n\r\nconst searchPath = \"search/\";\r\nconst left = \"left\";\r\nconst right = \"right\";\r\nconst off = \"off\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogDiv: {\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        maxWidth: \"80%\",\r\n        margin: \"0 auto\",\r\n        minWidth: \"70%\",\r\n        maxHeight: \"600px\",\r\n        overflow: \"scroll\",\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    form: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n    buttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass CreateAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // next available asset number\r\n            loadingAssetNumber: true,\r\n\r\n            // model information\r\n            loadingModels: true,\r\n            modelList: [],\r\n            networkList: null,\r\n            powerPortList: null,\r\n\r\n            // owner information\r\n            loadingOwners: true,\r\n            ownerList: [],\r\n\r\n            // datacenter information\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n\r\n            // hostname information\r\n            loadingHostnames: true,\r\n            assetNumList: [],\r\n            assetNumToModelList: null,\r\n\r\n            model: \"\",\r\n            hostname: \"\",\r\n            rack: \"\",\r\n            rackU: -1,\r\n            owner: \"\",\r\n            comment: \"\",\r\n            datacenter_name: \"\",\r\n            datacenterIsOffline: false,\r\n            tags: [],\r\n            network_connections: null,\r\n            power_connections: null,\r\n            asset_number: 100000,\r\n            blade_chassis: null,\r\n            blade_position: null,\r\n            mount_type: null,\r\n\r\n            chassisList: [],\r\n            mountTypes: null,\r\n\r\n            selectedConnection: null,\r\n\r\n            statusOpen: false,\r\n            statusMessage: \"\",\r\n            statusSeverity: \"\",\r\n\r\n            showModal: false,\r\n\r\n            powerPortState: null,\r\n            leftRight: null,\r\n            availableConnections: false,\r\n            portOptions: [],\r\n\r\n            canSubmit: false,\r\n\r\n            next_pair: -1,\r\n            free_left: -1,\r\n            free_right: -1,\r\n\r\n            inputs: {\r\n                \"model\": createInputs(AssetInput.MODEL, \"Model\", false, \"A reference to an existing model\"),\r\n                \"hostname\": createInputs(AssetInput.HOSTNAME, \"Hostname\", false, \"A short string compliant with RFC 1034’s definition of 'label'\"),\r\n                \"rack\": createInputs(AssetInput.RACK, \"Rack\", false, \"The rack the equipment is installed in, written as a row letter and rack number, e.g. 'B12'\"),\r\n                \"rackU\": createInputs(AssetInput.RACK_U, \"Rack U\", false, \"An integer indicating the vertical location of the bottom of the equipment (e.g. '5')\"),\r\n                \"owner\": createInputs(AssetInput.OWNER, \"Owner\", false, \"A reference to an existing user on the system who owns this equipment\"),\r\n                \"comment\": createInputs(AssetInput.COMMENT, \"Comment\", false, \"Any additional information associated with this asset\"),\r\n                \"datacenter\": createInputs(AssetInput.DATACENTER, \"Datacenter\", false, \"A reference to an existing datacenter\"),\r\n                \"macAddress\": createInputs(AssetInput.MAC_ADDRESS, \"Mac Address\", false, \"A 6-byte hexadecimal string per network port shown canonically in lower case with colon delimiters (e.g., '00:1e:c9:ac:78:aa').\\nA hostname is required to enter in this value\"),\r\n                \"networkConnections\": createInputs(AssetInput.NETWORK_CONNECTIONS, \"Port Name\", false, \"For each network port, a reference to another network port on another piece of gear\"),\r\n                \"powerConnections\": createInputs(AssetInput.POWER_CONNECTIONS, \"Power Connections\", false, \"Choice of PDU port number (0 means not plugged in)\"),\r\n                \"assetNum\": createInputs(AssetInput.ASSET_NUMBER, \"Asset Number\", false, \"A six-digit serial number unique associated with an asset.\"),\r\n                \"bladeChassis\": createInputs(AssetInput.BLADE_CHASSIS, \"Blade Chassis\", false, \"A reference to a blade chassis asset\"),\r\n                \"bladePosition\": createInputs(AssetInput.BLADE_POSITION, \"Blade Position\", false, \"An integer indicating the slot number of a blade\"),\r\n            },\r\n\r\n            customCPU: \"\",\r\n            customColor: \"\",\r\n            customMemory: \"\",\r\n            customStorage: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLists();\r\n    }\r\n\r\n    getLists = () => {\r\n        this.getModelList();\r\n        this.getOwnerList();\r\n        this.getDatacenterList();\r\n        this.getNextAssetNum();\r\n        this.getAssetList();\r\n        this.getChassisList();\r\n    }\r\n\r\n    getChassisList = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getchassis\")\r\n        ).then(\r\n            response => {\r\n                var instances = response.data.instances;\r\n                var instanceNames = [];\r\n\r\n                instances.map(instance => {\r\n                    instanceNames.push(instance.hostname);\r\n                });\r\n\r\n                this.setState({ chassisList: instanceNames });\r\n            }\r\n        )\r\n    }\r\n\r\n    getModelList = () => {\r\n        axios.post(\r\n            getURL(Constants.MODELS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var models = response.data.models;\r\n\r\n                    var modelNames = [];\r\n                    var networkNames = {};\r\n                    var powerPortNames = {};\r\n                    var mountType = {};\r\n\r\n                    models.map(model => {\r\n                        var modelKey = model.vendor + \" \" + model.model_number;\r\n                        modelNames.push(modelKey);\r\n                        networkNames[modelKey] = model.ethernet_ports;\r\n                        powerPortNames[modelKey] = parseInt(model.power_ports);\r\n                        mountType[modelKey] = model.mount_type;\r\n                    });\r\n\r\n                    this.setState({ originalModels: models, loadingModels: false, modelList: modelNames, networkList: networkNames, powerPortList: powerPortNames, mountTypes: mountType });\r\n                });\r\n    }\r\n\r\n    getOwnerList = () => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, searchPath), {\r\n            \"filter\":\r\n            {\r\n                \"username\": \"\",\r\n                \"display_name\": \"\",\r\n                \"email\": \"\",\r\n                \"privilege\": {\r\n                    \"model\": false,\r\n                    \"asset\": false,\r\n                    \"datacenters\": [],\r\n                    \"power\": false,\r\n                    \"audit\": false,\r\n                    \"admin\": false,\r\n                }\r\n            }\r\n        }).then(\r\n            response => {\r\n                var users = [];\r\n                response.data.users.map(user => users.push(user.username + \"/\" + user.display_name));\r\n                this.setState({ loadingOwners: false, ownerList: users });\r\n            });\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n                response => {\r\n                    var datacenters = [];\r\n                    response.data.datacenters.map(datacenter => {\r\n                        if (this.props.privilege.datacenters.length > 0) {\r\n                            if (this.props.privilege.datacenters[0] === \"*\" || this.props.privilege.datacenters.includes(datacenter.name)) {\r\n                                datacenters.push(datacenter);\r\n                            }\r\n                        } else if (this.props.privilege.asset || this.props.privilege.admin) {\r\n                            datacenters.push(datacenter);\r\n                        }\r\n                    });\r\n                    this.setState({ loadingDatacenters: false, datacenterList: datacenters })\r\n                });\r\n    }\r\n\r\n    getNextAssetNum = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.GET_NEXT_ASSET_NUM)).then(\r\n                response => this.setState({ loadingAssetNumber: false, asset_number: response.data.asset_number }));\r\n    }\r\n\r\n    getAssetList = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var instances = response.data.instances;\r\n\r\n                    var hostnames = [];\r\n                    var hostToModel = {};\r\n                    instances.map(instance => {\r\n                        hostnames.push(instance.hostname);\r\n                        hostToModel[instance.hostname] = instance.model;\r\n                    })\r\n\r\n                    this.setState({ loadingHostnames: false, assetNumList: hostnames, assetNumToModelList: hostToModel }, this.availableNetworkConnections());\r\n                });\r\n    }\r\n\r\n    validJSON = (json) => {\r\n        return (\r\n            json.model !== \"\" &&\r\n            json.datacenter_name !== \"\" &&\r\n            json.rack !== \"\" &&\r\n            json.rack_position !== -1 &&\r\n            json.asset_number >= 100000 &&\r\n            json.asset_number <= 999999\r\n        );\r\n    }\r\n\r\n    createAsset = (event) => {\r\n        event.preventDefault();\r\n\r\n        var json = this.createJSON();\r\n        var changePlanJSON = {\r\n            \"change_plan_id\": this.props.changePlanID,\r\n            \"step\": this.props.changePlanStep,\r\n            \"action\": \"create\",\r\n            \"asset_numberOriginal\": \"\",\r\n            \"new_record\": json\r\n        };\r\n        var url = this.props.changePlanActive ? getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION) : getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.create);\r\n\r\n        if (this.validJSON(json)) {\r\n            axios.post(\r\n                url,\r\n                this.props.changePlanActive ? changePlanJSON : json\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                        this.props.incrementChangePlanStep();\r\n                        this.props.showStatus(true, \"success\", \"Successfully created asset\");\r\n                        this.closeModal();\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        var model = event.target.value;\r\n\r\n        if (model !== \"\") {\r\n            var ports = this.state.networkList[model];\r\n            var networkConns = {};\r\n            if (ports !== null) {\r\n                ports.map(port => {\r\n                    var defaultNetworkPort = {\r\n                        \"mac_address\": \"\",\r\n                        \"connection_hostname\": \"\",\r\n                        \"connection_port\": \"\",\r\n                    }\r\n                    networkConns[port] = defaultNetworkPort;\r\n                });\r\n            }\r\n\r\n            this.setState({ mount_type: this.state.mountTypes[model] });\r\n        } else {\r\n            var networkConns = {};\r\n        }\r\n\r\n\r\n        this.setState({ model: model, network_connections: networkConns }, () => { this.validateForm(); this.restoreDefaults() });\r\n    }\r\n\r\n    updateBladeChassis = (event) => {\r\n        this.setState({ blade_chassis: event.target.value });\r\n    }\r\n\r\n    updateBladePosition = (event) => {\r\n        this.setState({ blade_position: event.target.value });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateRack = (event) => {\r\n        var rackVal = stringToRack(event.target.value);\r\n        this.setState({ rack: rackVal }, () => { this.validateForm() });\r\n\r\n        if (rackVal.length === 2 && this.state.datacenter_name !== \"\") {\r\n            axios.post(getURL(Constants.RACKS_MAIN_PATH, \"nextPDU/\"), {\r\n                \"rack\": rackVal,\r\n                \"datacenter_name\": this.state.datacenter_name,\r\n            }).then(response => {\r\n                console.log(this.state.power_connections);\r\n                try {\r\n                    var firstFree = response.data.free_left;\r\n                    var pwrLst = [];\r\n\r\n                    this.state.power_connections.map((powerPort, index) => {\r\n                        if (index % 2 === 0 && index < this.state.power_connections.length - 1) {\r\n                            console.log(index);\r\n                            pwrLst[index] = firstFree[index];\r\n                            pwrLst[index + 1] = firstFree[index + 1];\r\n                        } else {\r\n                            console.log(\"passing\");\r\n                        }\r\n                    });\r\n                } catch (exception) {\r\n                    console.log(exception);\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    updateRackU = (event) => {\r\n        this.setState({ rackU: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        this.setState({ owner: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateComment = (event) => {\r\n        this.setState({ comment: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        var isOffline = false;\r\n\r\n        this.state.datacenterList.map(dc => {\r\n            if (dc.name === event.target.value) {\r\n                isOffline = dc.is_offline_storage;\r\n            }\r\n        });\r\n        this.setState({ datacenter_name: event.target.value, datacenterIsOffline: isOffline }, () => { this.validateForm() });\r\n    }\r\n\r\n    changeNetworkMacAddress = (event, port) => {\r\n        var val = stringToMac(event.target.value);\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].mac_address = val;\r\n            return { network_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    changeNetworkHostname = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].connection_hostname = val;\r\n            return { network_connections };\r\n        }, () => { this.getPortOptions(val); this.validateForm() });\r\n    }\r\n\r\n    changeNetworkPort = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port] = (network_connections[port] === null) ? {} : network_connections[port];\r\n            network_connections[port].connection_port = val;\r\n            return { network_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    updatePowerPort = (event, port) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let power_connections = Object.assign({}, prevState.power_connections);\r\n            power_connections[port] = val;\r\n            return { power_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    changePowerPortState = (event, portNum) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let leftRight = Object.assign({}, prevState.leftRight);\r\n            leftRight[portNum] = val;\r\n            return { leftRight };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateAssetNumber = (event) => {\r\n        this.setState({ asset_number: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    getPowerConnections = () => {\r\n        if (this.state.leftRight === null) {\r\n            return [];\r\n        }\r\n\r\n        var pwrConns = [];\r\n        var defaultValue = 1;\r\n        Object.entries(this.state.leftRight).map(([key, value]) => {\r\n            var num = this.state.power_connections === null ? defaultValue : this.state.power_connections[key];\r\n            switch (value) {\r\n                case left:\r\n                    pwrConns.push(\"L\" + num);\r\n                    break;\r\n                case right:\r\n                    pwrConns.push(\"R\" + num);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return pwrConns;\r\n    }\r\n\r\n    createJSON = () => {\r\n        return {\r\n            \"model\": this.state.model,\r\n            \"hostname\": this.state.hostname,\r\n            \"rack\": this.state.rack,\r\n            \"rack_position\": this.state.rackU,\r\n            \"owner\": this.state.owner.split(\"/\")[0],\r\n            \"comment\": this.state.comment,\r\n            \"datacenter_name\": this.state.datacenter_name,\r\n            \"tags\": this.state.tags,\r\n            \"network_connections\": (this.state.network_connections === null) ? {} : this.state.network_connections,\r\n            \"power_connections\": this.getPowerConnections(),\r\n            'asset_number': this.state.asset_number,\r\n            \"blade_chassis\": this.state.blade_chassis,\r\n            \"blade_position\": this.state.blade_position,\r\n            \"cpu\": this.state.customCPU,\r\n            \"display_color\": this.state.customColor,\r\n            \"memory\": this.state.customMemory,\r\n            \"storage\": this.state.customStorage,\r\n        }\r\n    }\r\n\r\n    availableNetworkConnections = () => {\r\n        var availableNetworks = false;\r\n\r\n        var assets = this.state.assetNumList;\r\n        assets.map(asset => {\r\n            if (Object.keys(this.state.networList[this.state.assetNumToModelList[asset]].length).length > 0) {\r\n                availableNetworks = true;\r\n            }\r\n        });\r\n        this.setState({ availableConnections: availableNetworks });\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.props.fetchAllAssets();\r\n        this.props.close();\r\n    }\r\n\r\n    statusClose = () => {\r\n        this.setState({ statusOpen: false, statusMessage: \"\", statusSeverity: \"\" });\r\n    }\r\n\r\n    validateForm = () => {\r\n        this.setState({ canSubmit: this.validJSON(this.createJSON()) });\r\n    }\r\n\r\n    getPortOptions = (hostname) => {\r\n        try {\r\n            this.setState({ portOptions: this.state.networkList[this.state.assetNumToModelList[hostname]] });\r\n        } catch { }\r\n    }\r\n\r\n    cancelUpgrades = () => {\r\n        this.setState({ customizeModel: false }, () => { this.restoreDefaults() });\r\n    }\r\n\r\n    restoreDefaults = () => {\r\n        var currModel = null;\r\n        this.state.originalModels.map(model => {\r\n            if (this.state.model === model.vendor + \" \" + model.model_number) {\r\n                currModel = model;\r\n            }\r\n        });\r\n\r\n        if (currModel !== null && currModel !== undefined) {\r\n            this.setState({\r\n                customColor: currModel.display_color === null ? \"#A52A2A\" : currModel.display_color,\r\n                customCPU: currModel.cpu,\r\n                customMemory: currModel.memory,\r\n                customStorage: currModel.storage,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                customColor: \"#A52A2A\",\r\n                customCPU: \"\",\r\n                customMemory: \"\",\r\n                customStorage: \"\",\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span className={classes.div}>\r\n                <Paper elevation={3}>\r\n                    {(\r\n                        (this.state.loadingAssetNumber\r\n                            || this.state.loadingDatacenters\r\n                            || this.state.loadingModels\r\n                            || this.state.loadingHostnames\r\n                            || this.state.loadingOwners)\r\n                        //&& false\r\n                    ) ? <div className={classes.progress}><CircularProgress /></div> :\r\n                        <form\r\n                            onSubmit={(event) => { this.createAsset(event) }}\r\n                            className={classes.form}\r\n                        >\r\n                            <div className={classes.dialogDiv}>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.model.Tooltip} title={this.state.inputs.model.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-model\"\r\n                                        options={this.state.modelList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        onSelect={this.updateModel}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.model.label}\r\n                                                name={this.state.inputs.model.name}\r\n                                                onChange={this.updateModel}\r\n                                                onBlur={this.updateModel}\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <div>\r\n                                    <Autocomplete\r\n                                        id=\"select-chassis\"\r\n                                        options={this.state.chassisList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.bladeChassis.label}\r\n                                                name={this.state.inputs.bladeChassis.name}\r\n                                                onChange={this.updateBladeChassis}\r\n                                                onBlur={this.updateBladeChassis}\r\n                                                variant=\"outlined\"\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    <InputLabel id=\"select-blade-position-label\">Blade Position</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-blade-position-label\"\r\n                                            id=\"select-blade-position\"\r\n                                            value={this.state.blade_position}\r\n                                            required={true}\r\n                                            onChange={this.updateBladePosition}\r\n                                            style={{ display: \"inline-block\", width: \"20%\" }}\r\n                                        >\r\n                                            <MenuItem value={1}>1</MenuItem>\r\n                                            <MenuItem value={2}>2</MenuItem>\r\n                                            <MenuItem value={3}>3</MenuItem>\r\n                                            <MenuItem value={4}>4</MenuItem>\r\n                                            <MenuItem value={5}>5</MenuItem>\r\n                                            <MenuItem value={6}>6</MenuItem>\r\n                                            <MenuItem value={7}>7</MenuItem>\r\n                                            <MenuItem value={8}>8</MenuItem>\r\n                                            <MenuItem value={9}>9</MenuItem>\r\n                                            <MenuItem value={10}>10</MenuItem>\r\n                                            <MenuItem value={11}>11</MenuItem>\r\n                                            <MenuItem value={12}>12</MenuItem>\r\n                                            <MenuItem value={13}>13</MenuItem>\r\n                                            <MenuItem value={14}>14</MenuItem>\r\n                                        </Select>\r\n                                    </div>\r\n                                    : null}\r\n\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.owner.Tooltip} title={this.state.inputs.owner.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-owner\"\r\n                                        options={this.state.ownerList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.owner.label}\r\n                                                name={this.state.inputs.owner.name}\r\n                                                onChange={this.updateOwner}\r\n                                                onBlur={this.updateOwner}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    <Autocomplete\r\n                                        id=\"input-datacenter\"\r\n                                        options={this.state.datacenterList.map(datacenter => datacenter.name)}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.datacenter.label}\r\n                                                name={this.state.inputs.datacenter.name}\r\n                                                onChange={(event) => { this.updateDatacenter(event) }}\r\n                                                onBlur={this.updateDatacenter}\r\n\r\n\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n                                {(this.state.datacenterIsOffline) ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rack.Tooltip} title={this.state.inputs.rack.description}>\r\n                                        <TextField\r\n                                            id=\"input-rack\"\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            label={this.state.inputs.rack.label}\r\n                                            name={this.state.inputs.rack.name}\r\n                                            onChange={this.updateRack}\r\n                                            value={this.state.rack}\r\n                                            required\r\n\r\n                                        />\r\n                                    </Tooltip>}\r\n                                {(this.state.datacenterIsOffline) ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rackU.Tooltip} title={this.state.inputs.rackU.description}>\r\n                                        <TextField\r\n                                            id=\"input-rackU\"\r\n\r\n                                            type=\"number\"\r\n                                            InputProps={{ inputProps: { min: 1, max: 42 } }}\r\n                                            label={this.state.inputs.rackU.label}\r\n                                            name={this.state.inputs.rackU.name}\r\n                                            onChange={this.updateRackU}\r\n                                            required\r\n\r\n                                        />\r\n                                    </Tooltip>}\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.assetNum.Tooltip} title={this.state.inputs.assetNum.description}>\r\n                                    <TextField\r\n                                        id=\"input-asset-number\"\r\n\r\n                                        type=\"number\"\r\n                                        InputProps={{ inputProps: { min: 100000, max: 999999 } }}\r\n                                        label={this.state.inputs.assetNum.label}\r\n                                        name={this.state.inputs.assetNum.name}\r\n                                        onChange={this.updateAssetNumber}\r\n                                        value={this.state.asset_number}\r\n                                        required\r\n\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.hostname.Tooltip} title={this.state.inputs.hostname.description}>\r\n                                    <TextField\r\n                                        id=\"input-hostname\"\r\n\r\n                                        label={this.state.inputs.hostname.label}\r\n                                        name={this.state.inputs.hostname.name}\r\n                                        onChange={this.updateHostname}\r\n\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                <div>\r\n                                    {this.state.customizeModel || this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={\"primary\"}\r\n                                            onClick={() => this.setState({ customizeModel: true })}\r\n                                        >\r\n                                            {\"Customize Model Hardware\"}\r\n                                        </Button>\r\n                                    }\r\n                                    {this.state.customizeModel || this.props.disabled ?\r\n                                        <span>\r\n                                            <CompactPicker\r\n                                                color={this.state.customColor}\r\n                                                onChange={color => { try { this.setState({ customColor: color.hex }) } catch { this.setState({ customColor: \"#A52A2A\" }) } }}\r\n                                                disabled={this.props.disabled}\r\n                                            />\r\n                                            <TextField disabled={this.props.disabled} label={\"CPU\"} value={this.state.customCPU} onChange={event => { this.setState({ customCPU: event.target.value }) }} />\r\n                                            <TextField disabled={this.props.disabled} type=\"number\" value={this.state.customMemory} label={\"Memory\"} onChange={event => { this.setState({ customMemory: event.target.value }) }} InputProps={{ inputProps: { min: 0 } }} />\r\n                                            <TextField disabled={this.props.disabled} label={\"Storage\"} value={this.state.customStorage} onChange={event => { this.setState({ customStorage: event.target.value }) }} />\r\n                                            {this.props.disabled ? null : <div className={classes.buttons}>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color={\"primary\"}\r\n                                                    onClick={() => this.restoreDefaults()}\r\n                                                >\r\n                                                    Use original Model Values\r\n                                        </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => this.cancelUpgrades()}\r\n                                                >\r\n                                                    Cancel Upgrades\r\n                                        </Button>\r\n                                            </div>}\r\n                                        </span>\r\n                                        : null}\r\n                                </div>\r\n\r\n                                {!(this.state.networkList && this.state.networkList[this.state.model]) || this.state.datacenterIsOffline ? null :\r\n                                    this.state.networkList[this.state.model].map(networkPort => (\r\n                                        <div>\r\n                                            <Typography style={{ display: \"inline-block\", }}>{\"Network Port: \" + networkPort + \": \"}</Typography>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.macAddress.Tooltip} title={this.state.inputs.macAddress.description}>\r\n                                                <TextField\r\n                                                    id=\"input-mac-address\"\r\n                                                    label={this.state.inputs.macAddress.label}\r\n                                                    name={this.state.inputs.macAddress.name}\r\n                                                    onChange={(event) => { this.changeNetworkMacAddress(event, networkPort) }}\r\n                                                    value={(this.state.network_connections !== null && this.state.network_connections[networkPort] !== undefined) ? this.state.network_connections[networkPort].mac_address : \"\"}\r\n                                                />\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                <Autocomplete\r\n                                                    id=\"input-network-ports\"\r\n                                                    options={this.state.assetNumList}\r\n                                                    includeInputInList\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    onChange={(event, value) => { this.changeNetworkHostname(value, networkPort) }}\r\n                                                    required={this.state.network_connections[networkPort].connection_port !== \"\"}\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={\"Connection Hostname\"}\r\n                                                            name={\"Connection Hostname\"}\r\n\r\n\r\n                                                            disabled={this.state.hostname === \"\"}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                <Autocomplete\r\n                                                    id=\"input-network-ports\"\r\n                                                    options={this.state.portOptions}\r\n                                                    includeInputInList\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    onChange={(event, value) => { this.changeNetworkPort(value, networkPort) }}\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={\"Connection Port\"}\r\n                                                            name={\"Connection Port\"}\r\n                                                            required={this.state.network_connections[networkPort].connection_hostname !== \"\"}\r\n                                                            disabled={this.state.hostname === \"\"}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    ))}\r\n\r\n                                {(\r\n                                    !(this.state.powerPortList\r\n                                        && this.state.powerPortList[this.state.model])\r\n                                ) || this.state.datacenterIsOffline\r\n                                    ? null :\r\n                                    Array.from({ length: this.state.powerPortList[this.state.model] }, (_, k) => (\r\n                                        <span>\r\n                                            <Typography>{\"Power Port: \" + k}</Typography>\r\n                                            <FormControl component=\"fieldset\">\r\n                                                <RadioGroup\r\n                                                    id={\"power-port-\" + k}\r\n                                                    aria-label=\"position\"\r\n                                                    name={\"position\" + k}\r\n                                                    value={(this.state.leftRight === null) ? off : (this.state.leftRight[k] === undefined ? off : this.state.leftRight[k])}\r\n                                                    onChange={(event) => { this.changePowerPortState(event, k) }}\r\n                                                    row\r\n                                                >\r\n                                                    <FormControlLabel\r\n                                                        value={left}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Left\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={right}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Right\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={off}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"No Connection\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                </RadioGroup>\r\n                                            </FormControl>\r\n                                            {(this.state.leftRight === null) ? null : (this.state.leftRight[k] === undefined || this.state.leftRight[k] === off ? null :\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    value={(this.state.power_connections === null) ? 1 : (this.state.power_connections[k] === undefined ? 1 : this.state.power_connections[k])}\r\n                                                    InputProps={{ inputProps: { min: 1, max: 24 } }}\r\n                                                    onChange={(event) => { this.updatePowerPort(event, k) }}\r\n                                                />\r\n                                            )}\r\n                                        </span>\r\n                                    ))\r\n                                }\r\n\r\n                                <div>\r\n                                    <TextField\r\n                                        id=\"input-comment\"\r\n                                        style={{ width: \"50%\" }}\r\n                                        label={this.state.inputs.comment.label}\r\n                                        name={this.state.inputs.comment.name}\r\n                                        onChange={this.updateComment}\r\n                                        multiline={true}\r\n\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className={classes.buttons}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        type=\"submit\"\r\n                                        disabled={!this.state.canSubmit}\r\n                                        color={this.props.changePlanActive ? \"\" : \"primary\"}\r\n                                        style={{\r\n                                            backgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\"\r\n                                        }}\r\n                                    >\r\n                                        {this.props.changePlanActive ? \"Create in Change Plan\" : \"Create\"}\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={this.closeModal}\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </div>\r\n\r\n                            </div></form>}\r\n                    {this.state.statusOpen ?\r\n                        <Alert\r\n                            severity={this.state.statusSeverity}\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        this.statusClose()\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {this.state.statusMessage}\r\n                        </Alert> : null}\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(CreateAsset);\r\n","import React from \"react\";\r\n\r\nimport axios from 'axios';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport {\r\n\tModal,\r\n\tTypography,\r\n\tFade,\r\n\tBackdrop,\r\n\tGrid,\r\n\tButton,\r\n\tPaper,\r\n\twithStyles,\r\n} from \"@material-ui/core/\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport { AssetCommand } from \"../enums/AssetCommands.ts\";\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\"\r\n\r\n\r\nconst useStyles = theme => ({\r\n\tgrid: {\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tboxShadow: theme.shadows[5],\r\n\t\tpadding: theme.spacing(2, 4, 3),\r\n\t\twidth: \"50%\"\r\n\t},\r\n})\r\n\r\nclass ImportAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n            importedFile:null,\r\n\r\n            showStatus:false,\r\n            statusSeverity:\"\",\r\n            statusMessage:\"\",\r\n\t\t};\r\n\t}\r\n\r\n\tsetFile = (file) => {\r\n\t\tthis.setState({ importedFile: file });\r\n\t}\r\n\r\n\tchooseFile = (event) => {\r\n        this.setState({ importedFile: event.target.files[0] })\r\n    }\r\n\r\n\tuploadFile = () => {\r\n        const data = new FormData();\r\n        data.append('file', this.state.importedFile);\r\n        this.sendUploadedFile(data);\r\n    }\r\n\r\n\tcloseImport = () => {\r\n\t\tthis.setState({ importedFile: null }, () => { this.props.close() });\r\n\t}\r\n\r\n\tsendUploadedFile = (data) => {\r\n        axios.post(\r\n            getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.UPLOAD_FILE), data\r\n            ).then(response => {\r\n                if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n\t\t\t\t\tthis.setState({ showStatus: true, statusMessage: response.data.summary, statusSeverity:AssetConstants.SUCCESS_TOKEN, showImport: false,})\r\n\t\t\t\t\tthis.props.close();\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity:AssetConstants.ERROR_TOKEN })\r\n                }\r\n            });\r\n    }\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ showStatus: false, statusMessage:\"\", statusSeverity:\"\" });\r\n    }\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n            <div>\r\n\t\t\t<Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.props.open}\r\n                onClose={this.closeImport}\r\n                closeAfterTransition\r\n            >\r\n                    <Backdrop\r\n                        open={this.props.open}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={9}>\r\n                                <Typography variant=\"h5\">Import Assets</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    onClick={this.closeImport}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item direction=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype='file'\r\n\t\t\t\t\t\t\t\t\taccept=\".csv\"\r\n\t\t\t\t\t\t\t\t\tonChange={this.chooseFile}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n\t\t\t\t\t\t\t\t\tstyle={{width: \"40%\"}}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {this.uploadFile()}}\r\n                                >\r\n                                    Upload File\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Backdrop>\r\n            </Modal>\r\n            <StatusDisplay\r\n            open={this.state.showStatus}\r\n            severity={this.state.statusSeverity}\r\n            closeStatus={this.closeShowStatus}\r\n            message={this.state.statusMessage}\r\n        />\r\n        </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(ImportAsset);\r\n","import React from \"react\";\r\n\r\nimport {\r\n\tGrid,\r\n\tTypography,\r\n\tButton,\r\n\tPaper,\r\n\tDialog,\r\n\twithStyles,\r\n\tAppBar,\r\n\tToolbar,\r\n\tIconButton,\r\n\tSlide\r\n} from \"@material-ui/core/\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport CreateAsset from \"./CreateAsset\";\r\nimport ImportAsset from \"./ImportAsset\";\r\n\r\nconst useStyles = theme => ({\r\n\tappBar: {\r\n\t  position: 'relative',\r\n\t},\r\n\ttitle: {\r\n\t  marginLeft: theme.spacing(2),\r\n\t  flex: 1,\r\n\t},\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nclass AddAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tshowCreate:false,\r\n\t\t\tshowImport:false,\r\n\t\t};\r\n\t}\r\n\r\n\topenImport = () => {\r\n\t\tthis.setState({ showImport: true });\r\n\t}\r\n\r\n\tcloseImport = () => {\r\n\t\tthis.setState({ showImport: false });\r\n\t}\r\n\r\n\topenCreate = () => {\r\n\t\tthis.setState({ showCreate: true });\r\n\t}\r\n\r\n\tcloseCreate = () => {\r\n\t\tthis.setState({ showCreate: false });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Paper elevation={3}>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\tspacing={2}\r\n\t\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t\t\tjustify=\"flex-start\"\r\n\t\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\t\tstyle={{\"padding\": \"10px\"}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tvariant=\"h5\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t\t\t\tbackground: \"green\",\r\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonClick={this.openCreate}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\tOr\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<CloudUploadIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => {this.openImport()} }\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tImport\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\r\n\t\t\t\t<Dialog fullScreen open={this.state.showCreate} onClose={this.closeCreate} TransitionComponent={Transition} padding={3}>\r\n\t\t\t\t\t<AppBar className={classes.appBar}>\r\n\t\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" onClick={this.closeCreate} aria-label=\"close\">\r\n\t\t\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t<Typography variant=\"h6\" className={classes.title}>\r\n\t\t\t\t\t\t\t\tCreate Asset\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t</AppBar>\r\n\t\t\t\t\t<CreateAsset\r\n\t\t\t\t\t\tclose={this.closeCreate}\r\n\t\t\t\t\t\tgetAssetList={this.props.getAssetList}\r\n\t\t\t\t\t\tshowStatus={this.props.showStatus}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\tfetchAllAssets={this.props.fetchAllAssets}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Dialog>\r\n\r\n\t\t\t\t<ImportAsset\r\n\t\t\t\t\topen={this.state.showImport}\r\n\t\t\t\t\tclose={this.closeImport}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(AddAsset);\r\n","import React from 'react';\r\n\r\nimport axios from \"axios\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport {\r\n\tButton,\r\n\tPaper,\r\n\tGrid,\r\n    Typography,\r\n    Modal,\r\n    Fade,\r\n    Backdrop,\r\n    withStyles,\r\n    TextField\r\n} from '@material-ui/core/';\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: \"100%\",\r\n      },\r\n      grid: {\r\n          backgroundColor: theme.palette.background.paper,\r\n          boxShadow: theme.shadows[5],\r\n          padding: theme.spacing(2, 4, 3),\r\n          width: \"50%\"\r\n      },\r\n      progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n      },\r\n});\r\n\r\nclass ExportAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            csvData: \"\",\r\n            changePlanModal: false,\r\n            changeDescriptionModal: false,\r\n            canCreateChangePlans: false,\r\n\t\t};\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ canCreateChangePlans: (this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) });\r\n    }\r\n\r\n\tdownloadTable = () => {\r\n        axios.post(\r\n            getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.EXPORT_FILE),\r\n            {\r\n                'filter':{},\r\n                \"datacenter_name\":\"\",\r\n            }\r\n            ).then(response => {\r\n                console.log(response);\r\n                this.setState({ csvData: response.data.csvData });\r\n                this.csvLink.link.click();\r\n            });\r\n    }\r\n\r\n    openChangePlanModal = () => {\r\n        this.setState({ changePlanModal: true });\r\n    }\r\n\r\n    closeChangePlanModal = () => {\r\n        this.setState({ changePlanModal: false });\r\n    }\r\n\r\n    updatePlanName = (event) => {\r\n        this.setState({ changePlanName: event.target.value });\r\n    }\r\n\r\n    beginChangePlan = () => {\r\n        this.closeChangePlanModal();\r\n        this.setState({ changeDescriptionModal: true });\r\n\r\n        axios.post(\r\n            getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE),\r\n            {\r\n                'owner': this.props.username,\r\n                'name': this.state.changePlanName,\r\n            }\r\n            ).then(response => {\r\n                console.log(response);\r\n                this.props.updateChangePlan(true, response.data.change_plan, 1, this.state.changePlanName);\r\n                this.setState({ changePlanName: \"\" });\r\n        });\r\n    }\r\n\r\n    closeDescriptionModal = () => {\r\n        this.setState({ changeDescriptionModal: false });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Paper elevation={3}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{\"padding\": \"10px\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">Export</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography>Download what is currently shown in the table.</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            onClick={() => {this.downloadTable()}}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<CloudDownloadIcon />}\r\n                            style={{\r\n                                width: \"100%\"\r\n                            }}\r\n                        >\r\n                            Export All Data\r\n                        </Button>\r\n                    </Grid>\r\n                    { !this.props.changePlanActive && this.state.canCreateChangePlans ?\r\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\tOr\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t</Grid> : null }\r\n                    { !this.props.changePlanActive && this.state.canCreateChangePlans ?\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"default\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<TrackChangesIcon />}\r\n\t\t\t\t\t\t\t\tonClick={this.openChangePlanModal}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCreate Change Plan\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid> : null }\r\n                </Grid>\r\n            </Paper>\r\n\r\n\t\t\t<CSVLink\r\n                data={this.state.csvData}\r\n\t\t\t\tfilename={AssetConstants.ASSET_DOWNLOAD_FILE_NAME}\r\n\t\t\t\tclassName=\"hidden\"\r\n\t\t\t\tref={(r) => this.csvLink = r}\r\n\t\t\t\ttarget=\"_blank\"\r\n\t\t\t/>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.changePlanModal}\r\n                onClose={this.closeChangePlanModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.changePlanModal}>\r\n                    <Backdrop\r\n                        open={this.state.changePlanModal}\r\n                    >\r\n                    <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={3}>\r\n                                <Typography>\r\n                                    Enter plan name:\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={this.beginChangePlan}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Begin\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={this.closeChangePlanModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.changeDescriptionModal}\r\n                onClose={this.closeDescriptionModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.changeDescriptionModal}>\r\n                    <Backdrop\r\n                        open={this.state.changeDescriptionModal}\r\n                    >\r\n                    <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography>\r\n                                    You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={this.closeDescriptionModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(ExportAsset);\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid, Paper, Button } from '@material-ui/core';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport DetailAsset from \"./DetailsAsset\";\r\nimport FilterAsset from './FilterAsset';\r\nimport stableSort from \"../../helpers/functions/StableSort\";\r\nimport getComparator from \"../../helpers/functions/GetComparator\";\r\nimport { Privilege } from \"../../enums/privilegeTypes.ts\";\r\nimport AddAsset from \"./AddAsset\";\r\nimport ExportAsset from \"./ExportAsset\";\r\nimport * as Constants from '../../Constants';\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\";\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport { SpeedDial, SpeedDialAction, SpeedDialIcon } from '@material-ui/lab';\r\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\n\r\nconst useStyles = theme => ({\r\n\troot: {\r\n\t\tpaddingLeft: theme.spacing(2),\r\n\t\tpaddingRight: theme.spacing(1),\r\n\t},\r\n\tstyledTableRow: {\r\n\t},\r\n\ttableCellHead: {\r\n\t},\r\n\tstyledTableCell: {\r\n\t\tfontSize: 14,\r\n\t},\r\n\ttable: {\r\n\t\tminWidth: 700,\r\n\t},\r\n\tpaper: {\r\n\t\twidth: '100%',\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\tvisuallyHidden: {\r\n\t\tborder: 0,\r\n\t\tclip: 'rect(0 0 0 0)',\r\n\t\theight: 1,\r\n\t\tmargin: -1,\r\n\t\toverflow: 'hidden',\r\n\t\tpadding: 0,\r\n\t\tposition: 'absolute',\r\n\t\ttop: 20,\r\n\t\twidth: 1,\r\n\t},\r\n\ttitle: {\r\n\t\tflex: '1 1 100%',\r\n\t},\r\n});\r\n\r\nconst decomType = \"decommissioned\";\r\n\r\nconst emptySearch = {\r\n\t\"filter\": {\r\n\t\t\"vendor\": null,\r\n\t\t\"model_number\": null,\r\n\t\t\"height\": null,\r\n\t\t\"model\": null,\r\n\t\t\"hostname\": null,\r\n\t\t\"rack\": null,\r\n\t\t\"rack_position\": null,\r\n\t\t\"username\": null,\r\n\t\t\"display_name\": null,\r\n\t\t\"email\": null,\r\n\t\t\"privilege\": null,\r\n\t\t\"model\": null,\r\n\t\t\"hostname\": null,\r\n\t\t\"starting_rack_letter\": null,\r\n\t\t\"ending_rack_letter\": null,\r\n\t\t\"starting_rack_number\": null,\r\n\t\t\"ending_rack_number\": null,\r\n\t\t\"rack\": null,\r\n\t\t\"rack_position\": null\r\n\t},\r\n\t\"datacenter_name\": \"\",\r\n}\r\n\r\nfunction createData(model, hostname, datacenter_name, rack, owner, asset_number) {\r\n\treturn { model, hostname, datacenter_name, rack, owner, asset_number };\r\n}\r\n\r\nfunction createDecData(model, hostname, datacenter_name, rack, owner, asset_number, decommission_user, timestamp) {\r\n\treturn { model, hostname, datacenter_name, rack, owner, asset_number, decommission_user, timestamp };\r\n}\r\n\r\nconst headCells = [\r\n\t{ id: 'hostname', numeric: false, label: \"Hostname\", align: \"left\" },\r\n\t{ id: 'datacenter_name', numeric: false, label: \"Datacenter\", align: \"left\" },\r\n\t{ id: 'model', numeric: false, label: \"Model\", align: \"left\" },\r\n\t{ id: 'rack', numeric: false, label: \"Rack\", align: \"left\" },\r\n\t{ id: 'owner', numeric: false, label: \"Owner\", align: \"left\" },\r\n\t{ id: 'asset_number', numeric: false, label: \"Asset Number\", align: \"right\" },\r\n];\r\n\r\nconst decommissionHeadCells = [\r\n\t{ id: 'decommission_user', numeric: false, label: \"User\", align: \"right\" },\r\n\t{ id: 'timestamp', numeric: false, label: \"Timestamp\", align: \"right\" },\r\n];\r\n\r\n\r\nclass TableAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tallAssets: [],\r\n\t\t\ttableItems: [],\r\n\t\t\tselectedItems: [],\r\n\t\t\tallSelected: false,\r\n\t\t\tdecAssets: [],\r\n\t\t\tofflineAssets: [],\r\n\r\n\t\t\tdetailStatusOpen: false,\r\n\t\t\tdetailStatusSeverity: '',\r\n\t\t\tdetailStatusMessage: '',\r\n\r\n\t\t\tdeleteAssetRack: '',\r\n\t\t\tdeleteAssetrack_position: '',\r\n\r\n\t\t\tshowDetailedView: false,\r\n\t\t\tdetailViewLoading: false,\r\n\t\t\tdetailAsset: -1,\r\n\t\t\tdetailHostname: \"\",\r\n\t\t\toriginalRack: '',\r\n\t\t\toriginalrack_position: '',\r\n\r\n\t\t\torder: \"asc\",\r\n\t\t\torderBy: \"datacenter\",\r\n\r\n\t\t\tshowStatus: false,\r\n\t\t\tstatusSeverity: \"\",\r\n\t\t\tstatusMessage: \"\",\r\n\r\n\t\t\t// Change plan\r\n\t\t\tspeedDialOpen: false,\r\n\t\t\tassetType: \"active\",\r\n\r\n\t\t\trowOwner: \"\",\r\n\t\t};\r\n\r\n\t\tthis.filter = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchAllAssets();\r\n\t}\r\n\r\n\t// Fetch all assets for the table\r\n\tfetchAllAssets = () => {\r\n\t\tconsole.log(this.props.changePlanActive);\r\n\t\tif (this.props.changePlanActive) {\r\n\t\t\taxios.post(\r\n\t\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\t\tresponse => {\r\n\t\t\t\t\t\tvar items = [];\r\n\t\t\t\t\t\tvar instances = response.data.instances;\r\n\t\t\t\t\t\tconsole.log(instances);\r\n\r\n\t\t\t\t\t\taxios.post(\r\n\t\t\t\t\t\t\tgetURL(\"changeplans/\", AssetCommand.CHANGE_PLAN_GET_ACTIONS), {\r\n\t\t\t\t\t\t\t'change_plan_id': this.props.changePlanID,\r\n\t\t\t\t\t\t\t'owner': this.props.username,\r\n\t\t\t\t\t\t}).then(response => {\r\n\t\t\t\t\t\t\tvar actions = response.data.change_plan_actions;\r\n\t\t\t\t\t\t\tconsole.log(actions);\r\n\r\n\t\t\t\t\t\t\tvar assetNums = [];\r\n\t\t\t\t\t\t\tactions.forEach(action => {\r\n\t\t\t\t\t\t\t\tvar assetNum = action.asset_numberOriginal;\r\n\t\t\t\t\t\t\t\tassetNums.push(assetNum);\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tconsole.log(assetNums);\r\n\r\n\t\t\t\t\t\t\tvar newInstances = instances.filter(instance => {\r\n\t\t\t\t\t\t\t\treturn !assetNums.includes(instance.asset_number);\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tconsole.log(newInstances);\r\n\r\n\t\t\t\t\t\t\tactions.forEach(action => {\r\n\t\t\t\t\t\t\t\tif (action.action !== \"decommission\") {\r\n\t\t\t\t\t\t\t\t\tnewInstances.push(action.new_record);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tnewInstances.map(asset => {\r\n\t\t\t\t\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, asset.rack + \" U\" + asset.rack_position, asset.owner, asset.asset_number));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tthis.setState({ allAssets: newInstances, tableItems: items });\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\tthis.getDecommissionedAssets();\r\n\t\t} else {\r\n\t\t\taxios.post(\r\n\t\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\t\tresponse => {\r\n\t\t\t\t\t\tvar items = [];\r\n\r\n\t\t\t\t\t\tresponse.data.instances.map(asset => {\r\n\t\t\t\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, asset.rack + \" U\" + asset.rack_position, asset.owner, asset.asset_number));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis.setState({ allAssets: response.data.instances, tableItems: items });\r\n\t\t\t\t\t});\r\n\t\t\tthis.getDecommissionedAssets();\r\n\t\t}\r\n\t}\r\n\r\n\tdeleteAsset = () => {\r\n\t\tvar body = {};\r\n\t\tbody[AssetInput.RACK] = this.state.originalRack;\r\n\t\tbody[AssetInput.RACK_U] = this.state.originalrack_position;\r\n\r\n\t\taxios.post(\r\n\t\t\tgetURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.delete), body\r\n\t\t).then(response => {\r\n\t\t\tif (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowStatus: true,\r\n\t\t\t\t\tstatusMessage: \"Successfully deleted asset\",\r\n\t\t\t\t\tstatusSeverity: AssetConstants.SUCCESS_TOKEN,\r\n\t\t\t\t\toriginalRack: '',\r\n\t\t\t\t\toriginalrack_position: '',\r\n\t\t\t\t\tshowDetailedView: false\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN })\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgenerateLabels = () => {\r\n\t\tvar body = {};\r\n\t\tbody[AssetInput.ASSET_NUMBER] = this.state.selectedItems;\r\n\r\n\t\taxios.post(\r\n\t\t\tgetURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.GENERATE_LABELS), body,\r\n\t\t\t{\r\n\t\t\t\tresponseType: 'arraybuffer',\r\n\t\t\t}\r\n\t\t).then(response => {\r\n\t\t\tconsole.log(response);\r\n\t\t\tconsole.log(response.data);\r\n\t\t\ttry {\r\n\t\t\t\tvar blob = new Blob([response.data], { type: \"application/pdf\" });\r\n\t\t\t\tvar link = document.createElement('a');\r\n\t\t\t\tlink.href = window.URL.createObjectURL(blob);\r\n\t\t\t\tlink.download = \"AssetLabels_\" + new Date() + \".pdf\";\r\n\t\t\t\tlink.click();\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowStatus: true,\r\n\t\t\t\t\tstatusMessage: \"Successfully generated asset label(s)\",\r\n\t\t\t\t\tstatusSeverity: AssetConstants.SUCCESS_TOKEN,\r\n\t\t\t\t});\r\n\t\t\t} catch {\r\n\t\t\t\tthis.setState({ showStatus: true, statusMessage: \"Could not generate asset labels\", statusSeverity: AssetConstants.ERROR_TOKEN })\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcloseDetailedView = () => {\r\n\t\tthis.setState({ showDetailedView: false });\r\n\t\tthis.fetchAllAssets();\r\n\t}\r\n\r\n\tcloseShowStatus = () => {\r\n\t\tthis.setState({ showStatus: false })\r\n\t}\r\n\r\n\tcreateSortHandler = (event, property) => {\r\n\t\tconst isAsc = this.state.orderBy === property && this.state.order === 'asc';\r\n\t\tthis.setState({ order: isAsc ? 'desc' : 'asc', orderBy: property });\r\n\t}\r\n\r\n\topenDetailedView = (event, asset) => {\r\n\t\tconsole.log(\"asset: \");\r\n\t\tconsole.log(asset);\r\n\t\tvar dAsset = {};\r\n\t\tvar assets = [];\r\n\t\tif (this.state.assetType === \"active\") {\r\n\t\t\tassets = this.state.allAssets;\r\n\t\t} else if (this.state.assetType === decomType) {\r\n\t\t\tassets = this.state.decAssets;\r\n\t\t} else if (this.state.assetType === \"offline\") {\r\n\t\t\tassets = this.state.offlineAssets;\r\n\t\t}\r\n\t\tassets.map(currAsset => {\r\n\t\t\tif (currAsset.asset_number === asset.asset_number) {\r\n\t\t\t\tObject.assign(dAsset, currAsset);\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.setState({ detailAsset: dAsset, showDetailedView: true, rowOwner: asset.owner });\r\n\t}\r\n\r\n\tupdateItems = (assets) => {\r\n\t\tvar items = [];\r\n\r\n\t\tif (this.state.assetType === \"active\") {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, asset.rack + \" U\" + asset.rack_position, asset.owner, asset.asset_number));\r\n\t\t\t});\r\n\t\t} else if (this.state.assetType === decomType) {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createDecData(asset.vendor + \" \" + asset.model_number, asset.hostname, asset.datacenter_name, asset.rack + \" U\" + asset.rack_position, asset.owner, asset.asset_number, asset.decommission_user, asset.timestamp));\r\n\t\t\t});\r\n\t\t} else if (this.state.assetType === \"offline\") {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, asset.rack + \" U\" + asset.rack_position, asset.owner, asset.asset_number));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\tthis.setState({ tableItems: items });\r\n\t}\r\n\r\n\tgetAssetList = () => {\r\n\t\taxios.post(\r\n\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\tresponse => { console.log(\"got list\"); console.log(response); this.setState({ allAssets: response.data.instances }); });\r\n\t}\r\n\r\n\tgetDecommissionedAssets = () => {\r\n\t\taxios.post(\r\n\t\t\tgetURL(Constants.DECOMMISSIONS_MAIN_PATH, AssetCommand.search), {\r\n\t\t\t\"filter\": {\r\n\t\t\t\t\"decommission_user\": \"\",\r\n\t\t\t\t\"start_date\": \"\",\r\n\t\t\t\t\"end_date\": \"\",\r\n\t\t\t}\r\n\t\t}).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tconsole.log(\"decommissioned assets:\");\r\n\t\t\t\tconsole.log(response.data.decommissions);\r\n\t\t\t\tthis.setState({ decAssets: response.data.decommissions })\r\n\t\t\t});\r\n\t}\r\n\r\n\tshowStatusBar = (status, severity, message) => {\r\n\t\tthis.setState({ showStatus: status, statusSeverity: severity, statusMessage: message });\r\n\t}\r\n\r\n\tcloseShowStatus = () => {\r\n\t\tthis.setState({ showStatus: false, statusSeverity: \"\", statusMessage: \"\" });\r\n\t}\r\n\r\n\tonSelectAllClick = (event) => {\r\n\t\tvar newSelected = this.state.selectedItems;\r\n\t\tthis.state.tableItems.map(n => {\r\n\t\t\tconst selectedIndex = newSelected.indexOf(n.asset_number);\r\n\t\t\tif (selectedIndex === -1) {\r\n\t\t\t\tnewSelected = newSelected.concat(n.asset_number);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ selectedItems: newSelected });\r\n\t\tthis.forceUpdate();\r\n\r\n\t}\r\n\r\n\tdeselectAllClick = () => {\r\n\t\tvar newSelected = this.state.selectedItems;\r\n\t\tthis.state.tableItems.map(n => {\r\n\t\t\tconst selectedIndex = newSelected.indexOf(n.asset_number);\r\n\t\t\tconsole.log(selectedIndex);\r\n\t\t\tif (selectedIndex === 0) {\r\n\t\t\t\tnewSelected = newSelected.slice(1);\r\n\t\t\t} else if (selectedIndex === newSelected - 1) {\r\n\t\t\t\tnewSelected = newSelected.slice(0, -1);\r\n\t\t\t} else if (selectedIndex > 0) {\r\n\t\t\t\tnewSelected = newSelected.slice(0, selectedIndex).concat(newSelected.slice(selectedIndex + 1));\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ selectedItems: newSelected });\r\n\t\tthis.forceUpdate();\r\n\t}\r\n\r\n\taddCheckedItem = (event, assetNum) => {\r\n\t\tif (!(this.state.assetType === decomType)) {\r\n\t\t\tif (event.target.getAttribute(\"class\") !== \"MuiButton-label\") {\r\n\t\t\t\tconst selectedIndex = this.state.selectedItems.indexOf(assetNum);\r\n\t\t\t\tlet newSelected = [];\r\n\r\n\t\t\t\tif (selectedIndex === -1) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems, assetNum);\r\n\t\t\t\t} else if (selectedIndex === 0) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems.slice(1));\r\n\t\t\t\t} else if (selectedIndex === this.state.selectedItems.length - 1) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems.slice(0, -1));\r\n\t\t\t\t} else if (selectedIndex > 0) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(\r\n\t\t\t\t\t\tthis.state.selectedItems.slice(0, selectedIndex),\r\n\t\t\t\t\t\tthis.state.selectedItems.slice(selectedIndex + 1),\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(newSelected);\r\n\t\t\t\tthis.setState({ selectedItems: newSelected });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\topenSpeedDial = () => {\r\n\t\tthis.setState({ speedDialOpen: true });\r\n\t}\r\n\r\n\tcloseSpeedDial = () => {\r\n\t\tthis.setState({ speedDialOpen: false });\r\n\t}\r\n\r\n\texitChangePlan = () => {\r\n\t\tthis.props.updateChangePlan(false, null, null, \"\");\r\n\t\tthis.fetchAllAssets();\r\n\t}\r\n\r\n\tswitchAssetType = (assetType) => {\r\n\t\tthis.setState({ assetType: assetType }, () => this.filter.current.search());\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\tvar allSelected = true;\r\n\t\tthis.state.tableItems.map(elem => {\r\n\t\t\tallSelected = allSelected && this.state.selectedItems.indexOf(elem.asset_number) !== -1;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t{this.props.changePlanActive ?\r\n\t\t\t\t\t\t\t<Alert severity=\"info\">\r\n\t\t\t\t\t\t\t\t<AlertTitle>Change Plan Mode</AlertTitle>\r\n\t\t\t\t\t\t\t\t<Typography>Current plan: {this.props.changePlanName}</Typography>\r\n\t\t\t\t\t\tYou are currently in change plan mode! Changes made are being logged in the plan and not actually made in the system.\r\n\t\t\t\t\t</Alert> : null}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={3}>\r\n\t\t\t\t\t\t{(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) ?\r\n\t\t\t\t\t\t\t<AddAsset\r\n\t\t\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t\t\t\tgetAssetList={this.getAssetList}\r\n\t\t\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\t\t\tfetchAllAssets={this.fetchAllAssets}\r\n\t\t\t\t\t\t\t/> : null}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={6}>\r\n\t\t\t\t\t\t<FilterAsset\r\n\t\t\t\t\t\t\tupdateItems={this.updateItems}\r\n\t\t\t\t\t\t\tgetAssetList={this.getAssetList}\r\n\t\t\t\t\t\t\tallAssets={this.state.allAssets}\r\n\t\t\t\t\t\t\tdecAssets={this.state.decAssets}\r\n\t\t\t\t\t\t\tofflineAssets={this.state.offlineAssets}\r\n\t\t\t\t\t\t\tswitchAssetType={this.switchAssetType}\r\n\t\t\t\t\t\t\tassetType={this.state.assetType}\r\n\t\t\t\t\t\t\tref={this.filter}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={3}>\r\n\t\t\t\t\t\t<ExportAsset\r\n\t\t\t\t\t\t\titems={this.state.tableItems}\r\n\t\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\t\tupdateChangePlan={this.props.updateChangePlan}\r\n\t\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t{this.state.selectedItems.length > 0 ? (\r\n\t\t\t\t\t\t\t<Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n\t\t\t\t\t\t\t\t{this.state.selectedItems.length} {this.state.selectedItems.length === 1 ? \"label\" : \"labels\"} ready to be generated\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t<Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n\t\t\t\t\t\t\t\tClick asset rows to prepare them for label generation\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\t<Tooltip title=\"Generate Labels\">\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstartIcon={<NoteAddIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => this.generateLabels()}\r\n\t\t\t\t\t\t\t\tdisabled={this.state.selectedItems.length < 1}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tGenerate Labels\r\n      \t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t\t\t<Table className={classes.table} aria-label=\"customized table\" style={{\r\n\t\t\t\t\t\t\tbackgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\",\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t<TableRow className={classes.styledTableRow}>\r\n\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? null :\r\n\t\t\t\t\t\t\t\t\t\t<TableCell padding=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Select All\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"select-all\" onClick={() => this.onSelectAllClick()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CheckIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Deselect All\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"deselect-all\" onClick={() => this.deselectAllClick()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ClearIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>}\r\n\t\t\t\t\t\t\t\t\t{headCells.map(headCell => (\r\n\t\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.tableCellHead}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\talign={headCell.align}\r\n\t\t\t\t\t\t\t\t\t\t\tsortDirection={this.state.orderBy === headCell.id ? this.state.order : false}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\t\t\t\t\t\tactive={this.state.orderBy === headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdirection={this.state.orderBy === headCell.id ? this.state.order : 'asc'}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.createSortHandler(event, headCell.id) }}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ fontWeight: \"bold\" }}>{headCell.label}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.orderBy === headCell.id ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ?\r\n\t\t\t\t\t\t\t\t\t\tdecommissionHeadCells.map(headCell => (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.tableCellHead}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\talign={headCell.align}\r\n\t\t\t\t\t\t\t\t\t\t\t\tsortDirection={this.state.orderBy === headCell.id ? this.state.order : false}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tactive={this.state.orderBy === headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdirection={this.state.orderBy === headCell.id ? this.state.order : 'asc'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.createSortHandler(event, headCell.id) }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ fontWeight: \"bold\" }}>{headCell.label}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.orderBy === headCell.id ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>)) : null}\r\n\t\t\t\t\t\t\t\t\t<TableCell align=\"left\" className={classes.tableCellHead}>{\"\"}</TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t{stableSort(this.state.tableItems, getComparator(this.state.order, this.state.orderBy))\r\n\t\t\t\t\t\t\t\t\t.map((row, index) => {\r\n\t\t\t\t\t\t\t\t\t\tconst labelId = `enhanced-table-checkbox-${index}`;\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t\t\t\thover\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={event => this.addCheckedItem(event, row.asset_number)}\r\n\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\t\taria-checked={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\tselected={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={row.assetNum}\r\n\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? null : <TableCell padding=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-labelledby': labelId }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.hostname}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" id={labelId} scope=\"row\">{row.datacenter_name}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.model}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.rack}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.owner}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">{row.asset_number}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? <TableCell align=\"right\">{row.decommission_user}</TableCell> : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? <TableCell align=\"right\">{row.timestamp}</TableCell> : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.openDetailedView(event, row); }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMore Details\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t</TableContainer>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t{this.state.showDetailedView ?\r\n\t\t\t\t\t<DetailAsset\r\n\t\t\t\t\t\topen={this.state.showDetailedView}\r\n\t\t\t\t\t\tclose={this.closeDetailedView}\r\n\t\t\t\t\t\tasset={this.state.detailAsset}\r\n\t\t\t\t\t\tsearch={this.getAssetList}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\tdisabled={(!(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.includes(this.state.detailAsset.datacenter_name)) || this.state.assetType === decomType)}\r\n\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\tfetchAllAssets={this.fetchAllAssets}\r\n\t\t\t\t\t\tchangePlanName={this.props.changePlanName}\r\n\t\t\t\t\t\tshowDecommissioned={this.state.assetType === decomType}\r\n\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t/> : null}\r\n\t\t\t\t<SpeedDial\r\n\t\t\t\t\tariaLabel=\"SpeedDial openIcon example\"\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tposition: 'fixed',\r\n\t\t\t\t\t\tbottom: '30px',\r\n\t\t\t\t\t\tright: '30px',\r\n\t\t\t\t\t}}\r\n\t\t\t\t\thidden={!this.props.changePlanActive}\r\n\t\t\t\t\ticon={<TrackChangesIcon />}\r\n\t\t\t\t\tonClose={this.closeSpeedDial}\r\n\t\t\t\t\tonOpen={this.openSpeedDial}\r\n\t\t\t\t\topen={this.state.speedDialOpen}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SpeedDialAction\r\n\t\t\t\t\t\tkey=\"exit\"\r\n\t\t\t\t\t\ticon={<ExitToAppIcon />}\r\n\t\t\t\t\t\ttooltipTitle=\"Exit Change Plan\"\r\n\t\t\t\t\t\tonClick={this.exitChangePlan}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</SpeedDial>\r\n\t\t\t\t<StatusDisplay\r\n\t\t\t\t\topen={this.state.showStatus}\r\n\t\t\t\t\tseverity={this.state.statusSeverity}\r\n\t\t\t\t\tcloseStatus={this.closeShowStatus}\r\n\t\t\t\t\tmessage={this.state.statusMessage}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(TableAsset);\r\n","export enum DatacenterCommand {\r\n    GET_ALL_DATACENTERS = \"all/\",\r\n    CREATE = \"create/\",\r\n    EDIT = \"edit/\",\r\n    DELETE = \"delete/\",\r\n}\r\n","import descendingComparator from \"./DescendingComparator\";\r\n\r\nexport default function getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy);\r\n  }\r\n","export default function stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n  }\r\n","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return \"An unforseen error occurred. Please refresh the page and try again later.\";\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n      // You can also log the error to an error reporting service\r\n      //logErrorToMyService(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n\r\n      return this.props.children;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    Grid,\r\n    Typography,\r\n } from '@material-ui/core/';\r\n\r\nimport { Privilege } from '../../enums/privilegeTypes.ts'\r\nimport TableAsset from '../helpers/TableAssets';\r\nimport ErrorBoundary from '../../errors/ErrorBoundry';\r\n\r\nexport default class AssetsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            statusSeverity:'',\r\n            statusMessage:'',\r\n            showStatus:false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Assets\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TableAsset\r\n                                privilege={this.props.privilege}\r\n                                username={this.props.username}\r\n                                changePlanActive={this.props.changePlanActive}\r\n                                updateChangePlan={this.props.updateChangePlan}\r\n                                changePlanID={this.props.changePlanID}\r\n                                changePlanStep={this.props.changePlanStep}\r\n                                incrementChangePlanStep={this.props.incrementChangePlanStep}\r\n                                changePlanName={this.props.changePlanName}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport axios from \"axios\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n\nimport * as Constants from \"../../Constants\";\nimport { DatacenterCommand } from \"../enums/DatacenterCommands\";\nimport getURL from \"../../helpers/functions/GetURL\";\n\n\nconst offlineStorageVal = \"offlineStorage\";\nconst datacenterVal = \"datacenter\";\n\nconst useStyles = theme => ({\n\troot: {\n\t\twidth: '100%',\n\t},\n\tmodal: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tpaper: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tborder: '2px solid #000',\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3),\n\t},\n});\n\nclass CreateDatacenter extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tshowCreate: false,\n\t\t\tdatacenterName: \"\",\n\t\t\tdatacenterAbbreviation: \"\",\n\t\t\tshowStatus: false,\n\t\t\tstatusSeverity: \"\",\n\t\t\tstatusMessage: \"\",\n\t\t\tsiteType:datacenterVal,\n\t\t};\n\t}\n\n\tgenerateCreateJSON = () => {\n\t\treturn {\n\t\t\t\"abbreviation\": this.state.datacenterAbbreviation,\n\t\t\t\"datacenter_name\": this.state.datacenterName,\n\t\t\t\"is_offline_storage\":this.state.siteType===offlineStorageVal,\n\t\t}\n\t}\n\n\tcreateDatacenter = () => {\n\t\taxios.post(\n\t\t\tgetURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.CREATE), this.generateCreateJSON()).then(\n\t\t\t\tresponse => {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\tif (response.data.message === \"success\") {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowCreate: false,\n\t\t\t\t\t\t\tdatacenterName: \"\",\n\t\t\t\t\t\t\tdatacenterAbbreviation: \"\",\n\t\t\t\t\t\t}, () => this.props.search());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowStatus: true,\n\t\t\t\t\t\t\tstatusSeverity: \"error\",\n\t\t\t\t\t\t\tstatusMessage: response.data.message,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tupdateDatacenterName = (event) => {\n\t\tthis.setState({ datacenterName: event.target.value });\n\t}\n\n\tupdateDatacenterAbbrevation = (event) => {\n\t\tthis.setState({ datacenterAbbreviation: this.getAbbreviation(event.target.value) });\n\t}\n\n\tgetAbbreviation = (val) => {\n\t\tif (val.length > 6) {\n\t\t\treturn val.substring(0, 7);\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tshowCreate = () => {\n\t\tthis.setState({ showCreate: true });\n\t}\n\n\tcloseCreate = () => {\n\t\tthis.setState({\n\t\t\tshowCreate: false,\n\t\t\tdatacenterName: \"\",\n\t\t\tdatacenterAbbreviation: \"\",\n\t\t});\n\t}\n\n\tcloseStatus = () => {\n\t\tthis.setState({ showStatus: false, statusSeverity: \"\", statusMessage: \"\", });\n\t}\n\n\tselectSiteType = (event) => {\n\t\tthis.setState({ siteType: event.target.value });\n\t}\n\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t{this.props.datacenterList.length > 0 ? <InputLabel id=\"datacenter-select-label\">Select Site</InputLabel> : null}\n\t\t\t\t\t{this.props.datacenterList.length > 0 ? <Select\n\t\t\t\t\t\tname='datacenter_name'\n\t\t\t\t\t\tid=\"datacenter-select\"\n\t\t\t\t\t\tvalue={this.props.dc}\n\t\t\t\t\t\tonChange={this.props.selectDatacenter}\n\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.datacenterList.map(value => {\n\t\t\t\t\t\t\treturn (<MenuItem value={value}>{value[\"name\"]}</MenuItem>);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Select> : null}\n\t\t\t\t</Grid>\n\t\t\t\t{this.props.disabled ? null :\n\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tonClick={() => { this.showCreate() }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate New Site\n            </Button>\n\t\t\t\t\t</Grid>}\n\n\n\t\t\t\t<Modal\n\t\t\t\t\taria-labelledby=\"transition-modal-title\"\n\t\t\t\t\taria-describedby=\"transition-modal-description\"\n\t\t\t\t\tclassName={classes.modal}\n\t\t\t\t\topen={this.state.showCreate}\n\t\t\t\t\tonClose={this.closeCreate}\n\t\t\t\t\tcloseAfterTransition\n\t\t\t\t\tBackdropComponent={Backdrop}\n\t\t\t\t\tscroll=\"body\"\n\t\t\t\t\tBackdropProps={{\n\t\t\t\t\t\ttimeout: 500,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Fade in={this.state.showCreate}>\n\t\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t\t\t\t\t<Typography>Site Name:</Typography>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\tid=\"input-rack\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\tlabel={\"datacenter-name\"}\n\t\t\t\t\t\t\t\t\t\tname={\"datacenter-name\"}\n\t\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterName}\n\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t\t\t\t\t<Typography>Site Abbreviation:</Typography>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<Tooltip placement=\"top\" title={\"Max 6 characters\"}>\n\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\tid=\"input-rack\"\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\tlabel={\"datacenter-abbreviation\"}\n\t\t\t\t\t\t\t\t\t\t\tname={\"datacenter-abbreviation\"}\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterAbbrevation}\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterAbbreviation}\n\t\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\n\t\t\t\t\t\t\t\t\t\t<RadioGroup column aria-label=\"position\" name=\"position\" defaultValue=\"start\" value={this.state.siteType} onChange={(event) => this.selectSiteType(event)}>\n\t\t\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Datacenter\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={datacenterVal}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Offline Storage\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={offlineStorageVal}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\tdisabled={!(this.state.datacenterAbbreviation && this.state.datacenterName)}\n\t\t\t\t\t\t\t\t\t\tonClick={() => { this.createDatacenter() }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tCreate Site\n                            </Button>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t{this.state.showStatus ? <Alert severity=\"error\" onClose={() => { this.closeStatus() }}>{this.state.statusMessage}</Alert> : null}\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fade>\n\t\t\t\t</Modal>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default withStyles(useStyles)(CreateDatacenter);\n","import React from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../enums/DatacenterCommands\";\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n  });\r\n\r\nclass EditDatacenter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            datacenterName:props.dcName,\r\n            datacenterAbbreviation:props.dcAbbrev,\r\n\t\t};\r\n\r\n\t}\r\n\r\n    generateEditJSON = () => {\r\n\t\tconsole.log(\"generating edit\")\r\n\t\tconsole.log(this.props.dcName);\r\n        return {\r\n\t\t\t\"nameOriginal\": this.props.dcName,\r\n            \"abbreviation\" : this.state.datacenterAbbreviation||this.props.dcAbbrev,\r\n            \"datacenter_name\": this.state.datacenterName||this.props.dcName,\r\n        }\r\n    }\r\n\r\n    editDatacenter = () => {\r\n\t\tconsole.log(\"sending\");\r\n\t\tconsole.log(this.state.datacenterName);\r\n        axios.post(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.EDIT), this.generateEditJSON()).then(\r\n            response => {\r\n                console.log(response);\r\n                if (response.status === Constants.HTTPS_STATUS_OK) {\r\n                    this.setState({\r\n                        datacenterName:\"\",\r\n                        datacenterAbbreviation:\"\",\r\n                    }, () => {this.props.search(); this.props.close() } );\r\n                } else {\r\n                    this.setState({\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    updateDatacenterName = (event) => {\r\n        this.setState({ datacenterName: event.target.value });\r\n    }\r\n\r\n    updateDatacenterAbbrevation = (event) => {\r\n        this.setState({ datacenterAbbreviation: this.getAbbreviation(event.target.value) });\r\n    }\r\n\r\n    getAbbreviation = (val) => {\r\n        if (val.length > 6) {\r\n            return val.substring(0,7);\r\n        }\r\n\r\n        return val;\r\n\t}\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.props.show}\r\n                onClose={this.props.close}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                scroll=\"body\"\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={this.props.show}>\r\n                    <div className={classes.paper}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={2}>\r\n                                <Typography>Datcenter Name:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField\r\n                                    id=\"input-rack\"\r\n                                    variant=\"outlined\"\r\n                                    label={\"datacenter-name\"}\r\n                                    name={\"datacenter-name\"}\r\n\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterName}\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterName||this.props.dcName}\r\n                                    required\r\n\t\t\t\t\t\t\t\t\tfullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <Typography>Datcenter Abbreviation:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <Tooltip placement=\"top\" title={\"Max 6 characters\"}>\r\n                                    <TextField\r\n                                        id=\"input-rack\"\r\n                                        variant=\"outlined\"\r\n                                        label={\"datacenter-abbreviation\"}\r\n                                        name={\"datacenter-abbreviation\"}\r\n                                        onChange={this.updateDatacenterAbbrevation}\r\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterAbbreviation||this.props.dcAbbrev}\r\n                                        required\r\n\t\t\t\t\t\t\t\t\t\tfullWidth\r\n                                    />\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => { this.editDatacenter() }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tSave Edits\r\n\t\t\t\t\t\t\t\t</Button>\r\n                            </Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.close}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t\t\t</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(EditDatacenter);\r\n","import React from 'react';\r\n\r\nimport { fade, withStyles, SvgIcon, Collapse, Grid, Typography } from '@material-ui/core';\r\nimport { TreeView, TreeItem } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"../stylesheets/RackStyles.css\";\r\n\r\nimport ErrorBoundray from '../../errors/ErrorBoundry';\r\nimport { useSpring, animated } from 'react-spring/web.cjs';\r\n\r\nfunction MinusSquare(props) {\r\n    return (\r\n      <SvgIcon fontSize=\"inherit\" {...props}>\r\n        {/* tslint:disable-next-line: max-line-length */}\r\n        <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\r\n      </SvgIcon>\r\n    );\r\n  }\r\n\r\n  function PlusSquare(props) {\r\n    return (\r\n      <SvgIcon fontSize=\"inherit\" {...props}>\r\n        {/* tslint:disable-next-line: max-line-length */}\r\n        <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\r\n      </SvgIcon>\r\n    );\r\n  }\r\n\r\n  function CloseSquare(props) {\r\n    return (\r\n      <SvgIcon className=\"close\" fontSize=\"inherit\" {...props}>\r\n        {/* tslint:disable-next-line: max-line-length */}\r\n        <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\r\n      </SvgIcon>\r\n    );\r\n  }\r\n\r\nfunction TransitionComponent(props) {\r\n    const style = useSpring({\r\n      from: { opacity: 0, transform: 'translate3d(20px,0,0)' },\r\n      to: { opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)` },\r\n    });\r\n\r\n    return (\r\n      <animated.div style={style}>\r\n        <Collapse {...props} />\r\n      </animated.div>\r\n    );\r\n  }\r\n\r\n  TransitionComponent.propTypes = {\r\n    /**\r\n     * Show the component; triggers the enter or exit states\r\n     */\r\n    in: PropTypes.bool,\r\n  };\r\n\r\nconst StyledTreeItem = withStyles(theme => ({\r\n    iconContainer: {\r\n      '& .close': {\r\n        opacity: 0.3,\r\n      },\r\n    },\r\n    group: {\r\n      marginLeft: 12,\r\n      paddingLeft: 12,\r\n      borderLeft: `1px dashed ${fade(theme.palette.text.primary, 0.4)}`,\r\n    },\r\n  }))(props => <TreeItem {...props} TransitionComponent={TransitionComponent} />);\r\n\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n      },\r\n  });\r\n\r\nclass RacksView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            firstRack: 'A1',\r\n            secondRack: 'A1',\r\n\r\n            showStatus: false,\r\n            statusMessage: '',\r\n            statusSeverity: 'info',\r\n\r\n            showConfirmationBox: false,\r\n\r\n            racksList: [],\r\n            racks: {}\r\n        };\r\n    }\r\n\r\n    handleFormat = (event, newFormats) => {\r\n        if (newFormats.length) {\r\n            this.setState({formats: newFormats});\r\n        }\r\n    };\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    closeConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: false });\r\n    }\r\n\r\n    sortRacks = (rack1, rack2) => {\r\n      var num1 = parseInt(rack1.substr(1));\r\n      var num2 = parseInt(rack2.substr(1));\r\n\r\n      return num1 > num2;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <ErrorBoundray>\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"f\r\n                    style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                >\r\n\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\">Racks</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TreeView\r\n                            className={classes.root}\r\n                            defaultExpanded={['1']}\r\n                            defaultCollapseIcon={<MinusSquare />}\r\n                            defaultExpandIcon={<PlusSquare />}\r\n                            defaultEndIcon={<CloseSquare />}\r\n                        >\r\n                            {Object.keys(this.props.racks).sort().map(key => {\r\n                                return (<StyledTreeItem nodeId={key} label={key}>\r\n                                        {this.props.racks[key].sort(this.sortRacks).map(value => {\r\n                                            return (<StyledTreeItem nodeId={value} label={value} />);\r\n                                        })}\r\n                                    </StyledTreeItem>);\r\n                            })}\r\n                        </TreeView>\r\n                    </Grid>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n            </ErrorBoundray>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(RacksView);\r\n","export enum RackCommand {\r\n    GET_ALL_RACKS = \"all\",\r\n    CREATE_RACKS = \"create\",\r\n    DELETE_RACKS = \"delete\",\r\n    GET_RACK_DETAILS = \"details\"\r\n}\r\n","import React from \"react\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Paper, TextField, Modal, Backdrop, Fade } from '@material-ui/core';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport { RackCommand } from \"../../enums/RackCommands.ts\";\r\n\r\n\r\n\r\nexport default function ShowDatacenters(props) {\r\n    const [rackType, setRackType] = React.useState('single');\r\n    const [rack1, setRack1] = React.useState('A1');\r\n    const [rack2, setRack2] = React.useState('A1');\r\n\r\n    const handleRackType = (event, newType) => {\r\n        setRackType(newType);\r\n      };\r\n\r\n      const updateRack = (event) => {\r\n        setRack1(event.target.value);\r\n        setRack2(event.target.value);\r\n      }\r\n\r\n      const updateStart = (event) => {\r\n        setRack1(event.target.value);\r\n      }\r\n\r\n      const updateEnd = (event) => {\r\n        setRack2(event.target.value);\r\n      }\r\n\r\n    const createRacks = () => {\r\n        props.updateRacks(RackCommand.CREATE_RACKS, rack1, rack2);\r\n    }\r\n\r\n    const deleteRacks = () => {\r\n        props.updateRacks(RackCommand.DELETE_RACKS, rack1, rack2);\r\n    }\r\n\r\n    const viewRacks = () => {\r\n        props.updateRacks(RackCommand.GET_RACK_DETAILS, rack1, rack2);\r\n    }\r\n\r\n    try {\r\n        if (props.datacentersList.length == 0) {\r\n            return <Typography>There are currently no datacenters being managed.</Typography>\r\n        } else {\r\n            return (<div>{\r\n                <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                    <Paper elevation={3}>\r\n                    {!(props.privilege.admin || props.privilege.asset) ? null :\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{\"padding\": \"10px\"}}\r\n                    >\r\n\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Manage\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={(event) => {props.editDatacenter(event, props.dc.name, props.dc.abbreviation)} }\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                            <hr style={{width: \"5vw\"}} />\r\n                            <Typography color=\"textSecondary\">\r\n                                Or\r\n                            </Typography>\r\n                            <hr style={{width: \"5vw\"}} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={(event) => {props.openConfirmationBox(event, props.selectedDatacenter)} }\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>}\r\n                    </Paper>\r\n                </Grid>\r\n\r\n                {props.isOfflineStorage ? null :\r\n                <Grid item xs={3}>\r\n                <Paper elevation={3}>\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{\"padding\": \"10px\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Racks\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid container item direction=\"row\" justify=\"center\" xs={12}>\r\n                            <ToggleButtonGroup\r\n                                value={rackType}\r\n                                exclusive\r\n                                onChange={handleRackType}\r\n                                aria-label=\"rack type\"\r\n                            >\r\n                                <ToggleButton value=\"single\" aria-label=\"single-rack\">\r\n                                    Single\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"range\" aria-label=\"range-rack\">\r\n                                    Range\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Grid>\r\n\r\n                        {rackType === \"single\" ? <Grid item xs={12}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Rack\" name=\"rack1\" onChange={updateRack}/>\r\n                        </Grid> : <Grid container item spacing={3} direciton=\"row\" justify=\"center\"><Grid item xs={6}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Start Rack (e.g. A1)\" name=\"rack1\" onChange={updateStart}/>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"End Rack (e.g. B10)\" name=\"rack2\" onChange={updateEnd}/>\r\n                        </Grid></Grid> }\r\n                        {!(props.privilege.admin || props.privilege.asset || props.privilege.datacenters.includes(props.selectedDatacenter)) ? null :\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{ width: \"100%\", backgroundColor: \"green\", color: \"white\" }}\r\n                                onClick={createRacks}\r\n                            >\r\n                                Create\r\n                            </Button>\r\n                        </Grid>}\r\n                        {!(props.privilege.admin || props.privilege.asset || props.privilege.datacenters.includes(props.selectedDatacenter)) ? null :\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={deleteRacks}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>}\r\n                    </Grid>\r\n\r\n                    </Paper>\r\n                </Grid>}\r\n            </Grid>\r\n            }\r\n            </div>\r\n            );\r\n        }\r\n    } catch (exception) {\r\n        console.log(exception);\r\n        return <Typography>Could not load any datacenters at this time</Typography>\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../enums/DatacenterCommands.ts\";\r\nimport RacksView from \"../pages/RacksView\";\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\nimport CreateDatacenter from \"./CreateDatacenter\";\r\nimport { Privilege } from '../../enums/privilegeTypes.ts';\r\nimport EditDatacenter from \"./EditDatacenter\";\r\nimport ShowDatacenters from \"./functions/ShowDatacenters\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n        justify:\"center\",\r\n        alignItems:\"center\",\r\n      },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n  });\r\n\r\nclass ConfirmDeteleDC extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<Modal\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    className={classes.modal}\r\n                    open={this.props.showConfirmationBox}\r\n                    onClose={this.props.closeConfirmationBox}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                    timeout: 500,\r\n                    }}\r\n                >\r\n                    <Fade in={this.props.showConfirmationBox}>\r\n                        <div className={classes.paper}>\r\n                            <Grid container spacing={5}>\r\n                                <Grid item xs={12}>\r\n                                    Are you sure you wish to delete?\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={this.props.deleteDatacenter}\r\n                                    >\r\n                                        Yes\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.props.closeConfirmationBox()}\r\n                                    >\r\n                                        No\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(ConfirmDeteleDC);\r\n","export enum StatsCommand {\r\n    GENERATE_REPORT = \"generate-report\",\r\n    TEST = \"test\",\r\n}\r\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport { Grid, CircularProgress, Typography, withStyles } from '@material-ui/core/';\nimport getURL from \"../../helpers/functions/GetURL\";\nimport * as Constants from \"../../Constants\";\nimport { DatacenterCommand } from \"../enums/DatacenterCommands.ts\";\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\nimport CreateDatacenter from \"../helpers/CreateDatacenter\";\nimport { Privilege } from '../../enums/privilegeTypes.ts';\nimport EditDatacenter from \"../helpers/EditDatacenter\";\nimport ConfirmDeteleDC from \"../helpers/ConfirmDeleteDC\";\nimport ShowDatacenters from \"../helpers/functions/ShowDatacenters\";\nimport RacksView from './RacksView';\nimport { RackCommand } from \"../enums/RackCommands.ts\";\nimport StatusDisplay from '../../helpers/StatusDisplay';\n\n\nconst racksMainPath = 'racks/';\n\n\nconst useStyles = theme => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    progress: {\n        display: 'flex',\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n        justify: \"center\",\n        alignItems: \"center\",\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n});\n\n\nclass DatacenterView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            datacentersList: [],\n            loadingDCList: true,\n            showConfirmationBox: false,\n            currentDatacenter: \"\",\n            showEditDC: false,\n            editDCName: \"\",\n            editDCAbbr: \"\",\n            selectedDatacenter: \"\",\n            fullDatacenter: {},\n            racks: {},\n        };\n    }\n\n    componentDidMount() {\n        this.getDatacenters();\n    }\n\n    getDatacenters = () => {\n        this.setState({ loadingDCList: true });\n        axios.get(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.GET_ALL_DATACENTERS)).then(\n            response => {\n                console.log(response.data.datacenters);\n                var datacenter = response.data.datacenters[0];\n                console.log(datacenter);\n                var name = datacenter === undefined ? \"\" : datacenter.name;\n                console.log(name);\n                this.setState({ datacentersList: response.data.datacenters, loadingDCList: false, selectedDatacenter: name, fullDatacenter: datacenter });\n                this.getAllRacks(name, true);\n            }\n        );\n    }\n\n    deleteDatacenter = () => {\n        console.log(this.state.currentDatacenter);\n        axios.post(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.DELETE),\n            {\n                \"datacenter_name\": this.state.currentDatacenter\n            }\n        ).then(\n            response => {\n                console.log(\"Deleteting\");\n                console.log(response);\n                if (response.data.message === \"success\") {\n                    this.setState({\n                        showConfirmationBox: false,\n                        showStatus: true,\n                        statusMessage: \"Successfully deleted site\",\n                        statusSeverity: \"success\",\n                    });\n                    this.getDatacenters();\n                } else {\n                    this.setState({\n                        showConfirmationBox: false,\n                        showStatus: true,\n                        statusMessage: response.data.message,\n                        statusSeverity: \"error\",\n                    });\n                }\n\n            }\n        );\n    }\n\n    openConfirmationBox = (event, datacenter) => {\n        this.setState({ showConfirmationBox: true, currentDatacenter: datacenter });\n    }\n\n    closeConfirmationBox = () => {\n        this.setState({ showConfirmationBox: false });\n    }\n\n    openEditDatacenter = (event, datacenterName, datacenterAbbrev) => {\n        this.setState({ editDCName: datacenterName, editDCAbbr: datacenterAbbrev }, () => this.setState({ showEditDC: true, }));\n    }\n\n    closeEditDatacenter = () => {\n        this.setState({\n            showEditDC: false,\n            editDCName: \"\",\n            editDCAbbr: \"\",\n            showStatus: false,\n            statusMessage: '',\n            statusSeverity: 'info',\n            isOfflineStorage:false,\n            selectedDatacenter:\"\",\n            fullDatacenter:\"\",\n        });\n    }\n\n    closeShowStatus = () => {\n        this.setState({ showStatus: false });\n    }\n\n    updateRacks = (command, rack1, rack2) => {\n        axios.post(\n            getURL(racksMainPath, command),\n            {\n                'start_letter': rack1[0],\n                'stop_letter': rack2[0],\n                'start_number': rack1.substring(1),\n                'stop_number': rack2.substring(1),\n                \"datacenter_name\": this.state.selectedDatacenter,\n            }\n        ).then(response => {\n            if (response.data.message === 'success') {\n                this.setState({ showStatus: true, statusMessage: \"Success\", statusSeverity: \"success\", showConfirmationBox: false });\n                if (command === RackCommand.GET_RACK_DETAILS) {\n                    const win = window.open(response.data.link, '_blank');\n                    if (win != null) {\n                        win.focus();\n                    }\n                }\n            } else {\n                this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\n            }\n            this.getAllRacks(this.state.selectedDatacenter, false);\n        });\n    }\n\n    getAllRacks = (datacenter, showSnack) => {\n        axios.post(getURL(racksMainPath, RackCommand.GET_ALL_RACKS), {\n            \"datacenter_name\": datacenter\n        }).then(response => {\n            console.log(response.data.racks);\n            var racks = {};\n            for (var i = 0; i < response.data.racks.length; ++i) {\n                var letter = response.data.racks[i].label[0];\n                if (letter in racks) {\n                    racks[letter].push(response.data.racks[i].label);\n                } else {\n                    racks[letter] = [response.data.racks[i].label];\n                }\n\n                racks[letter].sort();\n            }\n\n            this.setState({ racks: racks });\n\n            if (response.data.message === 'success') {\n                if (showSnack) {\n                    this.setState({ showStatus: true, statusMessage: \"Racks loaded\", statusSeverity: \"success\", racksList: response.data.racks })\n                }\n            } else {\n                this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\n            }\n        });\n    }\n\n    updateDatacenter = (event) => {\n        this.setState({ selectedDatacenter: event.target.value.name, fullDatacenter: event.target.value, isOfflineStorage:event.target.value.is_offline_storage }, this.getAllRacks(event.target.value.name, true));\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <React.Fragment>\n                <ErrorBoundary>\n                    <Grid\n                        container\n                        spacing={5}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                    >\n                        <Grid item xs={12}>\n                            <Typography variant=\"h4\">\n                                Sites\n                            </Typography>\n                        </Grid>\n                        <CreateDatacenter\n                            disabled={!(this.props.privilege.admin || this.props.privilege.asset)}\n                            search={this.getDatacenters}\n                            selectedDatacenter={this.state.selectedDatacenter}\n                            dc={this.state.fullDatacenter}\n                            selectDatacenter={this.updateDatacenter}\n                            datacenterList={this.state.datacentersList}\n                        />\n\n                        {this.state.loadingDCList ?\n                            <div className={classes.progress}><CircularProgress /></div> :\n\n                            <Grid item xs={12}>\n                                <ShowDatacenters\n                                    classes={classes}\n                                    datacentersList={this.state.datacentersList}\n                                    privilege={this.props.privilege}\n                                    openConfirmationBox={this.openConfirmationBox}\n                                    editDatacenter={this.openEditDatacenter}\n                                    selectedDatacenter={this.state.selectedDatacenter}\n                                    updateRacks={this.updateRacks}\n                                    privilege={this.props.privilege}\n                                    dc={this.state.fullDatacenter}\n                                    isOfflineStorage={this.state.isOfflineStorage}\n                                />\n                            </Grid>}\n                        <Grid item xs={6}>\n                            <EditDatacenter\n                                show={this.state.showEditDC}\n                                close={this.closeEditDatacenter}\n                                dcName={this.state.editDCName}\n                                dcAbbrev={this.state.editDCAbbr}\n                                search={this.getDatacenters}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <ConfirmDeteleDC\n                                showConfirmationBox={this.state.showConfirmationBox}\n                                closeConfirmationBox={this.closeConfirmationBox}\n                                deleteDatacenter={this.deleteDatacenter}\n                                close={this.closeEditDatacneter}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    {this.state.isOfflineStorage ? null :\n                    <Grid\n                        container\n                        spacing={5}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                    >\n                        <Grid item xs={12}>\n                            <RacksView\n                                datacenter={this.state.selectedDatacenter}\n                                racks={this.state.racks}\n                            />\n                        </Grid>\n                    </Grid>}\n                    <StatusDisplay\n                        open={this.state.showStatus}\n                        severity={this.state.statusSeverity}\n                        closeStatus={this.closeShowStatus}\n                        message={this.state.statusMessage}\n                    />\n                </ErrorBoundary>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default withStyles(useStyles)(DatacenterView);\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\nimport DatacenterView from \"./DatacentersView\";\r\nimport { Privilege } from '../../enums/privilegeTypes';\r\n\r\nconst useStyles = theme => ({\r\n\r\n  });\r\n\r\nclass DatacenterManagerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorBoundary>\r\n                    <DatacenterView privilege={this.props.privilege} />\r\n                </ErrorBoundary>\r\n            </React.Fragment>\r\n        );\r\n}\r\n  }\r\n\r\n\r\n  export default withStyles(useStyles)(DatacenterManagerView);\r\n","export default function jsonToArr(incomingJSON) {\r\n    var json = {};\r\n    try {\r\n        json = JSON.parse(incomingJSON);\r\n    } catch (e) {\r\n        json = incomingJSON;\r\n    }\r\n\r\n    if (Object.entries(json).length === 0 && json.constructor === Object) {\r\n        return [];\r\n    }\r\n\r\n    const items = [];\r\n\r\n    Object.keys(json).map((key) => {\r\n        const row = [];\r\n        row.push(key);\r\n        row.push(json[key]);\r\n        items.push(row);\r\n\r\n        return key;\r\n    });\r\n    return items;\r\n}\r\n","export enum LogCommand {\r\n    TEST = \"test/\",\r\n    GET_LOGS = \"getlogs/\",\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../../racks/enums/DatacenterCommands.ts\";\r\nimport { StatsCommand } from \"../enums/StatsCommands.ts\";\r\nimport JSONtoArr from \"../../helpers/functions/JSONtoArr\";\r\nimport StatusDisplay from '../../helpers/StatusDisplay';\r\nimport ErrorBoundray from '../../errors/ErrorBoundry';\r\nimport { Select, MenuItem, InputLabel, Grid, Paper, Typography, Button } from '@material-ui/core';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, CircularProgress } from '@material-ui/core';\r\n\r\nconst statsMainPath = 'stats/';\r\nconst tables = {\r\n    \"totalUsage\": \"Total Usage\",\r\n    \"spaceUsage\": \"Space Usage\",\r\n    \"vendorUsage\": \"Vendor Usage\",\r\n    \"modelUsage\": \"Model Usage\",\r\n    \"ownerUsage\": \"Owner Usage\",\r\n}\r\n\r\nconst tableCols = {\r\n    \"totalUsage\": [\"Total\", \"Usage\"],\r\n    \"spaceUsage\": [\"Rack\", \"Usage\"],\r\n    \"vendorUsage\": [\"Vendor\", \"Usage\"],\r\n    \"modelUsage\": [\"Model\", \"Usage\"],\r\n    \"ownerUsage\": [\"Ownder\", \"Usage\"],\r\n}\r\n\r\nexport default class StatisticsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n            selectedDatacenter: 'All Datacenters',\r\n            tableValues: {\r\n                \"totalUsage\": [],\r\n                \"spaceUsage\": [],\r\n                \"vendorUsage\": [],\r\n                \"modelUsage\": [],\r\n                \"ownerUsage\": [],\r\n            },\r\n            totalUsage: [],\r\n            spaceUsage: [],\r\n            vendorUsage: [],\r\n            modelUsage: [],\r\n            ownerUsage: [],\r\n\r\n            showStatus: false,\r\n            statusMessage: '',\r\n            statusSeverity: '',\r\n        };\r\n\r\n        this.closeShowStatus = this.closeShowStatus.bind(this);\r\n\r\n        axios.defaults.headers.common['token'] = this.props.token;\r\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDatacenters();\r\n\r\n        var event = {\r\n            target: {\r\n                value:\"All Datacenters\",\r\n            }\r\n        }\r\n        this.generateReport(event);\r\n    }\r\n\r\n    getDatacenters = () => {\r\n        axios.get(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.GET_ALL_DATACENTERS)).then(\r\n            response => {\r\n                console.log(response);\r\n                this.setState({ datacenterList: response.data.datacenters, loadingDatacenters: false });\r\n            }\r\n        );\r\n    }\r\n\r\n    generateReport = (event) => {\r\n        var dc = event.target.value;\r\n        this.setState({ selectedDatacenter: dc, generatingReport: true });\r\n        axios.post(getURL(statsMainPath, StatsCommand.GENERATE_REPORT), {\r\n            'datacenter_name': dc.name === \"All Datacenters\" ? \"\" : dc.name,\r\n        }).then(response => {\r\n            try {\r\n                var data = response.data;\r\n                var totalUsage = [];\r\n                var totalUsageRow = [\"Total Usage\"];\r\n                totalUsageRow.push(data[\"totalUsage\"]);\r\n                totalUsage.push(totalUsageRow);\r\n\r\n                var spaceUsage = JSONtoArr(data[\"spaceUsage\"]);\r\n                if (spaceUsage.length === 0) {\r\n                    spaceUsage.push([\"No space is currently being used\", []])\r\n                }\r\n                var vendorUsage = JSONtoArr(data[\"vendorUsage\"]);\r\n                if (vendorUsage.length === 0) {\r\n                    vendorUsage.push([\"No vendors currently using space\", []])\r\n                }\r\n                var modelUsage = JSONtoArr(data[\"modelUsage\"]);\r\n                if (modelUsage.length === 0) {\r\n                    modelUsage.push([\"No models currently using space\", []])\r\n                }\r\n                var ownerUsage = JSONtoArr(data[\"ownerUsage\"]);\r\n                if (ownerUsage.length === 0) {\r\n                    ownerUsage.push([\"No owners currently using space\", []])\r\n                }\r\n\r\n                this.setState({\r\n                    showStatus: true,\r\n                    statusSeverity: \"success\",\r\n                    statusMessage: \"Successfully generated Report\",\r\n                    tableValues: {\r\n                        \"totalUsage\": totalUsage,\r\n                        \"spaceUsage\": spaceUsage,\r\n                        \"vendorUsage\": vendorUsage,\r\n                        \"modelUsage\": modelUsage,\r\n                        \"ownerUsage\": ownerUsage,\r\n                    },\r\n                })\r\n            } catch {\r\n                this.setState({ showStatus: true, statusMessage: \"Successfully generated Report\", statusSeverity: \"error\" })\r\n            }\r\n\r\n            this.setState({ generatingReport: false })\r\n        });\r\n    }\r\n\r\n    closeShowStatus() {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ErrorBoundray >\r\n                    <StatusDisplay\r\n                        open={this.state.showStatus}\r\n                        severity={this.state.statusSeverity}\r\n                        closeStatus={this.closeShowStatus}\r\n                        message={this.state.statusMessage}\r\n                    />\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Reports\r\n                        </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            {this.state.loadingDatacenters || this.state.generatingReport ?\r\n                                <CircularProgress /> :\r\n                                <span>\r\n                                    <InputLabel id=\"datacenter-select-label\">Select Datacenter</InputLabel>\r\n                                    <Select\r\n                                        name='datacenter_name'\r\n                                        id=\"datacenter-select\"\r\n                                        value={this.state.selectedDatacenter}\r\n                                        onChange={(event) => this.generateReport(event)}\r\n                                        style={{ width: \"100%\" }}\r\n                                    >\r\n                                        <MenuItem value=\"All Datacenters\">All Datacenters</MenuItem>\r\n                                        {this.state.datacenterList.map(value => {\r\n                                            return (<MenuItem value={value}>{value[\"name\"]}</MenuItem>);\r\n                                        })}\r\n                                    </Select>\r\n                                </span>\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div>\r\n\r\n                    </div>\r\n                    {Object.keys(tables).map(key => (\r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                            >\r\n                                <Typography>{tables[key]}</Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n                                <TableContainer component={Paper}>\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow >\r\n                                                {tableCols[key].map(column => (<TableCell><span id={column}>{column}</span></TableCell>))}\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {this.state.tableValues[key].map(row => (\r\n                                                <TableRow>\r\n                                                    {row.map(column => (<TableCell><span id={column}>{column + (isNaN(column) ? \"\" : \"%\")}</span></TableCell>))}\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n                    ))}\r\n                </ErrorBoundray>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\"\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core/\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TextField } from '@material-ui/core';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport { LogCommand } from \"../enums/LogCommands.ts\";\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\n\r\nconst useStyles = {\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    searchbar: {\r\n        minWidth: \"200px\",\r\n        flexGrow: 1,\r\n    },\r\n  };\r\n\r\nfunction makeTableData(index, timestamp, type, message) {\r\n    return { index, timestamp, type, message };\r\n}\r\n\r\nconst typeKey = \"type\";\r\nconst timestampKey = \"timestamp\";\r\nconst USER_KEY = \"user\";\r\nconst ASSET_KEY = \"assets\";\r\n\r\nclass LogsView extends React.Component  {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            logItems:[],\r\n            filteredLogs:[],\r\n            allLogs:null,\r\n            filterUser:\"\",\r\n            filterAsset:\"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLogs();\r\n    }\r\n\r\n    getLogs = () => {\r\n        axios.get(getURL(Constants.LOGS_MAIN_PATH, LogCommand.GET_LOGS)).then(response => {\r\n            this.parseLog(response.data.log);\r\n            this.filter();\r\n        });\r\n    }\r\n\r\n    parseLog = (logs) => {\r\n        var items = [];\r\n        logs.map((log, index) => {\r\n            var message = \"\";\r\n            Object.entries(log).map(([key, value]) => {\r\n                if (key === typeKey || key === timestampKey) {\r\n                    return;\r\n                }\r\n                message += value + \"\\n\";\r\n            });\r\n            items.push(makeTableData(index, log[timestampKey], log[typeKey], message));\r\n        });\r\n\r\n        this.setState({ logItems: items, filteredLogs:items, allLogs:logs });\r\n    }\r\n\r\n    filter = () => {\r\n        var user = this.state.filterUser;\r\n        var asset = this.state.filterAsset;\r\n        var filteredItems = [];\r\n\r\n        this.state.allLogs.map(entry => {\r\n            console.log(entry);\r\n            var hasAsset = false;\r\n            var hasUser = false;\r\n\r\n            try {\r\n                if (entry.message.match(/\\[.+\\]/)[0].includes(user)) {\r\n                    hasUser = true;\r\n                }\r\n            } catch {\r\n                hasUser = false;\r\n            }\r\n\r\n\r\n            try {\r\n                if (asset !== \"\") {\r\n                    var assetNum = \"\" + entry.request.asset_number\r\n                    if (assetNum.includes(asset)) {\r\n                        hasAsset = true;\r\n                    }\r\n                } else {\r\n                    hasAsset = true;\r\n                }\r\n            } catch {\r\n                hasAsset = false;\r\n            }\r\n\r\n            if (hasAsset && hasUser) {\r\n                filteredItems.push(entry);\r\n            }\r\n        });\r\n\r\n        filteredItems.sort(function(a, b) {\r\n            if (a.timestamp > b.timestamp) return -1;\r\n            if (a.timestamp < b.timestamp) return 1;\r\n            return 0;\r\n        })\r\n\r\n        this.setState({ filteredLogs:filteredItems });\r\n    }\r\n\r\n    updateFilterUser = (event) => {\r\n        this.setState({ filterUser: event.target.value }, () => { this.filter() });\r\n    }\r\n\r\n    updateFilterAsset = (event) => {\r\n        this.setState({ filterAsset: event.target.value }, () => { this.filter() });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorBoundary>\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Logs\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.getLogs}\r\n                            >\r\n                                Refresh Logs\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                className={classes.searchbar}\r\n                                name={\"filter-users\"}\r\n                                placeholder=\"Search users\"\r\n                                fullWidth\r\n                                onChange={this.updateFilterUser}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                className={classes.searchbar}\r\n                                name={\"filter-assets\"}\r\n                                placeholder=\"Search assets\"\r\n                                fullWidth\r\n                                onChange={this.updateFilterAsset}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table className={classes.table} aria-label=\"simple table\">\r\n                                    <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"left\"><span id={\"timestamp\"} style={{fontWeight: \"bold\"}}>Timestamp</span></TableCell>\r\n                                        <TableCell align=\"left\"><span id={\"type\"} style={{fontWeight: \"bold\"}}>type</span></TableCell>\r\n                                        <TableCell align=\"left\"><span id={\"message\"} style={{fontWeight: \"bold\"}}>Message</span></TableCell>\r\n                                    </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                    {this.state.filteredLogs.map(logItem => (\r\n                                        <TableRow key={logItem.timestamp}>\r\n                                            <TableCell aligh=\"left\">{logItem.timestamp}</TableCell>\r\n                                            <TableCell align=\"left\">{logItem.type}</TableCell>\r\n                                            <TableCell align=\"left\">{logItem.message}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(LogsView);\r\n","// React\nimport React from 'react';\nimport axios from 'axios';\n\n// Helpers\nimport getURL from '../../helpers/functions/GetURL';\nimport StatusDisplay from '../../helpers/StatusDisplay';\nimport ErrorBoundray from '../../errors/ErrorBoundry';\nimport { AssetCommand } from '../../assets/enums/AssetCommands.ts';\n\n// Material UI Core\nimport { Grid, Paper, Typography, Button, withStyles } from '@material-ui/core';\nimport { Modal, Fade, Backdrop, TextField, Chip, IconButton } from '@material-ui/core';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails } from '@material-ui/core';\n\n// Icons\nimport EditIcon from '@material-ui/icons/Edit';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CheckIcon from '@material-ui/icons/Check';\n\n// Path prefix for change plan routes\nconst changePlanPath = \"changeplans/\";\n\n// CSS styles\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: \"100%\",\n    },\n    grid: {\n        backgroundColor: theme.palette.background.paper,\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        width: \"50%\"\n    },\n    progress: {\n        display: 'flex',\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n});\n\n// A view to display a user's change plans\nclass ChangePlansView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // Status snackbar\n            statusOpen: false,\n            statusMessage: '',\n            statusSeverity: '',\n\n            // Change plans\n            changePlans: [],\n\n            // Change plan actions\n            changePlanDetails: {},\n\n            // Dialog to rename a change plan\n            renameDialog: false,\n\n            // Name to rename a change plan\n            planName: \"\",\n\n            // Id of change plan to rename\n            planId: null,\n\n            // Dialog to execute a change plan\n            executeDialog: false,\n\n            // Id of change plan to execute\n            executeId: null,\n\n            // Dialog to delete a change plan\n            deleteDialog: false,\n\n            // Id of change plan to delete\n            deleteId: null,\n\n            // Modal to inform user of change plan mode\n            changeDescriptionModal: false,\n\n            // Id of plan to edit\n            editId: null,\n\n            // Step of plan to edit\n            editStep: null,\n\n            // Name of plan to edit\n            editName: \"\",\n\n            // Conflicts\n            conflicts: null,\n        };\n\n        // Axios network request headers\n        axios.defaults.headers.common['token'] = this.props.token;\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\n    }\n\n    // When component appears on screen\n    componentDidMount() {\n        this.fetchAllChangePlans();\n    }\n\n    // Get all change plans for the user\n    fetchAllChangePlans = () => {\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_GET_PLANS), {\n            'owner': this.props.username,\n        }).then(response => {\n            var change_plans = response.data.change_plans;\n            if (change_plans !== null) {\n                this.setState({ changePlans: change_plans });\n\n                // For each change plan, grab details/actions\n                change_plans.forEach(plan => {\n                    axios.post(\n                        getURL(changePlanPath, AssetCommand.CHANGE_PLAN_GET_ACTIONS), {\n                        'change_plan_id': plan.identifier,\n                        'owner': this.props.username,\n                    }).then(response => {\n                        var details = this.state.changePlanDetails;\n                        console.log(response.data.change_plan_actions);\n                        details[plan.identifier] = response.data.change_plan_actions;\n\n                        this.setState({ changePlanDetails: details });\n                    });\n                });\n            }\n        }\n        );\n    }\n\n    closeShowStatus = () => {\n        this.setState({ showStatus: false })\n    }\n\n    // Enter change plan mode for the given change plan unique id\n    startEditing = () => {\n        this.closeDescriptionModal();\n        this.props.updateChangePlan(true, this.state.editId, this.state.editStep, this.state.editName);\n    }\n\n    // Saves the plan name\n    updatePlanName = (event) => {\n        this.setState({ planName: event.target.value });\n    }\n\n    // Change the name of the change plan with the given unique id\n    renameChangePlan = () => {\n        this.closeRenameDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_EDIT), {\n            'change_plan_id': this.state.planId,\n            'name': this.state.planName,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ planId: null, planName: \"\" });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the dialog to rename the change plan for the given unique id\n    openRenameDialog = (identifier) => {\n        this.setState({ renameDialog: true, planId: identifier });\n    }\n\n    // Close the dialog to rename the change plan\n    closeRenameDialog = () => {\n        this.setState({ renameDialog: false });\n    }\n\n    // Open the dialog to execute the change plan for the given unique id\n    openExecuteDialog = (identifier) => {\n        this.setState({ executeDialog: true, executeId: identifier });\n    }\n\n    // Close the dialog to execute the change plan\n    closeExecuteDialog = () => {\n        this.setState({ executeDialog: false });\n    }\n\n    // Execute the change plan\n    executeChangePlan = () => {\n        this.closeExecuteDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_EXECUTE), {\n            'change_plan_id': this.state.executeId,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ executeId: null });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the dialog to delete the change plan for the given unique id\n    openDeleteDialog = (identifier) => {\n        this.setState({ deleteDialog: true, deleteId: identifier });\n    }\n\n    // Close the dialog to delete the change plan\n    closeDeleteDialog = () => {\n        this.setState({ deleteDialog: false });\n    }\n\n    // Delete the change plan\n    deleteChangePlan = () => {\n        this.closeDeleteDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_DELETE), {\n            'change_plan_id': this.state.deleteId,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ deleteId: null });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the description modal\n    openDescriptionModal = (identifier, currentStep, name) => {\n        console.log(currentStep);\n        this.setState({ editId: identifier, editStep: currentStep, editName: name, changeDescriptionModal: true });\n    }\n\n    // Close the description modal\n    closeDescriptionModal = () => {\n        this.setState({ changeDescriptionModal: false });\n    }\n\n    // Concatenate network port summaries\n    reducePorts = (portList) => {\n        var result = \"\"\n\n        portList.forEach(port => {\n            if (port.connection_hostname.length > 0) {\n                result += \"Host: \" + port.connection_hostname + \" \";\n            }\n\n            if (port.connection_port.length > 0) {\n                result += \"Port: \" + port.connection_port + \" \";\n            }\n\n            if (port.mac_address.length > 0) {\n                result += \"Mac: \" + port.mac_address + \" \";\n            }\n        });\n\n        return result;\n    }\n\n    // Validate a change plan for conflicts\n    validate = (identifier) => {\n        axios.post(\n            getURL(changePlanPath, \"validateplan/\"), {\n            'change_plan_id': identifier,\n        }).then(response => {\n            console.log(response);\n            var conflicts = response.data.conflicts;\n            if (Object.keys(conflicts).length === 0) {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.conflicts[Object.keys(conflicts)[0]], statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Delete a change plan action\n    deleteAction = (identifier, step) => {\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_DELETE_ACTION), {\n            'change_plan_id': identifier,\n            'step': step,\n        }).then(response => {\n            this.fetchAllChangePlans();\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Convert keys from backend to user friendly display names\n    lookup = (key) => {\n        return {\n            \"asset_numberOriginal\": \"Asset Number\",\n            \"model\": \"Model\",\n            \"hostname\": \"Hostname\",\n            \"rack\": \"Rack\",\n            \"rack_position\": \"Rack Position\",\n            \"owner\": \"Owner\",\n            \"comment\": \"Comment\",\n            \"datacenter_name\": \"Datacenter\",\n            \"tags\": \"Tags\",\n            \"network_connections\": \"Network Connections\",\n            \"power_connections\": \"Power Connections\",\n            'asset_number': \"Asset Number\",\n        }[key];\n    }\n\n    // Close snackbar\n    closeShowStatus = () => {\n        this.setState({ statusOpen: false });\n    }\n\n    generateWorkOrder = (event, id) => {\n        axios.post(getURL(changePlanPath, \"workorder/\"), { \"change_plan_id\": id }, { responseType: 'arraybuffer' }).then(response => {\n            try {\n                var blob = new Blob([response.data], { type: \"application/pdf\" });\n                var link = document.createElement('a');\n                link.href = window.URL.createObjectURL(blob);\n                link.download = \"WorkOrder_\" + new Date() + \".pdf\";\n                link.click();\n            } catch { }\n        })\n\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <ErrorBoundray >\n                    <StatusDisplay\n                        open={this.state.statusOpen}\n                        severity={this.state.statusSeverity}\n                        closeStatus={this.closeShowStatus}\n                        message={this.state.statusMessage}\n                    />\n                    <Grid\n                        container\n                        spacing={5}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                    >\n                        <Grid item xs={12}>\n                            <Typography variant=\"h4\">\n                                Change Plans\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={5}></Grid>\n                        <Grid item xs={2}>\n                            <Typography>\n                                {this.state.changePlans.length > 0 ? \"Saved change plans\" : \"You have no change plans! Create one in the Asset tab.\"}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={5}></Grid>\n                        <Grid item xs={2}></Grid>\n                        <Grid item xs={8}>\n                            {this.state.changePlans.map(plan => {\n                                const executed = plan.executed === \"True\";\n                                const details = this.state.changePlanDetails[plan.identifier];\n                                var step = 1;\n                                if (details !== undefined) {\n                                    details.forEach(s => {\n                                        step = Math.max(step, s.step);\n                                    });\n\n                                    step = step + 1;\n                                }\n\n                                return (<ExpansionPanel key={plan.identifier}>\n                                    <ExpansionPanelSummary\n                                        expandIcon={<ExpandMoreIcon />}\n                                    >\n                                        <Typography>{plan.name}</Typography>\n                                        {executed ? <Chip size=\"small\" icon={<DoneIcon />} color=\"primary\" label={\"Executed at \" + plan.timestamp} style={{\n                                            marginLeft: \"15px\"\n                                        }} /> : null}\n                                    </ExpansionPanelSummary>\n                                    <ExpansionPanelDetails>\n                                        <Grid\n                                            container\n                                            spacing={3}\n                                            direction=\"row\"\n                                            justify=\"center\"\n                                            alignItems=\"center\"\n                                            style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                                        >\n                                            <Grid item xs={3}>\n                                                <Button\n                                                    variant=\"contained\"\n                                                    color={\"primary\"}\n                                                    style={{ width: \"100%\" }}\n                                                    onClick={(event) => this.generateWorkOrder(event, plan.identifier)}\n                                                >\n                                                    Generate work order\n                                                </Button>\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ?\n                                                    <Button\n                                                        variant=\"contained\"\n                                                        color=\"primary\"\n                                                        style={{ width: \"100%\" }}\n                                                        startIcon={<ReplayIcon />}\n                                                        onClick={() => { this.openRenameDialog(plan.identifier) }}\n                                                    >\n                                                        Rename\n                                                    </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"default\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<EditIcon />}\n                                                    onClick={() => { this.openDescriptionModal(plan.identifier, step, plan.name) }}\n                                                >\n                                                    Edit\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={12}>\n                                                {this.state.changePlanDetails[plan.identifier] !== undefined ?\n                                                    this.state.changePlanDetails[plan.identifier].map(detail => {\n                                                        var diff = detail.diff;\n\n                                                        if (Object.keys(diff).length == 0) {\n                                                            return null;\n                                                        }\n\n                                                        var isCreate = detail.action === \"create\" || detail.action === \"decommission\";\n                                                        return (<div><TableContainer component={Paper}>\n                                                            <Typography style={{ margin: \"10px\" }}>\n                                                                {detail.action.charAt(0).toUpperCase() + detail.action.slice(1)} Asset Number: {\n                                                                    detail.new_record.asset_numberOriginal === undefined ?\n                                                                        detail.new_record.asset_number : detail.new_record.asset_numberOriginal\n                                                                }\n                                                                {(!executed && detail.action !== \"collateral\") ?\n                                                                    <IconButton\n                                                                        style={{\n                                                                            marginLeft: \"20px\",\n                                                                        }}\n                                                                        onClick={() => { this.deleteAction(plan.identifier, detail.step) }}\n                                                                    >\n                                                                        <DeleteIcon />\n                                                                    </IconButton> : null}\n\n                                                            </Typography>\n\n                                                            <Table>\n                                                                <TableHead>\n                                                                    <TableRow >\n                                                                        <TableCell>Field</TableCell>\n                                                                        {isCreate ? <TableCell>Value</TableCell> : <TableCell>Current</TableCell>}\n                                                                        {isCreate ? null : <TableCell>New</TableCell>}\n                                                                    </TableRow>\n                                                                </TableHead>\n                                                                <TableBody>\n                                                                    {Object.keys(diff).map(key => {\n                                                                        if (key === \"tags\") {\n                                                                            return null;\n                                                                        }\n\n                                                                        return isCreate ?\n                                                                            (\n                                                                                <TableRow>\n                                                                                    <TableCell>{this.lookup(key)}</TableCell>\n                                                                                    <TableCell>\n                                                                                        {(key !== \"power_connections\") ? (key === \"network_connections\" ? Object.keys(diff[key]).length : diff[key]) : diff[key].length}\n                                                                                    </TableCell>\n                                                                                </TableRow>\n                                                                            ) :\n                                                                            (\n                                                                                <TableRow>\n                                                                                    <TableCell>{this.lookup(key)}</TableCell>\n                                                                                    <TableCell>{key !== \"network_connections\" ? diff[key][0] : this.reducePorts(diff[key][0])}</TableCell>\n                                                                                    <TableCell>{key !== \"network_connections\" ? diff[key][1] : this.reducePorts(diff[key][1])}</TableCell>\n                                                                                </TableRow>\n                                                                            )\n                                                                    }\n                                                                    )}\n                                                                </TableBody>\n                                                            </Table>\n                                                        </TableContainer><br /></div>);\n                                                    })\n                                                    : \"This change plan has made no changes!\"}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"default\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<CheckIcon />}\n                                                    onClick={() => { this.validate(plan.identifier) }}\n                                                >\n                                                    Validate\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<PlayArrowIcon />}\n                                                    onClick={() => { this.openExecuteDialog(plan.identifier) }}\n                                                >\n                                                    Execute\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"secondary\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<DeleteIcon />}\n                                                    onClick={() => { this.openDeleteDialog(plan.identifier) }}\n                                                >\n                                                    Delete\n                                                </Button> : null}\n                                            </Grid>\n                                        </Grid>\n\n                                    </ExpansionPanelDetails>\n                                </ExpansionPanel>);\n                            })\n                            }\n                        </Grid>\n                        <Grid item xs={2}></Grid>\n                    </Grid>\n\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.renameDialog}\n                        onClose={this.closeRenameDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.renameDialog}>\n                            <Backdrop\n                                open={this.state.renameDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                New plan name:\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}>\n                                            <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.renameChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Save\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeRenameDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.executeDialog}\n                        onClose={this.closeExecuteDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.executeDialog}>\n                            <Backdrop\n                                open={this.state.executeDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                Are you sure you want to execute this change plan?\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}></Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.executeChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Yes\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeExecuteDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.deleteDialog}\n                        onClose={this.closeDeleteDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.deleteDialog}>\n                            <Backdrop\n                                open={this.state.deleteDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                Are you sure you want to delete this change plan?\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}></Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.deleteChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Yes\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeDeleteDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.changeDescriptionModal}\n                        onClose={this.closeDescriptionModal}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.changeDescriptionModal}>\n                            <Backdrop\n                                open={this.state.changeDescriptionModal}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>\n                                                You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.startEditing}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Ok\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n\n                </ErrorBoundray>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(ChangePlansView);\n","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport ModelsView from './models/pages/ModelsView';\r\nimport UsersView from './users/pages/UsersView';\r\nimport AssetsView from './assets/pages/AssetsView';\r\nimport DatacenterManagerView from './racks/pages/DatacenterManagerView';\r\nimport StatisticsView from './statistics/pages/StatisticsView';\r\nimport LogsView from \"./logs/pages/LogsView\";\r\nimport ChangePlansView from \"./changeplans/pages/ChangePlans\";\r\n\r\nimport ErrorBoundry from './errors/ErrorBoundry';\r\n\r\nimport '../stylesheets/TabStyles.css';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    tab: {\r\n        flexGrow: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        maxWidth: \"100%\",\r\n        width: \"100%\",\r\n        margin: \"0 auto\",\r\n    }\r\n});\r\n\r\nconst currentTab = \"currentTab\";\r\n\r\nclass TabViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTabID:0,\r\n            anchorEl: null,\r\n            isMenuOpen:false,\r\n\r\n            // If change plan mode is on\r\n            changePlanActive: false,\r\n\r\n            // Unique id of current change plan\r\n            changePlanID: null,\r\n\r\n            // Current step in change plan\r\n            changePlanStep: null,\r\n\r\n            // Name of current change plan\r\n            changePlanName: \"\",\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        console.log(sessionStorage.getItem(currentTab));\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(sessionStorage.getItem(currentTab));\r\n        if (sessionStorage.getItem(currentTab) !== null) {\r\n            var tab =   parseInt(sessionStorage.getItem(currentTab));\r\n            this.setState({ currentTabID:tab });\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        sessionStorage.removeItem(currentTab);\r\n    }\r\n\r\n    handleChange(event, newValue) {\r\n        this.setState({ currentTabID: newValue });\r\n        sessionStorage.setItem(currentTab, newValue);\r\n    }\r\n\r\n    handleProfileMenuOpen = (event) => {\r\n        this.setState({ anchorEl: event.currentTarget, isMenuOpen: true });\r\n    }\r\n\r\n    handleMenuClose = () => {\r\n        this.setState({ anchorEl: null, isMenuOpen:false });\r\n    }\r\n\r\n    updateChangePlan = (status, id, step, name) => {\r\n        this.setState({ changePlanActive: status, changePlanID: id,  changePlanStep: step, changePlanName: name });\r\n\r\n        if (status === false) {\r\n            this.setState({ changePlanStep: null, changePlanName: \"\" });\r\n        }\r\n    }\r\n\r\n    incrementChangePlanStep = () => {\r\n        const currentStep = this.state.changePlanStep;\r\n\r\n        this.setState({ changePlanStep: currentStep + 1 });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <ErrorBoundry>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Hyposoft Server Management\r\n                    </Typography>\r\n                            <div>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"menu-appbar\"\r\n                                    aria-haspopup=\"true\"\r\n                                    color=\"inherit\"\r\n                                    onClick={this.handleProfileMenuOpen}\r\n                                >\r\n                                    <AccountCircle />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    anchorEl={this.state.anchorEl}\r\n                                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                                    id='primary-search-account-menu'\r\n                                    keepMounted\r\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                                    open={this.state.isMenuOpen}\r\n                                    onClose={this.handleMenuClose}\r\n                                >\r\n                                    <MenuItem>{\"Username: \" + this.props.username}</MenuItem>\r\n                                    <MenuItem onClick={this.props.logout} >LOGOUT</MenuItem>\r\n                                </Menu>\r\n                            </div>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n            <Tabs value={this.state.currentTabID} onChange={this.handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                centered\r\n            >\r\n                <Tab value={0} style={{flexGrow: 1,}} label=\"Models\"> </Tab>\r\n                <Tab value={1} style={{flexGrow: 1,}} label=\"Assets\" ></Tab>\r\n                { (this.props.privilege.asset || this.props.privilege.admin || this.props.privilege.datacenters.length > 0) ? <Tab value={6} style={{flexGrow: 1,}} label=\"Change Plans\" ></Tab> : null }\r\n                {(this.props.privilege.admin) ? <Tab value={2} style={{flexGrow: 1,}} label=\"Users\"></Tab> : null}\r\n                {(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) ? <Tab value={3} style={{flexGrow: 1,}} label=\"Sites\" /> : null}\r\n                <Tab value={4} style={{flexGrow: 1,}} label=\"Statistics\" />\r\n                {(this.props.privilege.admin || this.props.privilege.audit) ? <Tab value={5} style={{flexGrow: 1,}} label=\"Logs\" />:null}\r\n            </Tabs>\r\n            {this.state.currentTabID !== 0 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><ModelsView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 1 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} >\r\n                    <AssetsView\r\n                        token={this.props.token}\r\n                        privilege={this.props.privilege}\r\n                        username={this.props.username}\r\n                        changePlanActive={this.state.changePlanActive}\r\n                        updateChangePlan={this.updateChangePlan}\r\n                        changePlanID ={this.state.changePlanID}\r\n                        changePlanStep={this.state.changePlanStep}\r\n                        incrementChangePlanStep={this.incrementChangePlanStep}\r\n                        changePlanName={this.state.changePlanName}\r\n                    />\r\n                </Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 2 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><UsersView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 3 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><DatacenterManagerView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 4 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 4}\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><StatisticsView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 5 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 5}\r\n                id={`tab-panel-logs`}\r\n                aria-labelledby={`tab-panel-logs`}\r\n            >\r\n                <Container className={classes.tab} ><LogsView /></Container>\r\n            </Typography>}\r\n            { this.state.currentTabID !== 6 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 6}\r\n                id={`tab-panel-logs`}\r\n                aria-labelledby={`tab-panel-logs`}\r\n            >\r\n                <Container className={classes.tab} >\r\n                    <ChangePlansView\r\n                        token={this.props.token}\r\n                        privilege={this.props.privilege}\r\n                        username={this.props.username}\r\n                        updateChangePlan={this.updateChangePlan}\r\n                    />\r\n                </Container>\r\n            </Typography>}\r\n            </ErrorBoundry>\r\n        </div>);\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(TabViewer);\r\n","import React from \"react\";\r\n\r\nimport axios from 'axios';\r\n\r\nimport Login from \"./Login\";\r\nimport TabViewer from \"./Tabs\";\r\nimport getURL from './helpers/functions/GetURL';\r\nimport * as Constants from \"./Constants\";\r\nimport ErrorBoundary from \"./errors/ErrorBoundry\";\r\n\r\nconst storedToken = 'token';\r\nconst storedPrivilege = 'privilege';\r\nconst storedLoggedIn = 'loggedIn';\r\nconst storedUsername = 'username';\r\n\r\nexport default class PageSelector extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\ttoken: sessionStorage.getItem(storedToken) || '',\r\n\t\t\tprivilege: sessionStorage.getItem(storedPrivilege) || '',\r\n\t\t\tloggedIn: sessionStorage.getItem(storedLoggedIn) || '',\r\n\t\t\tusername: sessionStorage.getItem(storedUsername) || '',\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\taxios.defaults.headers.common['token'] = this.state.token;\r\n\t\taxios.defaults.headers.common['privilege'] = this.state.privilege;\r\n\t}\r\n\r\n\tlogin = (token, username, privilege) => {\r\n\t\tconsole.log(privilege);\r\n\t\tsessionStorage.setItem(storedToken, token);\r\n\t\tsessionStorage.setItem(storedPrivilege, JSON.stringify(privilege));\r\n\t\tsessionStorage.setItem(storedLoggedIn, true);\r\n\t\tsessionStorage.setItem(storedUsername, username);\r\n\r\n\t\taxios.defaults.headers.common['token'] = token;\r\n\t\taxios.defaults.headers.common['privilege'] = privilege;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: token,\r\n\t\t\tprivilege: privilege,\r\n\t\t\tloggedIn: true,\r\n\t\t\tusername: username,\r\n\t\t});\r\n\r\n\t\twindow.history.replaceState({}, \"Hyposoft Asset Management\", \"/\")\r\n\t}\r\n\r\n\tloginWithOAuth = (token, username, privilege) => {\r\n\r\n\t\tsessionStorage.setItem(storedToken, token);\r\n\t\tsessionStorage.setItem(storedPrivilege, privilege);\r\n\t\tsessionStorage.setItem(storedLoggedIn, true);\r\n\t\tsessionStorage.setItem(storedUsername, username);\r\n\r\n\t\taxios.defaults.headers.common['token'] = token;\r\n\t\taxios.defaults.headers.common['privilege'] = privilege;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: token,\r\n\t\t\tprivilege: privilege,\r\n\t\t\tloggedIn: true,\r\n\t\t\tusername: username,\r\n\t\t}, () => { window.history.replaceState({}, \"Hyposoft Asset Management\", \"/\") });\r\n\t}\r\n\r\n\tlogout = () => {\r\n\t\taxios.get(getURL('users/', 'logout'));\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: '',\r\n\t\t\tprivilege: '',\r\n\t\t\tloggedIn: false,\r\n\t\t\tusername: '',\r\n\t\t});\r\n\r\n\t\tsessionStorage.removeItem(storedToken);\r\n\t\tsessionStorage.removeItem(storedPrivilege);\r\n\t\tsessionStorage.removeItem(storedLoggedIn);\r\n\t\tsessionStorage.removeItem(storedUsername);\r\n\r\n\t\twindow.history.replaceState({}, \"Hyposoft Asset Management\", \"/\")\r\n\t\tconsole.log(window.location.href);\r\n\t\tconsole.log(Constants.SHIB_REDIRECT_URI);\r\n\t\t//window.location = Constants.SHIB_REDIRECT_URI;\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tvar privilege = \"\";\r\n\t\ttry {\r\n\t\t\tprivilege = JSON.parse(this.state.privilege);\r\n\t\t} catch {\r\n\t\t\tprivilege = this.state.privilege;\r\n\t\t}\r\n\t\tconsole.log(\"privilege: \");\r\n\t\tconsole.log(privilege);\r\n\r\n\t\treturn (\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.state.loggedIn ?\r\n\t\t\t\t\t\t<TabViewer\r\n\t\t\t\t\t\t\ttoken={this.state.token}\r\n\t\t\t\t\t\t\tusername={this.state.username}\r\n\t\t\t\t\t\t\tprivilege={privilege}\r\n\t\t\t\t\t\t\tlogout={this.logout}\r\n\t\t\t\t\t\t/> :\r\n\t\t\t\t\t\t<Login\r\n\t\t\t\t\t\t\tloginFunc={this.login}\r\n\t\t\t\t\t\t\tshib={this.props.redirected}\r\n\t\t\t\t\t\t\tloginFuncOAuth={this.loginWithOAuth}\r\n\t\t\t\t\t\t/>}\r\n\t\t\t\t</div>\r\n\t\t\t</ErrorBoundary>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport PageSelector from './javascript/PageSelector';\n\nReactDOM.render(<PageSelector redirected={document.referrer}/>, document.getElementById('root'));\n"],"sourceRoot":""}
