{"version":3,"sources":["images/logo.png","javascript/Constants.jsx","javascript/enums/privilegeTypes.ts","javascript/helpers/functions/GetURL.jsx","javascript/models/enums/ModelCommands.ts","javascript/models/enums/ModelInputs.ts","javascript/helpers/StatusDisplay.jsx","javascript/ShibLogin.jsx","javascript/Login.jsx","javascript/models/helpers/ExportModel.jsx","javascript/models/helpers/FilterModel.jsx","javascript/models/helpers/CreateModel.jsx","javascript/models/ModelConstants.jsx","javascript/models/helpers/ModelsTable.jsx","javascript/users/enums/UserCommands.ts","javascript/models/pages/ModelsView.jsx","javascript/users/helpers/functions/PrivilegePicker.jsx","javascript/users/enums/PrivilegeCommands.ts","javascript/users/helpers/FilterUser.jsx","javascript/users/helpers/CreateUser.jsx","javascript/users/helpers/UsersTable.jsx","javascript/users/UserConstants.jsx","javascript/users/pages/UsersView.jsx","javascript/assets/enums/AssetInputs.ts","javascript/assets/enums/AssetCommands.ts","javascript/users/helpers/functions/MakeCreateJSON.jsx","javascript/users/helpers/functions/MakeEditJSON.jsx","javascript/users/helpers/functions/MakeDeleteJSON.jsx","javascript/users/helpers/functions/MakeDetailViewJSON.jsx","javascript/assets/AssetConstants.jsx","javascript/assets/helpers/NetworkGraph.jsx","javascript/assets/helpers/functions/StringToMacAddress.jsx","javascript/assets/helpers/EditAsset.jsx","javascript/assets/helpers/DetailsAsset.jsx","javascript/assets/helpers/FilterAsset.jsx","javascript/helpers/functions/DescendingComparator.jsx","javascript/assets/helpers/CreateAsset.jsx","javascript/assets/helpers/ImportAsset.jsx","javascript/assets/helpers/AddAsset.jsx","javascript/assets/helpers/ExportAsset.jsx","javascript/assets/helpers/TableAssets.jsx","javascript/racks/enums/DatacenterCommands.ts","javascript/helpers/functions/GetComparator.jsx","javascript/helpers/functions/StableSort.jsx","javascript/errors/ErrorBoundry.jsx","javascript/assets/pages/AssetsView.jsx","javascript/racks/helpers/CreateDatacenter.jsx","javascript/racks/helpers/EditDatacenter.jsx","javascript/racks/pages/RacksView.jsx","javascript/racks/enums/RackCommands.ts","javascript/racks/helpers/functions/ShowDatacenters.jsx","javascript/racks/helpers/ConfirmDeleteDC.jsx","javascript/racks/helpers/RackDiagrams.jsx","javascript/racks/pages/DatacentersView.jsx","javascript/statistics/enums/StatsCommands.ts","javascript/racks/pages/DatacenterManagerView.jsx","javascript/helpers/functions/JSONtoArr.jsx","javascript/logs/enums/LogCommands.ts","javascript/statistics/pages/StatisticsView.jsx","javascript/logs/pages/LogsView.jsx","javascript/changeplans/pages/ChangePlans.jsx","javascript/Tabs.jsx","javascript/PageSelector.jsx","index.jsx"],"names":["module","exports","serverEndpoint","RackX","ASSETS_MAIN_PATH","MODELS_MAIN_PATH","USERS_MAIN_PATH","RACKS_MAIN_PATH","DATACENTERS_MAIN_PATH","LOGS_MAIN_PATH","PERMISSIONS_MAIN_PATH","DECOMMISSIONS_MAIN_PATH","CLIENT_ID","SHIB_REDIRECT_URI","window","location","href","Privilege","SHIBBOLETH_LOGIN","encodeURIComponent","HTTPS_STATUS_OK","getURL","path","endpoint","Constants","ModelCommand","ModelInput","StatusDisplay","props","state","Snackbar","open","this","autoHideDuration","onClose","closeStatus","elevation","variant","severity","message","IconButton","aria-label","color","size","onClick","fontSize","React","Component","ShibLogin","username","password","statusMessage","showStatus","statusSeverity","Grid","container","spacing","direction","justify","alignItems","onKeyDown","e","onKeyPressed","style","item","xs","src","logo","alt","height","Card","minWidth","CardContent","Typography","fontWeight","gutterBottom","closeShowStatus","loginMainPath","queryString","require","Login","getDukeCredentials","token","axios","get","headers","then","response","post","data","netid","mail","displayName","status","setState","initialized","oauth","loginFuncOAuth","loginWithOAuth","bind","submitCredentials","params","parse","hash","substring","access_token","console","log","loginFunc","event","target","value","key","preventDefault","stopPropagation","TextField","id","label","required","ref","onChange","updateUsername","type","updatePassword","Button","direciton","width","ExportModel","Paper","minHeight","padding","downloadTable","startIcon","showAll","createInputs","name","inputs","FilterModel","filters","hasOwnProperty","newFilters","forceUpdate","search","sm","md","lg","Autocomplete","options","includeInputInList","freeSolo","renderInput","vendor","updateSearchText","onBlur","fullWidth","InputProps","inputProps","min","max","defaultColor","CreateModel","updateColor","updateModelColor","hex","showModal","showImportModal","closeModal","networkPorts","numPorts","mountType","closeImportModal","create","undefined","createModel","uploadFile","FormData","append","importedFile","sendUploadedFile","chooseFile","files","updateNetworkPorts","ports","i","push","toString","updateModelCreator","updatePort","port","updateMountType","classes","background","Modal","aria-labelledby","aria-describedby","className","modal","closeAfterTransition","Fade","in","Backdrop","grid","onSubmit","modelNumber","InputLabel","Select","labelId","MenuItem","ethernetPorts","powerPorts","cpu","memory","storage","rowsMax","multiline","comment","List","root","subheader","ListSubheader","component","maxHeight","overflow","Array","from","length","x","map","_","index","ListItem","role","dense","button","ListItemText","primary","defaultValue","accept","withStyles","theme","flexGrow","display","justifyContent","backgroundColor","palette","paper","boxShadow","shadows","progress","marginLeft","GENERAL_MODEL_ERROR","modelsMainPath","UserCommand","mountTypeLookup","ModelsTable","oldDetails","detailedValues","display_color","showDetailedView","row","detailViewLoading","detailViewModel","modelNum","detailView","model","originalVendor","originalModelNumber","originalHeight","catch","error","ModelConstants","closeDetailedView","showDeleteModal","closeDeleteModal","delete","deleteModel","edit","editModel","clickInfo","popoverAnchor","clickComment","commentPopover","handlePopoverClose","handleCommentPopoverClose","updateModelEdited","save","defaults","common","privilege","TableContainer","Table","TableHead","TableRow","columns","col","TableCell","align","TableBody","vals","hover","admin","scope","keys","margin","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","CircularProgress","model_number","mount_type","ethernet_ports","power_ports","adminColumns","columnLookup","ModelsView","createdModel","Vendor","Height","CPU","Memory","Storage","Comment","showCreateModal","getVendorList","searchModels","createshowStatus","originalModelNum","detailshowStatus","detailStatusMessage","detailStatusSeverity","viewVendor","viewModel","filter","searchVendor","searchModelNum","searchMountType","searchMinHeight","searchMaxHeight","searchMinNetworkPorts","searchMaxNetworkPorts","searchMinPower","searchMaxPower","searchCPU","searchMinMem","searchMaxMem","searchStore","searchComment","models","rows","Object","values","forEach","includes","parseInt","items","searchText","VENDOR_VALUES","vendorsList","results","madeVendorQuery","UPLOAD_FILE","summary","EXPORT_FILE","searchHeight","csvData","csvLink","link","click","searchAll","openCreateModal","openImportModal","closeCreateModal","updateModelColorDetails","reason","createStatusClose","detailStatusClose","createdVendor","createdModelNum","createdMountType","createdHeight","createdDispClr","createdEthPorts","createdPwrPorts","createdCPU","createdMem","createdStorage","createdComments","deleteVendor","maxWidth","statusClose","useAutocomplete","filename","r","PrivilegePicker","generalPrivileges","title","defaultPrivs","defaultDCs","defaultPrivileges","asset","audit","power","datacenters","multiple","getOptionLabel","option","updatePrivilege","loading","dcPrivileges","updateDCPrivilege","PrivilegeCommand","Filters","resetCreate","success","display_name","email","searchUsers","updateprivilege","privs","priv","privileges","CreateModal","selectedPrivileges","updateSelectedPrivileges","UsersTable","beginEditing","canEdit","originalUsername","Username","Email","endEditing","USER_SUCCESS_TOKEN","USER_FAILURE_TOKEN","USER_CREATION_SUCCESS_MESSAGE","USER_EDIT_SUCCESS_MESSAGE","USER_EDIT_FAILURE_MESSAGE","USER_DELETE_SUCCESS_MESSAGE","USER_DELETE_FAILURE_MESSAGE","AssetInput","AssetCommand","blankSearch","UsersView","createUser","completion","makeCreateJSON","UserConstants","setDisplayStatus","editUser","makeEditJSON","processResponse","deleteUser","makeDeleteJSON","detailViewUser","makeDetailViewJSON","getPrivileges","GET_PRIVILEGES","allDCPrivileges","loadingPrivileges","statusOpen","updateUserEdited","newDetails","successMessage","failureMessage","searchUsernm","searchEml","searchDspNm","searchPriv","deleteUsername","viewUser","updateUserCreator","updateEditUser","CHANGE_PLAN_PATH","SUCCESS_TOKEN","ERROR_TOKEN","getGraph","primaryHosts","host","hostnameMapping","nodes","edges","primaryHostID","entries","primaryHost","secondaryHosts","to","secondaryHostID","secondaryHost","Exception","NetworkGraph","graph","GET_NETWORK_NEIGHBORHOOD","assetNum","layout","hierarchical","interaction","dragNodes","dragView","events","select","div","isDecommissioned","decomAsset","network_neighborhood","getNetwork","network","document","getElementById","stringToMac","val","returnVal","replace","toLowerCase","showTooltip","description","emptySearch","searchPath","left","right","EditAsset","forwardRef","Slide","getPowerFromProps","pwrCons","pwr","pwrCon","getPowerPortFromProps","pwrPorts","getLists","getModelList","getOwnerList","getDatacenterList","getAssetList","getChassisList","instances","instanceNames","instance","hostname","chassisList","modelNames","networkNames","powerPortNames","modelKey","loadingModels","modelList","networkList","powerPortList","mountTypes","users","user","loadingOwners","ownerList","datacenter","abbreviation","loadingDatacenters","datacenterList","hostnames","hostToModel","loadingHostnames","assetNumList","assetNumToModelList","availableNetworkConnections","editAsset","json","createJSON","changePlanJSON","changePlanID","changePlanStep","defaultValues","asset_number","url","changePlanActive","AssetConstants","CHANGE_PLAN_CREATE_ACTION","incrementChangePlanStep","updateModel","networkConns","network_connections","updateBladeChassis","blade_chassis","updateBladePosition","blade_position","updateHostname","updateRack","rackVal","rack","updateRackU","rackU","updateOwner","owner","updateComment","updateDatacenter","isOffline","dc","is_offline_storage","datacenter_name","datacenterIsOffline","updateTags","tags","changeNetworkMacAddress","prevState","assign","mac_address","changeNetworkHostname","connection_hostname","getPortOptions","changeNetworkPort","connection_port","updatePowerPort","power_connections","changePowerPortState","portNum","leftRight","updateAssetNumber","getPowerConnections","pwrConns","num","split","customColor","customCPU","customMemory","customStorage","availableNetworks","networList","availableConnections","fetchAllAssets","portOptions","getModel","displayNetworks","getNetworkConnections","getMacValue","netCons","getConnectingHostname","getConnectionPort","connectionsDisabled","deleteAsset","showConfirmationBox","close","decommissionAsset","DECOMMISSION","openConfirmationBox","closeConfirmationBox","cancelUpgrades","customizeModel","display_colorOriginal","cpuOriginal","memoryOriginal","storageOriginal","restoreDefaults","loadingAssetNumber","selectedConnection","powerPortState","canSubmit","updated","MODEL","HOSTNAME","RACK","RACK_U","OWNER","COMMENT","DATACENTER","MAC_ADDRESS","NETWORK_CONNECTIONS","POWER_CONNECTIONS","ASSET_NUMBER","BLADE_CHASSIS","BLADE_POSITION","rack_position","chassis_hostname","chassis_slot","decommission_user","timestamp","form","dialogDiv","Tooltip","placement","disabled","bladeChassis","buttons","networkPort","macAddress","networkConnections","k","FormControl","RadioGroup","FormControlLabel","control","Radio","labelPlacement","Alert","action","BackdropComponent","BackdropProps","timeout","border","appBar","position","flex","Transition","DetailAsset","closeDetailView","toggleDetails","detailsExpanded","networkNodes","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","edge","AlertTitle","changePlanName","FilterAsset","updateStartingLetter","startingLetter","updateEndingLetter","endingLetter","updateStartingNum","startingNum","updateEndingNum","endingNum","updateStartDate","startDate","updateEndDate","endDate","updateUser","assetType","decAssets","Date","decDate","allAssets","offline","updateItems","switchAssetType","Fragment","FormHelperText","InputLabelProps","shrink","descendingComparator","a","b","orderBy","CreateAsset","getNextAssetNum","originalModels","GET_NEXT_ASSET_NUM","validJSON","createAsset","validateForm","firstFree","free_left","pwrLst","powerPort","exception","currModel","next_pair","free_right","onSelect","ImportAsset","setFile","file","closeImport","showImport","AddAsset","openImport","openConnectionsImport","showConnectionsImport","closeConnectionsImport","openCreate","showCreate","closeCreate","ExportAsset","componentDidMount","canCreateChangePlans","openChangePlanModal","changePlanModal","closeChangePlanModal","updatePlanName","beginChangePlan","changeDescriptionModal","CHANGE_PLAN_CREATE","updateChangePlan","change_plan","closeDescriptionModal","decomType","createData","DatacenterCommand","headCells","numeric","decommissionHeadCells","TableAsset","CHANGE_PLAN_GET_ACTIONS","actions","change_plan_actions","assetNums","asset_numberOriginal","newInstances","new_record","getRack","tableItems","getDecommissionedAssets","body","originalRack","originalrack_position","generateLabels","selectedItems","GENERATE_LABELS","responseType","blob","Blob","createElement","URL","createObjectURL","download","createSortHandler","property","isAsc","order","openDetailedView","dAsset","assets","offlineAssets","currAsset","detailAsset","rowOwner","result","decommissions","showStatusBar","onSelectAllClick","newSelected","n","indexOf","concat","deselectAllClick","selectedIndex","slice","addCheckedItem","getAttribute","openSpeedDial","speedDialOpen","closeSpeedDial","exitChangePlan","current","allSelected","detailStatusOpen","deleteAssetRack","deleteAssetrack_position","detailHostname","createRef","elem","marginTop","table","styledTableRow","headCell","tableCellHead","sortDirection","TableSortLabel","active","visuallyHidden","array","comparator","stabilizedThis","el","sort","stableSort","aria-checked","selected","tabIndex","Checkbox","checked","showDecommissioned","SpeedDial","ariaLabel","bottom","hidden","icon","onOpen","SpeedDialAction","tooltipTitle","paddingLeft","paddingRight","styledTableCell","marginBottom","clip","top","ErrorBoundary","hasError","errorInfo","children","AssetsView","offlineStorageVal","datacenterVal","CreateDatacenter","generateCreateJSON","datacenterAbbreviation","datacenterName","siteType","createDatacenter","CREATE","updateDatacenterName","updateDatacenterAbbrevation","getAbbreviation","selectSiteType","selectDatacenter","scroll","column","EditDatacenter","generateEditJSON","dcName","dcAbbrev","editDatacenter","EDIT","show","MinusSquare","SvgIcon","d","PlusSquare","useSpring","opacity","transform","Collapse","RackCommand","StyledTreeItem","iconContainer","group","borderLeft","fade","text","TreeItem","RacksView","handleFormat","newFormats","formats","sortRacks","rack1","rack2","substr","deleteRack","firstRack","secondRack","racksList","racks","f","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","nodeId","heading","typography","pxToRem","fontWeightRegular","ShowDatacenters","useState","rackType","setRackType","setRack1","setRack2","datacentersList","selectedDatacenter","isOfflineStorage","ToggleButtonGroup","exclusive","newType","ToggleButton","updateRacks","CREATE_RACKS","DELETE_RACKS","ConfirmDeteleDC","deleteDatacenter","RackDiagrams","openAssetDetails","rackTitle","textColor","footer","getRacks","racksMainPath","createRackElem","sortRack","sortAssets","StatsCommand","DatacenterView","getDatacenters","loadingDCList","GET_ALL_DATACENTERS","fullDatacenter","currentDatacenter","DELETE","openEditDatacenter","datacenterAbbrev","editDCName","editDCAbbr","showEditDC","closeEditDatacenter","command","GET_RACK_DETAILS","win","focus","getChassisData","createDiagram","startL","stopL","startN","stopN","rackPos","assetHeight","Math","floor","createRack","closeEditDatacneter","DatacenterManagerView","uesername","jsonToArr","incomingJSON","JSON","constructor","LogCommand","statsMainPath","tables","tableCols","StatisticsView","generateReport","generatingReport","GENERATE_REPORT","totalUsage","totalUsageRow","spaceUsage","JSONtoArr","vendorUsage","modelUsage","ownerUsage","tableValues","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","isNaN","typeKey","timestampKey","LogsView","getLogs","GET_LOGS","parseLog","logs","makeTableData","logItems","filteredLogs","allLogs","filterUser","filterAsset","filteredItems","entry","hasAsset","hasUser","match","request","updateFilterUser","updateFilterAsset","searchbar","placeholder","logItem","aligh","changePlanPath","ChangePlansView","fetchAllChangePlans","CHANGE_PLAN_GET_PLANS","change_plans","changePlans","plan","identifier","details","changePlanDetails","startEditing","editId","editStep","editName","planName","renameChangePlan","closeRenameDialog","CHANGE_PLAN_EDIT","planId","openRenameDialog","renameDialog","openExecuteDialog","executeDialog","executeId","closeExecuteDialog","executeChangePlan","CHANGE_PLAN_EXECUTE","openDeleteDialog","deleteDialog","deleteId","closeDeleteDialog","deleteChangePlan","CHANGE_PLAN_DELETE","openDescriptionModal","currentStep","closeDescription","descriptionModal","reducePorts","portList","validate","conflicts","deleteAction","step","CHANGE_PLAN_DELETE_ACTION","lookup","createChangePlan","generateWorkOrder","executed","s","Chip","detail","diff","isCreate","charAt","toUpperCase","currentTab","TabViewer","handleProfileMenuOpen","currentTarget","isMenuOpen","handleMenuClose","currentTabID","handleChange","sessionStorage","getItem","tab","removeItem","newValue","setItem","aria-controls","aria-haspopup","Menu","keepMounted","logout","Tabs","indicatorColor","centered","Tab","Container","ChangePlans","menuButton","marginRight","storedToken","storedPrivilege","storedLoggedIn","storedUsername","PageSelector","login","stringify","loggedIn","history","replaceState","shib","redirected","ReactDOM","render","referrer"],"mappings":"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","file":"static/js/main.9ca3fb99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.df79d0ea.png\";","/**\r\n * Constants file\r\n */\r\n\r\nexport const localServerEndpoint = 'http://localhost:4010/';\r\nexport const testServerEndpoint = 'https://parseltongue-finishinge-lfw68m.herokuapp.com/';\r\nexport const devServerEndpoint = 'https://parseltongue-dev.herokuapp.com/';\r\nexport const prodServerEndpoint = 'https://parseltongue-prod.herokuapp.com/';\r\n\r\nexport const serverEndpoint = localServerEndpoint;\r\n\r\n\r\nexport const RackX = [\r\n    'A', 'B', 'C', 'D', 'E',\r\n    'F', 'G', 'H', 'I', 'J',\r\n    'K', 'L', 'M', 'N', 'O',\r\n    'P', 'Q', 'R', 'S', 'T',\r\n    'W', 'X', 'Y', 'Z',\r\n]\r\n\r\nexport const ASSETS_MAIN_PATH = 'instances/';\r\nexport const MODELS_MAIN_PATH = \"models/\";\r\nexport const USERS_MAIN_PATH = \"users/\";\r\nexport const RACKS_MAIN_PATH = \"racks/\";\r\nexport const DATACENTERS_MAIN_PATH = \"datacenters/\";\r\nexport const LOGS_MAIN_PATH = \"logs/\"\r\nexport const PERMISSIONS_MAIN_PATH = \"permissions/\";\r\nexport const DECOMMISSIONS_MAIN_PATH = \"decommissions/\";\r\n\r\nexport const CLIENT_ID = \"ParselTonguesUserAuth\";\r\nexport const CLIENT_SECRET = \"LpUwB*eiK4Iw#1gaCu5jYp1u5uRF3ERsdmuNUGoKYNzn7rHm7b\";\r\nexport const SCOPE = \"basic\";\r\n\r\nexport var SHIB_REDIRECT_URI = \"\";\r\n\r\nif (window.location.href === \"http://localhost:3000\" || window.location.href === \"http://localhost:3000/\") {\r\n    SHIB_REDIRECT_URI = window.location.href;\r\n} else {\r\n    SHIB_REDIRECT_URI = serverEndpoint;\r\n}\r\n\r\nexport const SHIBBOLETH_LOGIN =\r\n    \"https://oauth.oit.duke.edu/oauth/authorize.php?\"\r\n     + \"client_id=\" + encodeURIComponent(CLIENT_ID)\r\n     + \"&client_secret=\" + encodeURIComponent(CLIENT_SECRET)\r\n     + \"&redirect_uri=\" + encodeURIComponent(SHIB_REDIRECT_URI)\r\n     + \"&response_type=token\"\r\n     + \"&state=1129\"\r\n     + \"&scope=\" + encodeURIComponent(SCOPE);\r\n\r\nexport const HTTPS_STATUS_OK = 200;\r\n","export enum Privilege  {\r\n    ADMIN = \"admin\",\r\n    USER = \"user\",\r\n};\r\n","import * as Constants from '../../Constants';\r\n\r\nexport default function getURL(path, endpoint) {\r\n    return Constants.serverEndpoint + path + endpoint;\r\n}\r\n","export enum ModelCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search = 'search/',\r\n    VENDOR_VALUES = 'assistedvendor/',\r\n    UPLOAD_FILE = 'import/',\r\n    EXPORT_FILE = 'export/'\r\n}\r\n","export enum ModelInput {\r\n    Vendor = 'vendor',\r\n    model_number = 'model_number',\r\n    mount_type = 'mount_type',\r\n    Height = 'height',\r\n    display_color = 'display_color',\r\n    ethernet_ports = 'ethernet_ports',\r\n    power_ports = 'power_ports',\r\n    CPU = 'cpu',\r\n    Memory = 'memory',\r\n    Storage = 'storage',\r\n    Comment = 'comment'\r\n}\r\n","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\nexport default class StatusDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Snackbar open={this.props.open} autoHideDuration={4000} onClose={this.props.closeStatus}>\r\n                    <MuiAlert elevation={6} variant=\"filled\"\r\n                        severity={this.props.severity}\r\n                    >\r\n                        <div>\r\n                        {this.props.message}\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={this.props.closeStatus}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                        </div>\r\n                    </MuiAlert >\r\n                </Snackbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport StatusDisplay from './helpers/StatusDisplay';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from '../images/logo.png';\r\n\r\n\r\n\r\nexport default class ShibLogin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username:'',\r\n            password:'',\r\n            statusMessage:'',\r\n            showStatus:false,\r\n            statusSeverity:'info',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid\r\n                container\r\n                spacing={5}\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n                onKeyDown={(e) => this.onKeyPressed(e)}\r\n                style={{\r\n                    \"minHeight\": \"102vh\",\r\n                    \"background\": \"linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                }}\r\n            >\r\n                <Grid item xs={12}>\r\n                    <img src={logo} alt=\"\" style={{height: \"200px\", \"marginTop\": \"50px\"}} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Card\r\n                        style={\r\n                            {\r\n                                minWidth: '20vw',\r\n                            }\r\n                        }\r\n                    >\r\n                        <CardContent>\r\n                            <Grid\r\n                                container\r\n                                spacing={1}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid container item alignItems=\"flex-start\" xs={12}>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        color=\"textPrimary\"\r\n                                        fontWeight=\"fontWeightBold\"\r\n                                        gutterBottom\r\n                                    >\r\n                                        Please wait while we log you in...\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <StatusDisplay\r\n                        open={this.state.showStatus}\r\n                        severity={this.state.statusSeverity}\r\n                        closeStatus={this.closeShowStatus}\r\n                        message={this.state.statusMessage}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Grid, Button, TextField, Card, CardContent, Typography } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport getURL from './helpers/functions/GetURL';\r\nimport { Privilege } from './enums/privilegeTypes.ts'\r\nimport StatusDisplay from './helpers/StatusDisplay';\r\nimport logo from '../images/logo.png';\r\nimport ShibLogin from './ShibLogin';\r\nimport * as Constants from \"./Constants\";\r\n\r\nconst loginMainPath = 'users/';\r\nconst queryString = require('query-string');\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // Login info\r\n            username:'',\r\n            password:'',\r\n\r\n            // Snackbar\r\n            statusMessage: '',\r\n            showStatus: false,\r\n            statusSeverity: 'info',\r\n\r\n            // If view has been initialized\r\n            initialized: false,\r\n\r\n            // OAuth NetID login\r\n            oauth: false,\r\n        };\r\n\r\n        this.closeShowStatus = this.closeShowStatus.bind(this);\r\n        this.submitCredentials = this.submitCredentials.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            var params = queryString.parse(window.location.hash.substring(1));\r\n            if (params.access_token != null) {\r\n                this.getDukeCredentials(params.access_token);\r\n                this.setState({ oauth: true });\r\n            }\r\n        } catch(e) {\r\n            console.log(\"tried:\")\r\n        }\r\n\r\n        this.setState({ initialized: true });\r\n    }\r\n\r\n    // Login and send credentials to backend\r\n    submitCredentials() {\r\n        axios.post(\r\n            getURL(loginMainPath, 'authenticate'), {\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n            }).then(response => {\r\n                const message = response.data['message'];\r\n                if (message === 'success') {\r\n                    this.setState({ message: '' });\r\n                    console.log(response);\r\n                    this.props.loginFunc(response.data['token'], this.state.username, response.data['privilege']);\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: message });\r\n                }\r\n            });\r\n        //this.props.loginFunc('token', \"Administrator\", Privilege.ADMIN);\r\n    }\r\n\r\n    // Set the username\r\n    updateUsername(event) {\r\n        this.setState({ username: event.target.value })\r\n    }\r\n\r\n    // Set the password\r\n    updatePassword(event) {\r\n        this.setState({ password: event.target.value })\r\n    }\r\n\r\n    // Close snackbar\r\n    closeShowStatus() {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    // Fired when key is pressed, login on enter\r\n    onKeyPressed(event) {\r\n        if (event.key === 'Enter') {\r\n            // Intercept key event\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            // Login\r\n            this.submitCredentials();\r\n        }\r\n    }\r\n\r\n    // Get Duke info from colab API\r\n    getDukeCredentials = (token) => {\r\n        axios.get('https://api.colab.duke.edu/identity/v1/', {\r\n            headers: {\r\n                'x-api-key': Constants.CLIENT_ID,\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then(response => {\r\n            axios.post(\r\n                getURL(loginMainPath, 'oauth'), {\r\n                    \"username\": response.data.netid,\r\n                    \"email\": response.data.mail,\r\n                    \"display_name\": response.data.displayName,\r\n                    \"client_id\": Constants.CLIENT_ID,\r\n                    \"token\": token,\r\n                }).then(response => {\r\n                    const message = response.data['message'];\r\n                    if (response.status === Constants.HTTPS_STATUS_OK) {\r\n                        this.setState({\r\n                            username: '',\r\n                            password: '',\r\n\r\n                            statusMessage: '',\r\n                            showStatus: false,\r\n                            statusSeverity:' info',\r\n\r\n                            initialized: false,\r\n\r\n                            oauth:false,\r\n                         });\r\n\r\n                        this.props.loginFuncOAuth(response.data['token'], response.data.username, response.data['privilege']);\r\n                    } else {\r\n                        this.setState({ showStatus: true, statusMessage: message });\r\n                    }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Redirect to shibboleth login\r\n    loginWithOAuth = () => {\r\n        window.location = Constants.SHIBBOLETH_LOGIN;\r\n    }\r\n\r\n    // Render view\r\n    render() {\r\n        return (\r\n            <div>\r\n                { (this.state.oauth) ? <ShibLogin /> :\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    onKeyDown={(e) => this.onKeyPressed(e)}\r\n                    style={{\r\n                        \"minHeight\": \"102vh\",\r\n                        \"background\": \"#56ab2f\",\r\n                        \"background\": \"-webkit-linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                        \"background\": \"linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                    }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <img src={logo} style={{ height: \"200px\", \"marginTop\": \"50px\" }} alt=\"Hyposoft\" />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Card style={{ minWidth: '20vw' }}>\r\n                            <CardContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={1}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                >\r\n                                    <Grid container item alignItems=\"flex-start\" xs={12}>\r\n                                        <Typography\r\n                                            variant=\"h4\"\r\n                                            color=\"textPrimary\"\r\n                                            fontWeight=\"fontWeightBold\"\r\n                                            gutterBottom\r\n                                        >\r\n                                            Login\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"username-input\"\r\n                                            label=\"Username\"\r\n                                            variant=\"outlined\"\r\n                                            required={true}\r\n                                            ref='username'\r\n                                            onChange={this.updateUsername.bind(this)}\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"password-input\"\r\n                                            label=\"Password\"\r\n                                            variant=\"outlined\"\r\n                                            required={true}\r\n                                            ref='password'\r\n                                            type=\"password\"\r\n                                            onChange={this.updatePassword.bind(this)}\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button\r\n                                            onClick={this.submitCredentials}\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        >\r\n                                            Sign In\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                            <hr style={{width: \"5vw\"}} />\r\n                                            <Typography color=\"textSecondary\">\r\n                                                Or\r\n                                            </Typography>\r\n                                            <hr style={{width: \"5vw\"}} />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button\r\n                                            onClick={this.loginWithOAuth}\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                        >\r\n                                            Sign In with NetID\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <StatusDisplay\r\n                            open={this.state.showStatus}\r\n                            severity={this.state.statusSeverity}\r\n                            closeStatus={this.closeShowStatus}\r\n                            message={this.state.statusMessage}\r\n                        />\r\n                    </Grid>\r\n                </Grid>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\n\nexport default class ExportModel extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\n                <Grid\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                    style={{ padding: \"10px\" }}\n                >\n                    <Grid item xs={12}>\n                        <Typography variant=\"h6\">Export</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography>Download what is currently shown in the table.</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.props.downloadTable}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            startIcon={<CloudDownloadIcon />}\n                            style={{\n                                width: \"100%\"\n                            }}\n                        >\n                            Export\n                        </Button>\n                    </Grid>\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\n                        <hr style={{width: \"5vw\"}} />\n                        <Typography color=\"textSecondary\">\n                            Or\n                        </Typography>\n                        <hr style={{width: \"5vw\"}} />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.props.showAll}\n                            variant=\"contained\"\n                            color=\"default\"\n                            style={{\n                                width: \"100%\"\n                            }}\n                        >\n                            Show all models\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            </div>\n        );\n    }\n}\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nfunction createInputs(name, label) {\r\n    return {label, name};\r\n}\r\n\r\nconst inputs = {\r\n    \"vendor\": createInputs('vendor', \"Vendor\"),\r\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\r\n    \"height\": createInputs('height', \"Height\"),\r\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\r\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\r\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\r\n    \"cpu\": createInputs('cpu', \"CPU\"),\r\n    \"memory\": createInputs('memory', \"Memory\"),\r\n    \"storage\": createInputs('storage', \"Storage\"),\r\n    \"comments\": createInputs('comments', \"Comments\"),\r\n}\r\n\r\nexport default class FilterModel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filters: {},\r\n        };\r\n    }\r\n\r\n    updateSearchText(event) {\r\n        if (this.state.filters.hasOwnProperty(event.target.id)) {\r\n            const newFilters = this.state.filters;\r\n            newFilters[event.target.id] = event.target.value;\r\n            this.setState({ filters: newFilters });\r\n            this.forceUpdate();\r\n        } else {\r\n            const newFilters = this.state.filters;\r\n            newFilters[event.target.id] = event.target.value;\r\n            this.setState({ filters: newFilters });\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    search() {\r\n        this.props.search(this.state.filters);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{ padding: \"10px\" }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\">Search</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <Autocomplete\r\n                            id=\"vendor\"\r\n                            options={this.props.options}\r\n                            includeInputInList\r\n                            freeSolo\r\n                            renderInput={params => (\r\n                            <TextField {...params} label={inputs.vendor.label} name={inputs.vendor.name} onChange={this.updateSearchText.bind(this)} onBlur={this.updateSearchText.bind(this)} variant=\"outlined\" fullWidth />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"model_number\" variant=\"outlined\" label=\"Model Number\" name=\"model_number\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_height\" type=\"number\" variant=\"outlined\" label=\"Min Height\" name=\"min_height\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 1, max: 42} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_height\" type=\"number\" variant=\"outlined\" label=\"Max Height\" name=\"max_height\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 1, max: 42} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_ethernet_ports\" type=\"number\" variant=\"outlined\" label=\"Min Network Ports\" name=\"min_ethernet_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_ethernet_ports\" type=\"number\" variant=\"outlined\" label=\"Max Network Ports\" name=\"max_ethernet_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_power_ports\" type=\"number\" variant=\"outlined\" label=\"Min Power Ports\" name=\"min_power_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_power_ports\" type=\"number\" variant=\"outlined\" label=\"Max Power Ports\" name=\"max_power_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"cpu\" variant=\"outlined\" label=\"CPU\" name=\"cpu\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_memory\" type=\"number\" variant=\"outlined\" label=\"Min Memory\" name=\"min_memory\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_memory\" type=\"number\" variant=\"outlined\" label=\"Max Memory\" name=\"max_memory\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"storage\" variant=\"outlined\" label=\"Storage\" name=\"storage\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"comment\" variant=\"outlined\" label=\"Comment\" name=\"comment\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            onClick={this.search.bind(this)}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\r\n                                width: \"100%\"\r\n                            }}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { TextField, Button, Typography, Paper, Grid, Modal, Backdrop, Fade, List, ListItem, ListItemText, ListSubheader } from \"@material-ui/core\";\r\nimport { InputLabel, Select, MenuItem } from \"@material-ui/core\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nimport { CompactPicker } from 'react-color';\r\nimport '../stylesheets/ModelStyles.css';\r\n\r\nfunction createInputs(name, label) {\r\n    return {label, name};\r\n}\r\n\r\nconst inputs = {\r\n    \"vendor\": createInputs('vendor', \"Vendor\"),\r\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\r\n    \"height\": createInputs('height', \"Height\"),\r\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\r\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\r\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\r\n    \"cpu\": createInputs('cpu', \"CPU\"),\r\n    \"memory\": createInputs('memory', \"Memory\"),\r\n    \"storage\": createInputs('storage', \"Storage\"),\r\n    \"comment\": createInputs('comment', \"Comment\"),\r\n    \"mount_type\": createInputs('mount_type', \"Mount Type\"),\r\n}\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: \"100%\",\r\n      },\r\n      grid: {\r\n          backgroundColor: theme.palette.background.paper,\r\n          boxShadow: theme.shadows[5],\r\n          padding: theme.spacing(2, 4, 3),\r\n          width: \"50%\"\r\n      },\r\n      progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n      },\r\n});\r\n\r\nconst defaultColor = \"#B0BC00\";\r\n\r\nclass CreateModel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            color: defaultColor,\r\n            showModal: false,\r\n            showImportModal: false,\r\n            importedFile: null,\r\n            networkPorts: [],\r\n            numPorts: 0,\r\n            mountType: \"rackmount\",\r\n        };\r\n    }\r\n\r\n    updateColor = (color) => {\r\n        this.setState({ color: color });\r\n        this.props.updateModelColor(color.hex);\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    showImportModal = () => {\r\n        this.setState({ showImportModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({ showModal: false, networkPorts: [], numPorts: 0, mountType: \"rackmount\" });\r\n    }\r\n\r\n    closeImportModal = () => {\r\n        this.setState({ showImportModal: false });\r\n    }\r\n\r\n    create = (event) => {\r\n        event.preventDefault();\r\n        var color = (this.state.color.hex === undefined ? this.state.color : this.state.color.hex);\r\n        this.props.createModel(this.state.networkPorts, this.state.mountType, color);\r\n        this.closeModal();\r\n        this.setState({ mountType: \"rackmount\" });\r\n        this.updateColor(defaultColor);\r\n    }\r\n\r\n    uploadFile = () => {\r\n        const data = new FormData();\r\n        data.append('file', this.state.importedFile);\r\n        this.props.sendUploadedFile(data);\r\n    }\r\n\r\n    chooseFile = (event) => {\r\n        this.setState({ importedFile: event.target.files[0] })\r\n    }\r\n\r\n    updateNetworkPorts = (event) => {\r\n        const numPorts = event.target.value === '' ? 0 : event.target.value;\r\n\r\n        var ports = [];\r\n        for (var i = 1; i <= numPorts; i++) {\r\n            ports.push(i.toString());\r\n        }\r\n\r\n        this.setState({ networkPorts: ports, numPorts: numPorts });\r\n        this.props.updateModelCreator(event);\r\n    }\r\n\r\n    updatePort = (port, event) => {\r\n        const ports = this.state.networkPorts;\r\n        ports[port] = event.target.value;\r\n\r\n        this.setState({ networkPorts: ports });\r\n    }\r\n\r\n    updateMountType = (event) => {\r\n        this.setState({ mountType: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n        <div>\r\n            <Paper style={{ minHeight: this.props.height }} elevation={3}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{ padding: \"10px\" }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h5\"\r\n                        >\r\n                            Add\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography>Create a new model.</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                width: \"100%\",\r\n                                background: \"green\",\r\n                                color: \"white\"\r\n                            }}\r\n                            onClick={this.showModal}\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                        <hr style={{width: \"5vw\"}} />\r\n                        <Typography color=\"textSecondary\">\r\n                            Or\r\n                        </Typography>\r\n                        <hr style={{width: \"5vw\"}} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{width: \"100%\"}}\r\n                            startIcon={<CloudUploadIcon />}\r\n                            onClick={() => {this.showImportModal()} }\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.showModal}\r\n                onClose={this.closeModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.showModal}>\r\n                    <Backdrop\r\n                        open={this.state.showModal}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                            <form\r\n                                onSubmit={(event) => this.create(event)}\r\n                            >\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h5\">New Model</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                                <Autocomplete\r\n                                    id=\"select-vendor\"\r\n                                    options={this.props.options}\r\n                                    includeInputInList\r\n                                    freeSolo\r\n                                    renderInput={params => (\r\n                                        <TextField {...params} required={true} label={inputs.vendor.label} name={inputs.vendor.name} onChange={this.props.updateModelCreator} onBlur={this.props.updateModelCreator} variant=\"outlined\" fullWidth />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                                <TextField id=\"standard-basic\" required={true} variant=\"outlined\" label={inputs.modelNumber.label} name={inputs.modelNumber.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <InputLabel id=\"select-mount-type-label\">Mount Type</InputLabel>\r\n                                <Select\r\n                                    labelId=\"select-mount-type-label\"\r\n                                    id=\"select-mount-type\"\r\n                                    value={this.state.mountType}\r\n                                    required={true}\r\n                                    onChange={this.updateMountType}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    <MenuItem value=\"rackmount\">Rack Mounted</MenuItem>\r\n                                    <MenuItem value=\"chassis\">Blade Chassis</MenuItem>\r\n                                    <MenuItem value=\"blade\">Blade</MenuItem>\r\n                                </Select>\r\n                            </Grid>\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" required={true} variant=\"outlined\" label={inputs.height.label} name={inputs.height.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 1, max: 42} }} style={{ width: \"100%\" }} />\r\n                            </Grid>\r\n                            : null }\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.ethernetPorts.label} name={inputs.ethernetPorts.name} onChange={this.updateNetworkPorts} InputProps={{ inputProps: { min: 0} }} />\r\n                            </Grid>\r\n                            : null }\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.powerPorts.label} name={inputs.powerPorts.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 0} }}/>\r\n                            </Grid> : null }\r\n                            <Grid item xs={3}>\r\n                                <TextField id=\"standard-basic\" variant=\"outlined\" label={inputs.cpu.label} name={inputs.cpu.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.memory.label} name={inputs.memory.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 0} }} style={{ width: \"100%\" }}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <TextField id=\"standard-basic\" variant=\"outlined\" label={inputs.storage.label} name={inputs.storage.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField rowsMax={3} multiline={true} style={{ width: \"100%\" }} id=\"standard-basic\" variant=\"outlined\" label={inputs.comment.label} name={inputs.comment.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6}>\r\n                                <Typography>Display Color</Typography>\r\n                                <CompactPicker\r\n                                    color={this.state.color}\r\n                                    onChange={this.updateColor}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                            { this.state.mountType !== \"blade\" ?\r\n                                <List\r\n                                    className={classes.root}\r\n                                    subheader={\r\n                                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                                        Network Ports\r\n                                        </ListSubheader>\r\n                                    }\r\n                                    style={{\r\n                                        maxHeight: \"30vh\",\r\n                                        overflow: \"auto\"\r\n                                    }}\r\n                                >\r\n                                {Array.from({length: this.state.numPorts}, (x,i) => i).map((_, index) => {\r\n                                    const labelId = `list-label-${this.state.networkPorts[index]}`;\r\n\r\n                                    return (\r\n                                    <ListItem key={index} role={undefined} dense button>\r\n                                        <ListItemText id={labelId} primary={\"Port \" + (index+1).toString()} />\r\n                                        <TextField defaultValue={this.state.networkPorts[index]} onChange={(e) => this.updatePort(index, e)} />\r\n                                    </ListItem>\r\n                                    );\r\n                                })}\r\n                                {this.state.numPorts === 0 ? <ListItem key=\"add-items\" role={undefined} dense>\r\n                                <ListItemText id=\"add-items-label\" primary=\"Enter the number of network ports above\" />\r\n                                </ListItem> : null}\r\n                                </List> : null }\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={this.closeModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </form>\r\n                </div>\r\n                </Backdrop>\r\n\r\n                </Fade>\r\n            </Modal>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.showImportModal}\r\n                onClose={this.closeImportModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.showImportModal}>\r\n                    <Backdrop\r\n                        open={this.state.showImportModal}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={9}>\r\n                                <Typography variant=\"h5\">Import Models</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    onClick={this.closeImportModal}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item direction=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype='file'\r\n                                    accept=\".csv\"\r\n                                    name=\"models_upload\"\r\n\t\t\t\t\t\t\t\t\tonChange={(event) => this.chooseFile(event)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n\t\t\t\t\t\t\t\t\tstyle={{width: \"40%\"}}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {this.uploadFile()}}\r\n                                >\r\n                                    Upload File\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(CreateModel);\r\n","\r\n\r\n\r\nexport const GENERAL_MODEL_ERROR =  \"There was an error in the backend. Could not perform the given model operation at this time.\";\r\n","import React from 'react';\nimport { CompactPicker } from 'react-color';\nimport axios from 'axios';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Paper, Popover, Typography, Modal, Backdrop, Fade } from '@material-ui/core';\nimport { TextField, Button, Grid, InputLabel, Select, MenuItem, CircularProgress } from \"@material-ui/core\";\nimport { List, ListItem, ListItemText, ListSubheader } from '@material-ui/core';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { ModelCommand } from '../enums/ModelCommands.ts'\nimport getURL from '../../helpers/functions/GetURL';\nimport * as ModelConstants from \"../ModelConstants\";\n\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    modal: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: \"100%\",\n            margin:\"0 auto\",\n            overflow: \"scroll\"\n        },\n        grid: {\n                backgroundColor: theme.palette.background.paper,\n                boxShadow: theme.shadows[5],\n                padding: theme.spacing(2, 4, 3),\n                width: \"50%\"\n        },\n        progress: {\n            display: 'flex',\n            '& > * + *': {\n                marginLeft: theme.spacing(2),\n            },\n        },\n});\n\nconst modelsMainPath = 'models/';\n\nfunction createInputs(name, label) {\n        return {label, name};\n}\n\nconst inputs = {\n    \"vendor\": createInputs('vendor', \"Vendor\", ),\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\n    \"mount_type\": createInputs('mount_type', 'Mount Type'),\n    \"height\": createInputs('height', \"Height\"),\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\n    \"cpu\": createInputs('cpu', \"CPU\"),\n    \"memory\": createInputs('memory', \"Memory\"),\n    \"storage\": createInputs('storage', \"Storage\"),\n    \"comment\": createInputs('comment', \"Comment\"),\n};\n\nconst mountTypeLookup = {\n    \"rackmount\": \"Rack Mounted\",\n    \"chassis\": \"Blade Chassis\",\n    \"blade\": \"Blade\",\n};\n\nclass ModelsTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n                popoverAnchor: null,\n                commentPopover: null,\n\n                networkPorts: [],\n                numPorts: 0,\n\n                showDetailedView: false,\n                showDeleteModal: false,\n\n                row: null,\n                comment: \"\",\n                color: '#000',\n\n                detailViewLoading: false,\n\n                detailedValues : {\n                    'vendor': '',\n                    'model_number': '',\n                    'mount_type': '',\n                    'height': '',\n                    'display_color': '',\n                    'ethernet_ports': [],\n                    'power_ports': '',\n                    'cpu': '',\n                    'memory': '',\n                    'storage': '',\n                    'comment': '',\n                },\n\n                originalVendor: '',\n                originalModelNumber: '',\n                originalHeight: '',\n\n                mountType: null,\n        };\n\n        axios.defaults.headers.common['token'] = this.props.token;\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\n    }\n\n    updateColor = (color) => {\n        var oldDetails = this.state.detailedValues;\n        oldDetails.display_color = color.hex;\n        this.setState({ color: color, detailedValues: oldDetails });\n        this.props.updateModelColor(color.hex);\n    }\n\n    // Show the detail view of a model to edit\n    showDetailedView = (row) => {\n        this.setState({\n            row: row,\n            showDetailedView: true,\n            detailViewLoading: true,\n            color: row[\"Display Color\"] === null ? \"#000000\" : row[\"Display Color\"],\n            networkPorts: row[\"Network Ports\"] === null ? [] : row[\"Network Ports\"],\n            numPorts: row[\"Network Ports\"] === null ? 0 : row[\"Network Ports\"].length,\n            mountType: row[\"Mount Type\"],\n        });\n\n        this.detailViewModel(row[\"Vendor\"], row[\"Model Number\"]);\n    }\n\n    // Get the details of a model\n    detailViewModel = (vendor, modelNum) => {\n        axios.post(\n            getURL(modelsMainPath, ModelCommand.detailView), {\n                'vendor': vendor,\n                'model_number': modelNum,\n            }).then(response => {\n                    const model = response.data['models'][0];\n                    this.setState({\n                        detailedValues: model,\n                        detailViewLoading: false,\n                        originalVendor: model[\"vendor\"],\n                        originalModelNumber: model[\"model_number\"],\n                        originalHeight: model[\"height\"]\n                    });\n            }).catch(function(error) {\n                this.setState({\n                    showStatus: true,\n                    statusMessage: ModelConstants.GENERAL_MODEL_ERROR,\n                    statusSeverity: \"error\"\n                });\n            });\n    }\n\n    // Close the detail view of a model\n    closeDetailedView = () => {\n        this.setState({ showDetailedView: false, row: null, color: \"#000000\", originalVendor: \"\", originalModelNumber: \"\", originalHeight: \"\" });\n    }\n\n    // Show delete model confirmation\n    showDeleteModal = (row) => {\n        this.setState({ showDeleteModal: true, originalVendor: row[\"Vendor\"], originalModelNumber: row[\"Model Number\"] });\n    }\n\n    // Close delete model confirmation\n    closeDeleteModal = () => {\n        this.setState({ showDeleteModal: false, originalVendor: \"\", originalModelNumber: \"\", originalHeight: \"\" });\n    }\n\n    // Delete a model\n    delete = () => {\n        this.props.deleteModel(this.state.originalVendor, this.state.originalModelNumber);\n        this.closeDeleteModal();\n    }\n\n    edit = (event) => {\n        event.preventDefault();\n        this.props.editModel(this.state.originalVendor, this.state.originalModelNumber, this.state.originalHeight, this.state.detailedValues, this.state.networkPorts);\n        this.closeDetailedView();\n    }\n\n    clickInfo = (event, ports) => {\n        this.setState({ popoverAnchor: event.target, networkPorts: ports });\n    }\n\n    clickComment = (event, comment) => {\n        this.setState({ commentPopover: event.target, comment: comment });\n    }\n\n    handlePopoverClose = () => {\n        this.setState({ popoverAnchor: null });\n    }\n\n    handleCommentPopoverClose = () => {\n        this.setState({ commentPopover: null });\n    }\n\n    updateNetworkPorts = (event) => {\n        const numPorts = event.target.value === '' ? 0 : event.target.value;\n\n        var ports = [];\n        for (var i = 1; i <= numPorts; i++) {\n                ports.push(i.toString());\n        }\n\n        this.setState({ networkPorts: ports, numPorts: numPorts });\n        this.updateModelEdited(event);\n    }\n\n    updatePort = (port, event) => {\n        const ports = this.state.networkPorts;\n        ports[port] = event.target.value;\n\n        this.setState({ networkPorts: ports });\n    }\n\n    save = () => {\n        this.props.editModel(this.state.originalVendor, this.state.originalModelNumber, this.state.originalHeight, this.state.detailedValues, this.state.networkPorts);\n        this.closeDetailedView();\n    }\n\n    updateModelEdited = (event) => {\n        this.state.detailedValues[event.target.name] = event.target.value;\n        this.forceUpdate();\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <TableContainer component={Paper}>\n                    <Table style={{ minWidth: 1000 }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                {this.props.columns.map(col => (\n                                    <TableCell align=\"center\">\n                                        <span id={col} style={{ fontWeight: \"bold\" }}>\n                                            {col}\n                                        </span>\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.props.vals.map((row, index) => (\n                                <TableRow id={index} hover={true}>\n                                    {this.props.privilege.admin || this.props.privilege.model ? (\n                                        <TableCell scope=\"row\" align=\"center\">\n                                            <Button\n                                                startIcon={<EditIcon />}\n                                                onClick={() => this.showDetailedView(row)}\n                                            />\n                                            <Button\n                                                startIcon={<DeleteIcon />}\n                                                onClick={() => this.showDeleteModal(row)}\n                                            />\n                                        </TableCell>\n                                    ) : null}\n                                    {this.props.keys.map(key => {\n                                        if (key === \"Display Color\") {\n                                            return (\n                                                <TableCell\n                                                    scope=\"row\"\n                                                    align=\"center\"\n                                                    style={{\n                                                        backgroundColor: row[key]\n                                                    }}\n                                                ></TableCell>\n                                            );\n                                        }\n\n                                        if (key === \"Network Ports\") {\n                                            return (\n                                                <TableCell scope=\"row\" align=\"center\">\n                                                    {row[key] === null ? \"\" : row[key].length}\n                                                    {row[key] == null ? null : (\n                                                        <Button style={{ margin: \"5px\" }}>\n                                                            <ViewListIcon\n                                                                onClick={e => {\n                                                                    this.clickInfo(e, row[key]);\n                                                                }}\n                                                            />\n                                                        </Button>\n                                                    )}\n                                                </TableCell>\n                                            );\n                                        }\n\n                                        if (key == \"Comment\") {\n                                            return row[\"Comment\"] !== null && row[\"Comment\"].length > 0 ? (\n                                                <TableCell scope=\"row\" align=\"center\">\n                                                    <Button\n                                                        startIcon={<CommentIcon />}\n                                                        onClick={e => this.clickComment(e, row[\"Comment\"])}\n                                                    />\n                                                </TableCell>\n                                            ) : (\n                                                <TableCell scope=\"row\" align=\"center\"></TableCell>\n                                            );\n                                        }\n\n                                        if (key == \"Mount Type\") {\n                                            return (\n                                            <TableCell scope=\"row\" align=\"center\">\n                                                {mountTypeLookup[row[key]]}\n                                            </TableCell>\n                                        );\n                                        }\n\n                                        return (\n                                            <TableCell scope=\"row\" align=\"center\">\n                                                {row[key]}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Popover\n                    id={Boolean(this.state.popoverAnchor) ? \"simple-popover\" : undefined}\n                    open={Boolean(this.state.popoverAnchor)}\n                    anchorEl={this.state.popoverAnchor}\n                    onClose={this.handlePopoverClose}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\"\n                    }}\n                    transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"center\"\n                    }}\n                >\n                    <List\n                        className={classes.root}\n                        subheader={\n                            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                                Network Ports\n                            </ListSubheader>\n                        }\n                    >\n                        {this.state.networkPorts.map(value => {\n                            const labelId = `checkbox-list-label-${value}`;\n\n                            return (\n                                <ListItem key={value} role={undefined} dense button>\n                                    <ListItemText id={labelId} primary={value} />\n                                </ListItem>\n                            );\n                        })}\n                    </List>\n                </Popover>\n                <Popover\n                    id={Boolean(this.state.commentPopover) ? \"simple-popover\" : undefined}\n                    open={Boolean(this.state.commentPopover)}\n                    anchorEl={this.state.commentPopover}\n                    onClose={this.handleCommentPopoverClose}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\"\n                    }}\n                    transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"center\"\n                    }}\n                >\n                    <Typography\n                        variant=\"body1\"\n                        style={{\n                            padding: \"30px\"\n                        }}\n                    >\n                        {this.state.comment}\n                    </Typography>\n                </Popover>\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={this.state.showDetailedView}\n                    onClose={this.closeDetailedView}\n                    closeAfterTransition\n                >\n                    <Fade in={this.state.showDetailedView}>\n                        <Backdrop open={this.state.showDetailedView}>\n                            <div className={classes.grid}>\n                                {this.state.detailViewLoading ? (\n                                    <CircularProgress />\n                                ) : (\n                                    <form\n                                        onSubmit={(event) => this.edit(event)}\n                                    >\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={12}>\n                                            <Typography variant=\"h5\">Model Details</Typography>\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={6} lg={6}>\n                                            <Autocomplete\n                                                id=\"select-vendor\"\n                                                options={this.props.options}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.vendor\n                                                }\n                                                includeInputInList\n                                                freeSolo\n                                                renderInput={params => (\n                                                    <TextField\n                                                        {...params}\n                                                        label={inputs.vendor.label}\n                                                        required={true}\n                                                        name={inputs.vendor.name}\n                                                        onChange={this.updateModelEdited}\n                                                        onBlur={this.updateModelEdited}\n                                                        variant=\"outlined\"\n                                                        fullWidth\n                                                    />\n                                                )}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={6} md={4} lg={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.modelNumber.label}\n                                                name={inputs.modelNumber.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.model_number\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <InputLabel id=\"select-mount-type-label\">Mount Type</InputLabel>\n                                            <Select\n                                                labelId=\"select-mount-type-label\"\n                                                id=\"select-mount-type\"\n                                                name={inputs.mount_type.name}\n                                                value={this.state.mountType}\n                                                required={true}\n                                                onChange={this.updateModelEdited}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                <MenuItem value=\"rackmount\">Rack Mounted</MenuItem>\n                                                <MenuItem value=\"chassis\">Blade Chassis</MenuItem>\n                                                <MenuItem value=\"blade\">Blade</MenuItem>\n                                            </Select>\n                                        </Grid>\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.height.label}\n                                                name={inputs.height.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.height\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 1, max: 42 } }}\n                                                style={{ width: \"100%\" }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.ethernetPorts.label}\n                                                name={inputs.ethernetPorts.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.ethernet_ports == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.ethernet_ports.length\n                                                }\n                                                onChange={this.updateNetworkPorts}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.powerPorts.label}\n                                                name={inputs.powerPorts.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.power_ports\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.cpu.label}\n                                                name={inputs.cpu.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.cpu\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.memory.label}\n                                                name={inputs.memory.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.memory\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                                style={{ width: \"100%\" }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.storage.label}\n                                                name={inputs.storage.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.storage\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                rowsMax={3}\n                                                multiline={true}\n                                                style={{ width: \"100%\" }}\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.comment.label}\n                                                name={inputs.comment.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.comment\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>Display Color</Typography>\n                                            <CompactPicker\n                                                color={this.state.color}\n                                                onChange={this.updateColor}\n                                            />\n                                        </Grid>\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={12}>\n                                            <List\n                                                className={classes.root}\n                                                subheader={\n                                                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                                                        Network Ports\n                                                    </ListSubheader>\n                                                }\n                                                style={{\n                                                    maxHeight: \"30vh\",\n                                                    overflow: \"auto\"\n                                                }}\n                                            >\n                                                {Array.from({ length: this.state.numPorts }, (x, i) => i).map(\n                                                    (_, index) => {\n                                                        const labelId = `list-label-${this.state.networkPorts[index]}`;\n\n                                                        return (\n                                                            <ListItem key={index} role={undefined} dense button>\n                                                                <ListItemText\n                                                                    id={labelId}\n                                                                    primary={\"Port \" + (index + 1).toString()}\n                                                                />\n                                                                <TextField\n                                                                    defaultValue={this.state.networkPorts[index]}\n                                                                    onChange={e => this.updatePort(index, e)}\n                                                                />\n                                                            </ListItem>\n                                                        );\n                                                    }\n                                                )}\n                                                {this.state.numPorts === 0 ? (\n                                                    <ListItem key=\"add-items\" role={undefined} dense>\n                                                        <ListItemText\n                                                            id=\"add-items-label\"\n                                                            primary=\"Enter the number of network ports above\"\n                                                        />\n                                                    </ListItem>\n                                                ) : null}\n                                            </List>\n                                        </Grid>\n                                        : null }\n                                        <Grid item xs={3}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                type=\"submit\"\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Save\n                                            </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeDetailedView}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                    </form>\n                                )}\n                            </div>\n                        </Backdrop>\n                    </Fade>\n                </Modal>\n\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={this.state.showDeleteModal}\n                    onClose={this.closeDeleteModal}\n                    closeAfterTransition\n                >\n                    <Fade in={this.state.showDeleteModal}>\n                        <Backdrop open={this.state.showDeleteModal}>\n                            <div className={classes.grid}>\n                                <Grid\n                                    container\n                                    spacing={1}\n                                    direction=\"row\"\n                                    justify=\"flex-start\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={12}>\n                                        <Typography variant=\"h5\">Are you sure?</Typography>\n                                    </Grid>\n                                    <Grid item xs={12} sm={12} md={6} lg={6}>\n                                        <Typography variant=\"body1\">\n                                            Doing this will remove the model permanently.\n                                        </Typography>\n                                    </Grid>\n\n                                    <Grid item xs={3}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={this.delete}\n                                            style={{ width: \"100%\" }}\n                                        >\n                                            Yes\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={this.closeDeleteModal}\n                                            style={{ width: \"100%\" }}\n                                        >\n                                            No\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Backdrop>\n                    </Fade>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(ModelsTable);\n","export enum UserCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search='search/',\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport { ModelCommand } from '../enums/ModelCommands.ts'\r\nimport { ModelInput } from '../enums/ModelInputs.ts'\r\n\r\nimport ExportModel from '../helpers/ExportModel';\r\nimport FilterModel from '../helpers/FilterModel';\r\nimport CreateModel from '../helpers/CreateModel';\r\n\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport ModelsTable from '../helpers/ModelsTable';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport * as ModelConstants from \"../ModelConstants\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\";\r\n\r\nconst columns = [\r\n    'Vendor',\r\n    'Model Number',\r\n    'Mount Type',\r\n    'Height',\r\n    'Display Color',\r\n    'Network Ports',\r\n    'Power Ports',\r\n    'CPU',\r\n    'Memory',\r\n    'Storage',\r\n    'Comment',\r\n]\r\n\r\nconst adminColumns = [\r\n    'Actions',\r\n    'Vendor',\r\n    'Model Number',\r\n    'Mount Type',\r\n    'Height',\r\n    'Display Color',\r\n    'Network Ports',\r\n    'Power Ports',\r\n    'CPU',\r\n    'Memory',\r\n    'Storage',\r\n    'Comment',\r\n]\r\n\r\nconst columnLookup = {\r\n    \"vendor\": \"Vendor\",\r\n    \"model_number\": \"Model Number\",\r\n    'mount_type': \"Mount Type\",\r\n    \"height\": \"Height\",\r\n    'display_color': 'Display Color',\r\n    'ethernet_ports': 'Network Ports',\r\n    'power_ports': 'Power Ports',\r\n    'cpu': 'CPU',\r\n    'memory': 'Memory',\r\n    'storage': 'Storage',\r\n    'comment': \"Comment\"\r\n}\r\n\r\nconst modelsMainPath = 'models/';\r\nconst modelDownloadFileName = 'models.csv';\r\n\r\nexport default class ModelsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // modals\r\n            showCreateModal: false,\r\n            showImportModal: false,\r\n\r\n            // table items\r\n            items: [],\r\n            rows: [],\r\n\r\n            // vals for creating a new model\r\n            createdModel : {\r\n                'vendor': '',\r\n                'model_number': '',\r\n                'mount_type': '',\r\n                'height': '',\r\n                'display_color': '#A52A2A',\r\n                'ethernet_ports': '',\r\n                'power_ports': '',\r\n                'cpu': '',\r\n                'memory': '',\r\n                'storage': '',\r\n                'comment': '',\r\n            },\r\n            createdVendor: '',\r\n            createdModelNum: '',\r\n            createdMountType: '',\r\n            createdHeight: '',\r\n            createdDispClr: '',\r\n            createdEthPorts: '',\r\n            createdPwrPorts: '',\r\n            createdCPU: '',\r\n            createdMem: '',\r\n            createdStorage: '',\r\n            createdComments: '',\r\n\r\n            detailedValues : {\r\n                'vendor': '',\r\n                'model_number': '',\r\n                'mount_type': '',\r\n                'height': '',\r\n                'display_color': '',\r\n                'ethernet_ports': '',\r\n                'power_ports': '',\r\n                'cpu': '',\r\n                'memory': '',\r\n                'storage': '',\r\n                'comment': '',\r\n            },\r\n\r\n            // vals for deleting a model\r\n            deleteVendor:'',\r\n            deleteModel:'',\r\n\r\n            // vals for viewing a model\r\n            viewVendor:'',\r\n            viewModel:'',\r\n\r\n            // searching a model\r\n            searchText: \"\",\r\n            searchVendor: '',\r\n            searchModelNum: '',\r\n            searchMountType: '',\r\n            searchMinHeight: '',\r\n            searchMaxHeight: '',\r\n            searchMinNetworkPorts: '',\r\n            searchMaxNetworkPorts: '',\r\n            searchMinPower: '',\r\n            searchMaxPower: '',\r\n            searchCPU: '',\r\n            searchMinMem: '',\r\n            searchMaxMem: '',\r\n            searchStore: '',\r\n            searchComment: '',\r\n\r\n            // csv data\r\n            csvData: '',\r\n\r\n            showStatus: false,\r\n            statusSeverity: '',\r\n            statusMessage: '',\r\n            detailshowStatus: false,\r\n            detailStatusSeverity: '',\r\n            detailStatusMessage: '',\r\n            createshowStatus: false,\r\n            statusSeverity:' ',\r\n            statusMessage: '',\r\n\r\n            vendorsList: [],\r\n            madeVendorQuery: false,\r\n        };\r\n\r\n        axios.defaults.headers.common['token'] = this.props.token;\r\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchModels();\r\n        this.getVendorList();\r\n    }\r\n\r\n    createModel = (networkPorts, mountType, color) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.create),\r\n            {\r\n                'vendor': this.state.createdModel[ModelInput.Vendor],\r\n                'model_number': this.state.createdModel[ModelInput.model_number],\r\n                'mount_type': mountType,\r\n                'height': this.state.createdModel[ModelInput.Height],\r\n                'display_color': color,\r\n                'ethernet_ports': this.state.createdModel[ModelInput.ethernet_ports],\r\n                'power_ports': this.state.createdModel[ModelInput.power_ports],\r\n                'cpu': this.state.createdModel[ModelInput.CPU],\r\n                'memory': this.state.createdModel[ModelInput.Memory],\r\n                'storage': this.state.createdModel[ModelInput.Storage],\r\n                'comment': this.state.createdModel[ModelInput.Comment],\r\n                'ethernet_ports': networkPorts,\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusMessage: \"Successfully created model\",\r\n                            statusSeverity: \"success\",\r\n                            createdModel : {\r\n                                'vendor': '',\r\n                                'model_number': '',\r\n                                'mount_type': '',\r\n                                'height': '',\r\n                                'display_color': '',\r\n                                'ethernet_ports': '',\r\n                                'power_ports': '',\r\n                                'cpu': '',\r\n                                'memory': '',\r\n                                'storage': '',\r\n                                'comment': '',\r\n                            },\r\n                            showCreateModal:false,\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n                    } else {\r\n                        this.setState({ createshowStatus: true, showStatus:true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                    }\r\n                }).catch(\r\n                    this.setState({ createshowStatus: true, statusMessage: ModelConstants.GENERAL_MODEL_ERROR, statusSeverity: \"error\" })\r\n                );\r\n    }\r\n\r\n    editModel = (originalVendor, originalModelNum, originalHeight, detailedValues, networkPorts) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.edit),\r\n            {\r\n                'vendorOriginal': originalVendor,\r\n                'model_numberOriginal': originalModelNum,\r\n                'heightOriginal': originalHeight,\r\n                'vendor': detailedValues[ModelInput.Vendor],\r\n                'model_number': detailedValues[ModelInput.model_number],\r\n                'mount_type': detailedValues[ModelInput.mount_type],\r\n                'height': detailedValues[ModelInput.Height],\r\n                'display_color': detailedValues[ModelInput.display_color],\r\n                'ethernet_ports': networkPorts,\r\n                'power_ports': detailedValues[ModelInput.power_ports],\r\n                'cpu': detailedValues[ModelInput.CPU],\r\n                'memory': detailedValues[ModelInput.Memory],\r\n                'storage': detailedValues[ModelInput.Storage],\r\n                'comment': detailedValues[ModelInput.Comment],\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusSeverity: 'success',\r\n                            statusMessage: \"Successfully edited model\",\r\n                            showDetailedView: false\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n                    } else {\r\n                        this.setState({ detailshowStatus: true, detailStatusMessage: response.data.message, detailStatusSeverity: \"error\" })\r\n                    }\r\n                }).catch(\r\n                    this.setState({ detailshowStatus: true, detailStatusMessage: ModelConstants.GENERAL_MODEL_ERROR, detailStatusSeverity: \"error\" })\r\n                );\r\n    }\r\n\r\n    deleteModel = (originalVendor, originalModelNumber) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.delete),\r\n            {\r\n                'vendor': originalVendor,\r\n                'model_number': originalModelNumber,\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusSeverity:'success',\r\n                            statusMessage: \"Successfully deleted model\",\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n                    } else {\r\n                        this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                    }\r\n                });\r\n    }\r\n\r\n    detailViewModel = (vendor, modelNum) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.detailView),\r\n            {\r\n                'vendor': vendor,\r\n                'model_number': modelNum,\r\n            }\r\n            ).then(response => {\r\n                this.setState({ detailedValues: response.data['models'][0], detailViewLoading: false});\r\n            }\r\n            ).catch(function(error) {\r\n                this.setState({ showStatus: true, statusMessage: ModelConstants.GENERAL_MODEL_ERROR, statusSeverity:\"error\" });\r\n            });\r\n\r\n        this.setState({\r\n            viewVendor: '',\r\n            viewModel: '',\r\n        });\r\n    }\r\n\r\n    searchModels = () => {\r\n        const filter = {\r\n            \"vendor\": this.state.searchVendor,\r\n            \"model_number\": this.state.searchModelNum,\r\n            'mount_type': this.state.searchMountType,\r\n            \"min_height\": this.state.searchMinHeight,\r\n            \"max_height\": this.state.searchMaxHeight,\r\n            \"min_ethernet_ports\": this.state.searchMinNetworkPorts,\r\n            \"max_ethernet_ports\": this.state.searchMaxNetworkPorts,\r\n            \"min_power_ports\": this.state.searchMinPower,\r\n            \"max_power_ports\": this.state.searchMaxPower,\r\n            'cpu': this.state.searchCPU,\r\n            'min_memory': this.state.searchMinMem,\r\n            'max_memory': this.state.searchMaxMem,\r\n            'storage': this.state.searchStore,\r\n            'comment': this.state.searchComment,\r\n        };\r\n\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.search),\r\n            {\r\n                'filter': {\r\n                    'vendor': \"\",\r\n                    'model_number': \"\",\r\n                    'height': \"\"\r\n                }\r\n            }\r\n            ).then(response => {\r\n                const models = response.data['models'] === undefined ? [] : response.data['models'];\r\n                var rows = [];\r\n                Object.values(models).forEach(model => {\r\n                    var row = {};\r\n                    Object.keys(model).forEach(key => {\r\n                        if (key in columnLookup) {\r\n                            row[columnLookup[key]] = model[key];\r\n                        } else {\r\n                            row[key] = model[key];\r\n                        }\r\n                    });\r\n\r\n\r\n                    if (\r\n                        (filter[\"vendor\"] == undefined || filter[\"vendor\"] === \"\" || row[\"Vendor\"] === undefined || row[\"Vendor\"].includes(filter[\"vendor\"])) &&\r\n                        (filter[\"model_number\"] === undefined || filter[\"model_number\"] === \"\" || row[\"Model Number\"].includes(filter[\"model_number\"])) &&\r\n                        (filter[\"mount_type\"] === undefined || filter[\"mount_type\"] === \"\" || row[\"Mount Type\"] === filter[\"mount_type\"]) &&\r\n                        (filter[\"min_height\"] === undefined || filter[\"min_height\"] === \"\" ||  row[\"Height\"] >= parseInt(filter[\"min_height\"])) &&\r\n                        (filter[\"max_height\"] === undefined || filter[\"max_height\"] === \"\" ||  row[\"Height\"] <= parseInt(filter[\"max_height\"])) &&\r\n\r\n                        (filter[\"min_ethernet_ports\"] === undefined || filter[\"min_ethernet_ports\"] === \"\" ||  row[\"Network Ports\"].length >= parseInt(filter[\"min_ethernet_ports\"])) &&\r\n                        (filter[\"max_ethernet_ports\"] === undefined || filter[\"max_ethernet_ports\"] === \"\" ||  row[\"Network Ports\"].length <= parseInt(filter[\"max_ethernet_ports\"])) &&\r\n\r\n\r\n                        (filter[\"min_power_ports\"] === undefined || filter[\"min_power_ports\"] === \"\" ||  row[\"Power Ports\"] >= parseInt(filter[\"min_power_ports\"])) &&\r\n                        (filter[\"max_power_ports\"] === undefined || filter[\"max_power_ports\"] === \"\" ||  row[\"Power Ports\"] <= parseInt(filter[\"max_power_ports\"])) &&\r\n\r\n\r\n                        (filter[\"cpu\"] === undefined || filter[\"cpu\"] === \"\" || row[\"CPU\"] === null || row[\"CPU\"].includes(filter[\"cpu\"])) &&\r\n                        (filter[\"min_memory\"] === undefined || filter[\"min_memory\"] === \"\" ||  row[\"Memory\"] >= parseInt(filter[\"min_memory\"])) &&\r\n                        (filter[\"max_memory\"] === undefined || filter[\"max_memory\"] === \"\" ||  row[\"Memory\"] <= parseInt(filter[\"max_memory\"])) &&\r\n\r\n                        (filter[\"storage\"] === undefined || filter[\"storage\"] === \"\" || row[\"Storage\"] === null || row[\"Storage\"].includes(filter[\"storage\"])) &&\r\n                        (filter[\"comment\"] === undefined || filter[\"comment\"] === \"\" || row[\"Comment\"] === null || row[\"Comment\"].includes(filter[\"comment\"]))\r\n                    ) {\r\n                        rows.push(row);\r\n                    }\r\n\r\n                });\r\n\r\n                this.setState({ rows: rows, items: models })\r\n            });\r\n\r\n        this.setState({\r\n            searchText: '',\r\n        });\r\n    }\r\n\r\n    getVendorList = () => {\r\n        axios.get(\r\n            getURL(modelsMainPath, ModelCommand.VENDOR_VALUES), {}\r\n        ).then(response => this.setState({ vendorsList: response.data.results }));\r\n\r\n        this.setState({ madeVendorQuery: true });\r\n    }\r\n\r\n    sendUploadedFile = (data) => {\r\n        axios.post(\r\n            getURL(\"models/\", ModelCommand.UPLOAD_FILE), data\r\n        ).then(response => {\r\n                if (response.data.message === 'success') {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.summary, statusSeverity: 'success', showImportModal: false,})\r\n                    this.searchModels();\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                }\r\n            });\r\n    }\r\n\r\n    downloadTable = () => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.EXPORT_FILE),\r\n            {\r\n                'filter': {\r\n                    'vendor': this.state.searchVendor,\r\n                    'model_number': this.state.searchModelNum,\r\n                    'height': this.state.searchHeight,\r\n                }\r\n            }\r\n        ).then(response => {\r\n            this.setState({ csvData: response.data.csvData });\r\n            this.csvLink.link.click();\r\n        });\r\n    }\r\n\r\n    search = (filters) => {\r\n        this.setState({\r\n            searchVendor: filters['vendor'],\r\n            searchModelNum: filters['model_number'],\r\n            searchMountType: filters['mount_type'],\r\n            searchMinHeight: filters['min_height'],\r\n            searchMaxHeight: filters['max_height'],\r\n            searchMinNetworkPorts: filters[\"min_ethernet_ports\"],\r\n            searchMaxNetworkPorts: filters[\"max_ethernet_ports\"],\r\n            searchMinPower: filters[\"min_power_ports\"],\r\n            searchMaxPower: filters[\"max_power_ports\"],\r\n            searchCPU: filters[\"cpu\"],\r\n            searchMinMem: filters[\"min_memory\"],\r\n            searchMaxMem: filters[\"max_memory\"],\r\n            searchStore: filters[\"storage\"],\r\n            searchComment: filters[\"comment\"],\r\n        }, this.searchModels);\r\n    }\r\n\r\n    searchAll = () => {\r\n        var filters = {\r\n            'vendor': '',\r\n            'model_number': '',\r\n            'height': ''\r\n        };\r\n\r\n        this.search(filters);\r\n    }\r\n\r\n    openCreateModal = () => {\r\n        this.setState({showCreateModal: true});\r\n    }\r\n\r\n    openImportModal = () => {\r\n        this.setState({showImportModal: true});\r\n    }\r\n\r\n    showDetailedView = (row) => {\r\n        this.setState({\r\n            detailViewLoading: true,\r\n         });\r\n\r\n        var vendor = row['Vendor'];\r\n        var modelNum = row['Model Number'];\r\n\r\n        this.detailViewModel(vendor, modelNum);\r\n    }\r\n\r\n    closeCreateModal = () => {\r\n        this.setState({showCreateModal: false});\r\n    }\r\n\r\n    closeImportModal = () => {\r\n        this.setState({showImportModal: false});\r\n    }\r\n\r\n    closeDetailedView = () => {\r\n        this.setState({ showDetailedView: false })\r\n    }\r\n\r\n    updateModelCreator = (event) => {\r\n        this.state.createdModel[event.target.name] = event.target.value;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateModelColor = (color) => {\r\n        this.state.createdModel['display_color'] = color;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateModelColorDetails = (color) => {\r\n        this.state.detailedValues['display_color'] = color;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateSearchText = (event) => {\r\n        this.setState({ searchText: event.target.value})\r\n    }\r\n\r\n    closeShowStatus = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    createStatusClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ createshowStatus: false })\r\n    }\r\n\r\n    detailStatusClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ detailshowStatus: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\">\r\n                            Models\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        {(this.props.privilege.admin || this.props.privilege.model) ?\r\n                        (<div>\r\n                            <CreateModel\r\n                                showStatus={this.state.createshowStatus}\r\n                                statusSeverity={this.state.statusSeverity}\r\n                                statusClose={this.createStatusClose}\r\n                                statusMessage={this.state.statusMessage}\r\n                                showCreateModal={this.state.showCreateModal}\r\n                                closeCreateModal={this.closeCreateModal}\r\n                                createModel={this.createModel}\r\n                                updateModelCreator={this.updateModelCreator}\r\n                                options={this.state.vendorsList}\r\n                                useAutocomplete={true}\r\n                                updateModelColor={this.updateModelColor}\r\n                                sendUploadedFile={this.sendUploadedFile}\r\n                                height=\"420px\"\r\n                            />\r\n                        </div>) : null}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                        <FilterModel\r\n                            updateSearchText={this.updateSearchText}\r\n                            search={this.search}\r\n                            filters={columns}\r\n                            options={this.state.vendorsList}\r\n                            useAutocomplete={true}\r\n                            height=\"420px\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <ExportModel\r\n                            downloadTable={this.downloadTable}\r\n                            showAll={this.searchAll}\r\n                            height=\"420px\"\r\n                        />\r\n                        <CSVLink\r\n                            data={this.state.csvData}\r\n                            filename={modelDownloadFileName}\r\n                            className=\"hidden\"\r\n                            ref={(r) => this.csvLink = r}\r\n                            target=\"_blank\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <ModelsTable\r\n                            columns={this.props.privilege.admin || this.props.privilege.model ? adminColumns : columns}\r\n                            vals={this.state.rows}\r\n                            privilege={this.props.privilege}\r\n                            token={this.props.token}\r\n                            keys={columns}\r\n                            filters={this.props.privilege.admin || this.props.privilege.model ? adminColumns : columns}\r\n                            updateModelColor={this.updateModelColorDetails}\r\n                            deleteModel={this.deleteModel}\r\n                            editModel={this.editModel}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <StatusDisplay\r\n                    open={this.state.showStatus}\r\n                    severity={this.state.statusSeverity}\r\n                    closeStatus={this.closeShowStatus}\r\n                    message={this.state.statusMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nexport default function PrivilegePicker(props) {\r\n\tconst generalPrivileges=[\r\n\t\t{title:\"Model Management\", value:\"model\"},\r\n\t\t{title:\"Global Asset Management\", value:\"asset\"},\r\n\t\t{title:\"Auditing\", value:\"audit\"},\r\n\t\t{title:\"Power Management\", value:\"power\"},\r\n\t\t{title:\"Administrator\", value:\"admin\"},\r\n\t]\r\n\r\n\tvar defaultPrivs = [];\r\n\tvar defaultDCs = [];\r\n\r\n\tif(props.defaultPrivileges !== undefined) {\r\n\t\tif (props.defaultPrivileges.model) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[0]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.asset) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[1]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.audit) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[2]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.power) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[3]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.admin) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[4]);\r\n\t\t}\r\n\r\n\t\tdefaultDCs = props.defaultPrivileges.datacenters\r\n\t}\r\n\r\n\treturn (\r\n\t\t<span>\r\n\t\t\t<Typography>Privileges</Typography>\r\n\t\t\t<Autocomplete\r\n\t\t\t\tmultiple\r\n\t\t\t\tid=\"tags-standard\"\r\n\t\t\t\tgetOptionLabel={option => option.title}\r\n\t\t\t\toptions={generalPrivileges}\r\n\t\t\t\tonChange={props.updatePrivilege}\r\n\t\t\t\tdefaultValue={defaultPrivs}\r\n\t\t\t\trenderInput={params => (\r\n\t\t\t\t<TextField\r\n\t\t\t\t\t{...params}\r\n\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\tlabel=\"General Privileges\"\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t\t{props.loading ? <CircularProgress /> :\r\n\t\t\t<Autocomplete\r\n\t\t\t\tmultiple\r\n\t\t\t\tid=\"tags-standard\"\r\n\t\t\t\toptions={props.dcPrivileges}\r\n\t\t\t\tonChange={props.updateDCPrivilege}\r\n\t\t\t\tdefaultValue={defaultDCs}\r\n\t\t\t\trenderInput={params => (\r\n\t\t\t\t<TextField\r\n\t\t\t\t\t{...params}\r\n\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\tlabel=\"Datacenter Asset Privileges\"\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t/>}\r\n\t\t</span>\r\n\t)\r\n\r\n}\r\n","export enum PrivilegeCommand {\r\n    GET_PRIVILEGES = \"getPermissions/\",\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport '../../../stylesheets/Models.css';\r\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nexport default class Filters extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            display_name: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            privilege:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetCreate = (success) => {\r\n        if (success) {\r\n            this.setState({username: \"\", display_name: \"\", password: \"\", email: \"\", privilege:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },});\r\n        }\r\n    }\r\n\r\n    searchUsers = () => {\r\n        this.props.search( { \"filter\":this.state } );\r\n    }\r\n\r\n    updateprivilege = (event, values) => {\r\n        var privs = {\r\n            \"model\":false,\r\n            \"asset\":false,\r\n            \"datacenters\":this.state.privilege[\"datacenters\"],\r\n            \"power\":false,\r\n            \"audit\":false,\r\n            \"admin\":false,\r\n        };\r\n        values.map(priv => { privs[priv.value] = true; });\r\n        this.setState({ privilege: privs });\r\n    }\r\n\r\n    updateDCPrivilege = (event, values) => {\r\n        var privs = this.state.privilege;\r\n        privs[\"datacenters\"] = values;\r\n        this.setState({ privilege: privs });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Card elevation={3} style={{ padding: \"20px\" }}>\r\n            <Typography variant=\"h6\">Search</Typography>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Username\" name=\"username\" value={this.state.username} onChange={(e) => this.setState({ username: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Display Name\" name=\"display_name\" value={this.state.display_name} onChange={(e) => this.setState({ display_name: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Password\" name=\"password\" type=\"password\" value={this.state.password} onChange={(e) => this.setState({ password: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Email\" name=\"email\" type=\"email\" value={this.state.email} onChange={(e) => this.setState({ email: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <PrivilegePicker\r\n                        dcPrivileges={this.props.privileges}\r\n                        loading={this.props.loading}\r\n                        updatePrivilege={this.updateprivilege}\r\n                        updateDCPrivilege={this.updateDCPrivilege}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    item\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    xs={12}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={this.searchUsers}\r\n                        style={{\r\n                            \"width\": \"100%\",\r\n                            \"marginTop\": \"20px\",\r\n                            \"backgroundColor\": \"blue\",\r\n                            \"color\": \"white\"\r\n                        }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport '../../../stylesheets/Models.css';\r\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nexport default class CreateModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            display_name: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            selectedPrivileges:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetCreate = (success) => {\r\n        if (success) {\r\n\r\n        }\r\n    }\r\n\r\n    createModel = () => {\r\n        this.props.createModel(this.state.username, this.state.password, this.state.display_name, this.state.email, this.state.selectedPrivileges, this.resetCreate);\r\n    }\r\n\r\n    updateSelectedPrivileges = (event, values) => {\r\n        var privs = {\r\n            \"model\":false,\r\n            \"asset\":false,\r\n            \"datacenters\":this.state.selectedPrivileges[\"datacenters\"],\r\n            \"power\":false,\r\n            \"audit\":false,\r\n            \"admin\":false,\r\n        };\r\n        values.map(priv => { privs[priv.value] = true; });\r\n        this.setState({ selectedPrivileges: privs });\r\n    }\r\n\r\n    updateDCPrivilege = (event, values) => {\r\n        var privs = this.state.selectedPrivileges;\r\n        privs[\"datacenters\"] = values;\r\n        this.setState({ selectedPrivileges: privs });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Card elevation={3} style={{ padding: \"20px\" }}>\r\n            <Typography variant=\"h6\">Create</Typography>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Username\" name=\"username\" value={this.state.username} onChange={(e) => this.setState({ username: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Display Name\" name=\"display_name\" value={this.state.display_name} onChange={(e) => this.setState({ display_name: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Password\" name=\"password\" type=\"password\" value={this.state.password} onChange={(e) => this.setState({ password: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Email\" name=\"email\" type=\"email\" value={this.state.email} onChange={(e) => this.setState({ email: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <PrivilegePicker\r\n                        dcPrivileges={this.props.privileges}\r\n                        loading={this.props.loading}\r\n                        updatePrivilege={this.updateSelectedPrivileges}\r\n                        updateDCPrivilege={this.updateDCPrivilege}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    item\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    xs={12}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={this.createModel}\r\n                        style={{\r\n                            \"width\": \"100%\",\r\n                            \"marginTop\": \"20px\",\r\n                            \"backgroundColor\": \"green\",\r\n                            \"color\": \"white\"\r\n                        }}\r\n                    >\r\n                        Create\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Button from '@material-ui/core/Button';\nimport { Privilege } from '../../enums/privilegeTypes';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\n\nconst useStyles = theme => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmodal: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\twidth: \"100%\",\n\t\tmargin: \"0 auto\",\n\t\toverflow: \"scroll\"\n\t},\n\tgrid: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3),\n\t\twidth: \"50%\"\n\t},\n\tprogress: {\n\t\tdisplay: 'flex',\n\t\t'& > * + *': {\n\t\t\tmarginLeft: theme.spacing(2),\n\t\t},\n\t},\n});\n\nclass UsersTable extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcanEdit: false,\n\t\t\tshowDeleteModal: false,\n\t\t\tusername: '',\n\n\t\t\toriginalUsername:\"\",\n\t\t\tusername: \"\",\n\t\t\tdisplay_name: \"\",\n\t\t\tpassword: \"\",\n\t\t\temail: \"\",\n\t\t\tselectedPrivileges:{\n\t\t\t\t\"model\":false,\n\t\t\t\t\"asset\":false,\n\t\t\t\t\"datacenters\":[],\n\t\t\t\t\"power\":false,\n\t\t\t\t\"audit\":false,\n\t\t\t\t\"admin\":false,\n\t\t\t},\n\t\t\tpassword:\"\",\n\t\t};\n\t}\n\n\tshowDetailedView(index) {\n\t\tthis.props.showDetailedView(index);\n\t}\n\n\tbeginEditing = (event, row) => {\n\t\tthis.setState({ canEdit: true });\n\t\tconsole.log(row);\n\t\tthis.setState({\n\t\t\toriginalUsername:row.Username,\n\t\t\tusername:row.Username,\n\t\t\tdisplay_name:row[\"Display Name\"],\n\t\t\temail:row.Email,\n\t\t\tselectedPrivileges:row.Privilege,\n\t\t\tpassword:row.password,\n\t\t});\n\t}\n\n\tendEditing = () => {\n\t\tthis.setState({ canEdit: false });\n\t\tthis.props.save(\n\t\t\tthis.state.originalUsername,\n\t\t\tthis.state.username,\n\t\t\tthis.state.password,\n\t\t\tthis.state.display_name,\n\t\t\tthis.state.email,\n\t\t\tthis.state.selectedPrivileges\n\t\t);\n\t}\n\n\tshowDeleteModal = (row) => {\n\t\tthis.setState({ showDeleteModal: true, username: row[\"Username\"] });\n\t}\n\n\tcloseDeleteModal = () => {\n\t\tthis.setState({ showDeleteModal: false, username: \"\" });\n\t}\n\n\tdelete = () => {\n\t\tthis.props.delete(this.state.username);\n\t\tthis.closeDeleteModal();\n\t}\n\n\tupdateSelectedPrivileges = (event, values) => {\n        var privs = {\n            \"model\":false,\n            \"asset\":false,\n            \"datacenters\":this.state.selectedPrivileges[\"datacenters\"],\n            \"power\":false,\n            \"audit\":false,\n            \"admin\":false,\n        };\n        values.map(priv => { privs[priv.value] = true; });\n        this.setState({ selectedPrivileges: privs });\n    }\n\n    updateDCPrivilege = (event, values) => {\n        var privs = this.state.selectedPrivileges;\n        privs[\"datacenters\"] = values;\n        this.setState({ selectedPrivileges: privs });\n    }\n\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<TableContainer component={Paper}>\n\t\t\t\t\t<Table style={{ minWidth: 1000 }} aria-label=\"simple table\">\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow >\n\t\t\t\t\t\t\t\t{this.props.columns.map(col => {\n\t\t\t\t\t\t\t\t\tif (col === \"Privilege\") {\n\t\t\t\t\t\t\t\t\t\treturn (this.state.canEdit ? <TableCell align=\"center\"><span id={col} style={{ fontWeight: \"bold\" }}>{col}</span></TableCell>:null)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn <TableCell align=\"center\"><span id={col} style={{ fontWeight: \"bold\" }}>{col}</span></TableCell>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{this.props.vals.map((row, index) => (\n\t\t\t\t\t\t\t\t<TableRow id={index}>\n\t\t\t\t\t\t\t\t\t{this.props.privilege.admin ? <TableCell scope=\"row\" align=\"center\">\n\t\t\t\t\t\t\t\t\t\t{row[\"Username\"] !== \"admin\" ? <div><Button>\n\t\t\t\t\t\t\t\t\t\t\t{this.state.canEdit ? <SaveIcon onClick={this.endEditing} /> : <EditIcon onClick={(e) => { this.beginEditing(e, row) }} />}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t<Button>\n\t\t\t\t\t\t\t\t\t\t\t\t<DeleteIcon onClick={() => this.showDeleteModal(row)} />\n\t\t\t\t\t\t\t\t\t\t\t</Button></div> : null}\n\t\t\t\t\t\t\t\t\t</TableCell> : null}\n\t\t\t\t\t\t\t\t\t{this.props.keys.map(key => {\n\t\t\t\t\t\t\t\t\t\tif (key === \"Privilege\") {\n\t\t\t\t\t\t\t\t\t\t\treturn (this.state.canEdit && row[\"Username\"] !== \"admin\" ? <TableCell scope=\"row\" align=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<PrivilegePicker\n\t\t\t\t\t\t\t\t\t\t\t\t\tdcPrivileges={this.props.privileges}\n\t\t\t\t\t\t\t\t\t\t\t\t\tloading={this.props.loading}\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdatePrivilege={this.updateSelectedPrivileges}\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdateDCPrivilege={this.updateDCPrivilege}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefaultPrivileges={row.Privilege}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</TableCell> : null);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn (<TableCell scope=\"row\" align=\"center\">{row[key]}</TableCell>)\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\n\t\t\t\t<Modal\n\t\t\t\t\taria-labelledby=\"transition-modal-title\"\n\t\t\t\t\taria-describedby=\"transition-modal-description\"\n\t\t\t\t\tclassName={classes.modal}\n\t\t\t\t\topen={this.state.showDeleteModal}\n\t\t\t\t\tonClose={this.closeDeleteModal}\n\t\t\t\t\tcloseAfterTransition\n\t\t\t\t>\n\t\t\t\t\t<Fade in={this.state.showDeleteModal}>\n\t\t\t\t\t\t<Backdrop\n\t\t\t\t\t\t\topen={this.state.showDeleteModal}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className={classes.grid}>\n\t\t\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\t\t\tcontainer\n\t\t\t\t\t\t\t\t\tspacing={1}\n\t\t\t\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\t\t\t\tjustify=\"flex-start\"\n\t\t\t\t\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h5\">Are you sure?</Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={12} md={6} lg={6}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\n\t\t\t\t\t\t\t\t\t\t\tDoing this will remove the user permanently.\n                                </Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.delete}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tYes\n                                </Button>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.closeDeleteModal}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tNo\n                                </Button>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Backdrop>\n\n\t\t\t\t\t</Fade>\n\t\t\t\t</Modal>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withStyles(useStyles)(UsersTable);\n","\r\n\r\nexport const GENERAL_USER_ERROR =  \"There was an error in the backend. Could not perform the given user operation at this time.\";\r\n\r\nexport const USER_SUCCESS_TOKEN = \"success\";\r\nexport const USER_FAILURE_TOKEN = \"error\";\r\n\r\nexport const USER_CREATION_SUCCESS_MESSAGE = \"Successfully created user\";\r\nexport const USER_CREATION_FAILURE_MESSAGE = \"Failed to create user\";\r\n\r\nexport const USER_EDIT_SUCCESS_MESSAGE = \"Successfully updated user\";\r\nexport const USER_EDIT_FAILURE_MESSAGE = \"Failed to update user\";\r\n\r\nexport const USER_DELETE_SUCCESS_MESSAGE = \"Successfully deleted user\";\r\nexport const USER_DELETE_FAILURE_MESSAGE = \"Failed to delete user\";\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Typography,\r\n    Grid,\r\n} from '@material-ui/core';\r\n\r\nimport { UserCommand } from '../enums/UserCommands.ts'\r\nimport FilterUser from '../helpers/FilterUser';\r\nimport CreateUser from '../helpers/CreateUser';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport UsersTable from '../helpers/UsersTable';\r\nimport StatusDisplay from '../../helpers/StatusDisplay';\r\nimport * as UserConstants from \"../UserConstants\";\r\nimport { PrivilegeCommand } from \"../enums/PrivilegeCommands.ts\";\r\nimport * as Constants from \"../../Constants\";\r\nimport makeCreateJSON from \"../helpers/functions/MakeCreateJSON\";\r\nimport makeEditJSON from \"../helpers/functions/MakeEditJSON\";\r\nimport makeDeleteJSON from \"../helpers/functions/MakeDeleteJSON\";\r\nimport makeDetailViewJSON from \"../helpers/functions/MakeDetailViewJSON\";\r\n\r\nconst inputs = [\r\n    'username',\r\n    'email',\r\n    'display_name',\r\n    'privilege',\r\n    'password',\r\n]\r\n\r\nconst columns = [\r\n    'Username',\r\n    'Email',\r\n    'Display Name',\r\n    'Privilege',\r\n]\r\n\r\nconst adminColumns = [\r\n    'Actions',\r\n    'Username',\r\n    'Email',\r\n    'Display Name',\r\n    'Privilege'\r\n]\r\n\r\nconst columnLookup = {\r\n    \"username\": \"Username\",\r\n    \"email\": \"Email\",\r\n    \"display_name\": \"Display Name\",\r\n    'privilege': 'Privilege'\r\n}\r\n\r\nconst blankSearch = {\r\n    \"filter\":\r\n    {\r\n        \"username\": \"\",\r\n        \"display_name\": \"\",\r\n        \"email\": \"\",\r\n        \"privilege\": {\r\n            \"model\": false,\r\n            \"asset\": false,\r\n            \"datacenters\": [],\r\n            \"power\": false,\r\n            \"audit\": false,\r\n            \"admin\": false,\r\n        }\r\n    }\r\n}\r\n\r\nexport default class UsersView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            statusOpen: false,\r\n            statusSeverity: '',\r\n            statusMessage: '',\r\n            searchUsernm: '',\r\n            searchEml: '',\r\n            searchDspNm: '',\r\n            searchPriv: '',\r\n            deleteUsername: '',\r\n            viewUser: '',\r\n            csvData: [],\r\n            showDetailedView: false,\r\n            detailViewLoading: false,\r\n            originalUsername: '',\r\n            allDCPrivileges: [],\r\n            loadingPrivileges: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchUsers(blankSearch);\r\n        this.getPrivileges();\r\n    }\r\n\r\n    createUser = (username, password, display_name, email, privileges, completion) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.create),\r\n            makeCreateJSON(username, password, display_name, email, privileges)\r\n        ).then(response => {\r\n            if (response.data.message === UserConstants.USER_SUCCESS_TOKEN) {\r\n                completion(true);\r\n                this.setDisplayStatus(true, UserConstants.USER_CREATION_SUCCESS_MESSAGE, UserConstants.USER_SUCCESS_TOKEN);\r\n                this.searchUsers(blankSearch);\r\n            } else {\r\n                completion(false);\r\n                this.setDisplayStatus(true, response.data.message, UserConstants.USER_FAILURE_TOKEN)\r\n            }\r\n        });\r\n    }\r\n\r\n    editUser = (originalUsername, username, password, display_name, email, privileges, completion) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.edit),\r\n            makeEditJSON(originalUsername, username, password, display_name, email, privileges)\r\n        ).then(response => this.processResponse(response, UserConstants.USER_EDIT_SUCCESS_MESSAGE, UserConstants.USER_EDIT_FAILURE_MESSAGE));\r\n    }\r\n\r\n    deleteUser = (username) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.delete),\r\n            makeDeleteJSON(username)\r\n        ).then(response =>\r\n            this.processResponse(response, UserConstants.USER_DELETE_SUCCESS_MESSAGE, UserConstants.USER_DELETE_FAILURE_MESSAGE)\r\n        );\r\n    }\r\n\r\n    detailViewUser = (username) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.detailView),\r\n            makeDetailViewJSON(username)\r\n        ).then(response => this.setState({ detailedValues: response.data['user'], detailViewLoading: false }));\r\n    }\r\n\r\n    searchUsers = (filters) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.search),\r\n            filters,\r\n        ).then(response => {\r\n            const models = response.data['users'] === undefined ? [] : response.data['users'];\r\n            var rows = [];\r\n            Object.values(models).forEach(model => {\r\n                var row = {};\r\n                Object.keys(model).forEach(key => {\r\n                    if (key in columnLookup) {\r\n                        row[columnLookup[key]] = model[key];\r\n                    } else {\r\n                        row[key] = model[key];\r\n                    }\r\n                });\r\n                rows.push(row);\r\n            });\r\n\r\n            this.setState({ items: rows });\r\n        });\r\n    }\r\n\r\n    getPrivileges = () => {\r\n        axios.get(getURL(Constants.PERMISSIONS_MAIN_PATH, PrivilegeCommand.GET_PRIVILEGES)).then(\r\n            response => {\r\n                try {\r\n                    this.setState({\r\n                        allDCPrivileges: response.data.datacenters,\r\n                        loadingPrivileges: false,\r\n                    });\r\n                } catch {\r\n                    this.setState({\r\n                        allDCPrivileges: [],\r\n                        loadingPrivileges: false,\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setDisplayStatus = (open, message, severity) => {\r\n        this.setState({ statusOpen: open, statusMessage: message, statusSeverity: severity });\r\n    }\r\n\r\n    showDetailedView = (id) => {\r\n        this.setState({\r\n            showDetailedView: true,\r\n            detailViewLoading: true,\r\n            originalUsername: this.state.items[id]['username'],\r\n        });\r\n\r\n        var username = this.state.items[id]['username'];\r\n\r\n        this.detailViewUser(username);\r\n        //this.setState({ detailedValues: Constants.testUserArray[id], detailViewLoading:false})\r\n    }\r\n\r\n    closeDetailedView = () => {\r\n        this.setState({ showDetailedView: false })\r\n    }\r\n\r\n    updateUserEdited = (event) => {\r\n        const newDetails = this.state.detailedValues;\r\n        newDetails[event.target.name] = event.target.value;\r\n        this.setState({ detailedValues: newDetails });\r\n        this.forceUpdate()\r\n    }\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ statusOpen: false })\r\n    }\r\n\r\n    processResponse = (response, successMessage, failureMessage) => {\r\n        console.log(response);\r\n        if (response.data.message === UserConstants.USER_SUCCESS_TOKEN) {\r\n            this.setDisplayStatus(true, successMessage, UserConstants.USER_SUCCESS_TOKEN);\r\n            this.searchUsers(blankSearch);\r\n        } else {\r\n            this.setDisplayStatus(true, response.data.message, UserConstants.USER_FAILURE_TOKEN);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatusDisplay\r\n                    open={this.state.statusOpen}\r\n                    severity={this.state.statusSeverity}\r\n                    closeStatus={this.closeShowStatus}\r\n                    message={this.state.statusMessage}\r\n                />\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{ margin: \"0px\", maxWidth: \"95vw\" }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\">\r\n                            Users\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={6}>\r\n                        {(this.props.privilege.admin) ?\r\n                            (<div>\r\n                                <CreateUser\r\n                                    showCreateModal={this.state.showCreateModal}\r\n                                    closeCreateModal={this.closeCreateModal}\r\n                                    createModel={this.createUser}\r\n                                    updateModelCreator={this.updateUserCreator}\r\n                                    inputs={inputs}\r\n                                    options={[]}\r\n                                    useAutocomplete={false}\r\n                                    loading={this.state.loadingPrivileges}\r\n                                    privileges={this.state.allDCPrivileges}\r\n                                />\r\n                            </div>) : null}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={6}>\r\n                        <FilterUser\r\n                            updateSearchText={this.updateSearchText}\r\n                            search={this.searchUsers}\r\n                            filters={columns}\r\n                            loading={this.state.loadingPrivileges}\r\n                            privileges={this.state.allDCPrivileges}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <UsersTable\r\n                            columns={this.props.privilege.admin ? adminColumns : columns}\r\n                            vals={this.state.items}\r\n                            keys={columns}\r\n                            privilege={this.props.privilege}\r\n                            showDetailedView={this.showDetailedView}\r\n                            filters={this.props.privilege.admin ? adminColumns : columns}\r\n                            delete={this.deleteUser}\r\n                            save={this.editUser}\r\n                            editUser={this.updateEditUser}\r\n                            loading={this.state.loadingPrivileges}\r\n                            privileges={this.state.allDCPrivileges}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export enum AssetInput {\r\n    MODEL = 'model',\r\n    HOSTNAME = 'hostname',\r\n    RACK = 'rack',\r\n    RACK_U = 'rack_position',\r\n    RACK_ORIGINAL = 'rackOriginal',\r\n    RACK_U_ORIGINAL = 'rack_positionOriginal',\r\n    OWNER = 'owner',\r\n    COMMENT = 'comment',\r\n    DATACENTER = 'datacenter_id',\r\n    TAGS = 'tags',\r\n    MAC_ADDRESS = 'mac_address',\r\n    NETWORK_CONNECTIONS = 'network_connections',\r\n    POWER_CONNECTIONS = 'power_connections',\r\n    ASSET_NUMBER = 'asset_number',\r\n    BLADE_CHASSIS = 'chassis_hostname',\r\n    BLADE_POSITION = 'chassis_slot',\r\n}\r\n","export enum AssetCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search = 'search/',\r\n    GET_ALL_MODELS = 'assistedmodel/',\r\n    GET_ALL_OWNERS = 'assistedowner/',\r\n    GET_ALL_DATACENTERS = 'assisteddatacenter/',\r\n    GET_ALL_HOSTNAME = 'assistedhostname/',\r\n    UPLOAD_FILE = 'import/',\r\n    EXPORT_FILE = 'export/',\r\n    GET_NEXT_ASSET_NUM = 'nextAssetNumber/',\r\n    GET_NETWORK_NEIGHBORHOOD = \"networkNeighborhood/\",\r\n    CHANGE_PLAN_CREATE = 'createplan/',\r\n    CHANGE_PLAN_DELETE = 'deleteplan/',\r\n    CHANGE_PLAN_EDIT = 'editplan/',\r\n    CHANGE_PLAN_EXECUTE = 'execute/',\r\n    CHANGE_PLAN_GET_PLANS = 'getplans/',\r\n    CHANGE_PLAN_CREATE_ACTION = 'createaction/',\r\n    CHANGE_PLAN_EDIT_ACTION = 'editaction/',\r\n    CHANGE_PLAN_DELETE_ACTION = 'deleteaction/',\r\n    CHANGE_PLAN_GET_ACTIONS = 'getactions/',\r\n    GENERATE_LABELS = 'labelgen/',\r\n    DECOMMISSION = \"decommission_asset/\",\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeCreateJSON(username, password, display_name, email, privileges) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t\t'password': password,\r\n\t\t'display_name': display_name,\r\n\t\t'email': email,\r\n\t\t'privilege': privileges,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeEditJSON(originalUsername, username, password, display_name, email, privileges) {\r\n\treturn {\r\n\t\t'username_original':originalUsername,\r\n\t\t'username': username,\r\n\t\t'password': password,\r\n\t\t'display_name': display_name,\r\n\t\t'email': email,\r\n\t\t'privilege': privileges,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeDeleteJSON(username) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeDetailViewJSON(username) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t}\r\n}\r\n","\r\n\r\n\r\nexport const GENERAL_ASSET_ERROR =  \"There was an error in the backend. Could not perform the given asset operation at this time.\";\r\n\r\n\r\nexport const ASSETS_MAIN_PATH = 'instances/';\r\nexport const CHANGE_PLAN_PATH = 'changeplans/';\r\nexport const ASSET_DOWNLOAD_FILE_NAME = 'assets.csv';\r\nexport const SUCCESS_TOKEN = \"success\";\r\nexport const ERROR_TOKEN = \"error\";\r\n","import React from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport axios from \"axios\";\r\n\r\nimport { Typography, Paper } from '@material-ui/core';\r\n\r\nimport { AssetCommand } from \"../enums/AssetCommands.ts\";\r\nimport getURL from \"../../helpers/functions/GetURL\"\r\nimport * as Constants from \"../../Constants\";\r\n\r\n// nodes: [\r\n//     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\r\n//     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\r\n//     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\r\n//     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\r\n//     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\r\n//   ],\r\n//   edges: [\r\n//     { from: 1, to: 2 },\r\n//     { from: 1, to: 3 },\r\n//     { from: 2, to: 4 },\r\n//     { from: 2, to: 5 },\r\n//     { from: 5, to: 2 }\r\n//   ]\r\n//\r\n// vals: {\r\n//      \"host1\": [ \"host2\", \"host4\" ],\r\n//      \"host3\": [\"host5\", \"host7\", \"host9\", \"host11\"]\r\n// }\r\n\r\nconst useStyles = theme => ({\r\n\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n});\r\n\r\nfunction getGraph(primaryHosts, host) {\r\n    if (host === \"\") {\r\n        return {};\r\n    }\r\n\r\n    var hostnameMapping = {};\r\n    const hostID = 0;\r\n\r\n    var nodes = [];\r\n    nodes.push({\r\n        id: hostID,\r\n        label: \"\" + host,\r\n        color: \"#F5F5DC\"\r\n    });\r\n\r\n    hostnameMapping[host] = hostID;\r\n\r\n    var edges = [];\r\n    var primaryHostID = 1;\r\n\r\n    try {\r\n        console.log(\"nodes and edges\");\r\n        console.log(primaryHosts);\r\n        Object.entries(primaryHosts).map(([primaryHost, secondaryHosts]) => {\r\n            if (primaryHost !== \"message\" && primaryHost !== \"\" && primaryHost !== \"metadata\") {\r\n                if (hostnameMapping[primaryHost] !== undefined) {\r\n                    edges.push({ from: hostID, to: hostnameMapping[primaryHost] });\r\n                    edges.push({ from: hostnameMapping[primaryHost], to: hostID });\r\n                } else {\r\n                    nodes.push({\r\n                        id: primaryHostID,\r\n                        label: \"\" + primaryHost,\r\n                        color: \"#F0FFFF\"\r\n                    });\r\n                    edges.push({ from: hostID, to: primaryHostID });\r\n                    edges.push({ from: primaryHostID, to: hostID });\r\n                    hostnameMapping[primaryHost] = primaryHostID;\r\n                }\r\n                console.log(\"nodes and edges\");\r\n                var secondaryHostID = primaryHostID + 1;\r\n                try {\r\n                    secondaryHosts.map(secondaryHost => {\r\n                        if (secondaryHost !== \"\") {\r\n                            if (hostnameMapping[secondaryHost] !== undefined) {\r\n                                edges.push({ from: primaryHostID, to: hostnameMapping[secondaryHost] });\r\n                                edges.push({ to: primaryHostID, from: hostnameMapping[secondaryHost] });\r\n                            } else {\r\n                                nodes.push({\r\n                                    id: secondaryHostID,\r\n                                    label: \"\" + secondaryHost,\r\n                                    color: \"#7FFFD4\"\r\n                                });\r\n                                edges.push({ from: primaryHostID, to: secondaryHostID });\r\n                                edges.push({ to: primaryHostID, from: secondaryHostID });\r\n                                hostnameMapping[secondaryHost] = secondaryHostID;\r\n                                secondaryHostID++;\r\n                            }\r\n                        }\r\n                    });\r\n                } catch {\r\n\r\n                }\r\n\r\n                console.log(\"nodes and edges\");\r\n                primaryHostID = secondaryHostID + 1;\r\n            }\r\n        });\r\n\r\n        console.log(\"nodes and edges\");\r\n        console.log(nodes);\r\n        console.log(edges);\r\n        return { nodes: nodes, edges: edges };\r\n\r\n    } catch (Exception) {\r\n        console.log(\"in here\")\r\n        console.log(Exception);\r\n        return { nodes: [], edges: [] }\r\n    }\r\n}\r\n\r\nclass NetworkGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            graph: {\r\n                nodes: [],\r\n                edges: [],\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.GET_NETWORK_NEIGHBORHOOD), {\r\n            \"asset_number\": this.props.assetNum,\r\n        }).then(response => {\r\n            this.setState({ graph: getGraph(response.data, this.props.host) });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            layout: {\r\n                hierarchical: false\r\n            },\r\n            edges: {\r\n                color: \"#000000\"\r\n            },\r\n            height: \"500px\",\r\n            interaction: {\r\n                dragNodes: false,\r\n                dragView: false,\r\n            }\r\n        };\r\n\r\n        const events = {\r\n            select: function (event) {\r\n                var { nodes, edges } = event;\r\n            }\r\n        };\r\n\r\n        return (\r\n            <span>\r\n                <Paper elevation={3} style={{\r\n                    div: {\r\n                        width: \"70%\",\r\n                        margin: \"0 auto\",\r\n                    },\r\n                }}>\r\n                    {this.props.isDecommissioned ?\r\n                        <Graph\r\n                            graph={getGraph(this.props.decomAsset.network_neighborhood, this.props.host)}\r\n                            options={options}\r\n                            events={events}\r\n                            getNetwork={network => {\r\n                                //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n                            }}\r\n                        />\r\n                        :\r\n                        this.state.graph.edges.length === 0 ?\r\n                            <Typography>{this.props.isDecommissioned ? \"This asset was not connected to any other assets\" : \"This asset is not currently connected to any other assets\"}</Typography> :\r\n                            <Graph\r\n                                graph={this.state.graph}\r\n                                options={options}\r\n                                events={events}\r\n                                getNetwork={network => {\r\n                                    //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n                                }}\r\n                            />\r\n                    }\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n\r\nexport default NetworkGraph;\r\n","/**\r\n * For MAC addresses, the system should accept a six-byte hexadecimal value\r\n * with any byte seperator punctuation (including colon, dash, underscore, and\r\n * no seperator at all). Upon accepting the value, it should be formatted into a\r\n * lower-case colon-delimited canonical form.\r\n *\r\n * @param {string} val\r\n */\r\n\r\nexport default function stringToMac(val) {\r\n    // A  A  :  A  A  :  A  A  :  A  A  :  A  A  :  A  A\r\n    // 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16\r\n\r\n    var returnVal = \"\";\r\n\r\n    returnVal = val.replace(/[^0-9A-Fa-f]*/g, \"\").toLowerCase();\r\n\r\n    if (returnVal.length > 12) {\r\n        returnVal = returnVal.substring(0, 12);\r\n    }\r\n\r\n    if (returnVal.length === 1 || returnVal.length === 2) {\r\n        return returnVal;\r\n    }\r\n\r\n    if (returnVal.length === 3 || returnVal.length === 4) {\r\n        return returnVal.substring(0, 2) + \":\" + returnVal.substring(2);\r\n    }\r\n\r\n    if (returnVal.length === 5 || returnVal.length === 6) {\r\n        return returnVal.substring(0, 2) + \":\" + returnVal.substring(2, 4) + \":\" + returnVal.substring(4);\r\n    }\r\n\r\n    if (returnVal.length === 7 || returnVal.length === 8) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6);\r\n    }\r\n\r\n    if (returnVal.length === 9 || returnVal.length === 10) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6, 8)\r\n        + \":\" + returnVal.substring(8);\r\n    }\r\n\r\n    if (returnVal.length === 11 || returnVal.length === 12) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6, 8)\r\n        + \":\" + returnVal.substring(8, 10)\r\n        + \":\" + returnVal.substring(10,12);\r\n    }\r\n\r\n    return returnVal;\r\n}\r\n","// React\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport { CompactPicker } from 'react-color';\r\n\r\n// Core\r\nimport { TextField, Button, Tooltip, CircularProgress, Grid } from \"@material-ui/core\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Radio, RadioGroup, FormControl, FormControlLabel, FormHelperText, Paper } from '@material-ui/core';\r\nimport { IconButton, Slide, InputLabel, MenuItem, Select, Modal, Backdrop } from '@material-ui/core';\r\n\r\n// Lab\r\nimport { Autocomplete, Alert } from '@material-ui/lab';\r\n\r\n//Icons\r\nimport PowerIcon from '@material-ui/icons/Power';\r\nimport PowerOffIcon from '@material-ui/icons/PowerOff';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport * as Constants from \"../../Constants\";\r\nimport { Typography } from '@material-ui/core';\r\nimport stringToMac from \"./functions/StringToMacAddress\"\r\nimport stringToRack from \"./functions/StringToRack\";\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst emptySearch = {\r\n    \"filter\": {\r\n        \"vendor\": null,\r\n        \"model_number\": null,\r\n        \"height\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"username\": null,\r\n        \"display_name\": null,\r\n        \"email\": null,\r\n        \"privilege\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"starting_rack_letter\": null,\r\n        \"ending_rack_letter\": null,\r\n        \"starting_rack_number\": null,\r\n        \"ending_rack_number\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null\r\n    },\r\n    \"datacenter_name\": \"\",\r\n}\r\n\r\nconst searchPath = \"search/\";\r\nconst left = \"left\";\r\nconst right = \"right\";\r\nconst off = \"off\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogDiv: {\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    form: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n    buttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass EditAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // next available asset number\r\n            loadingAssetNumber: true,\r\n\r\n            // model information\r\n            loadingModels: true,\r\n            modelList: [],\r\n            networkList: null,\r\n            powerPortList: null,\r\n\r\n            // owner information\r\n            loadingOwners: true,\r\n            ownerList: [],\r\n\r\n            // datacenter information\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n\r\n            // hostname information\r\n            loadingHostnames: true,\r\n            assetNumList: [],\r\n            assetNumToModelList: null,\r\n\r\n            model: \"\",\r\n            hostname: \"\",\r\n            rack: \"\",\r\n            rackU: -1,\r\n            owner: \"\",\r\n            comment: \"\",\r\n            datacenter_name: \"\",\r\n            tags: [],\r\n            network_connections: null,\r\n            power_connections: null,\r\n            asset_number: -1,\r\n            blade_chassis: \"\",\r\n            blade_position: null,\r\n            mount_type: null,\r\n\r\n            chassisList: [],\r\n            mountTypes: null,\r\n\r\n            selectedConnection: null,\r\n\r\n            statusOpen: false,\r\n            statusMessage: \"\",\r\n            statusSeverity: \"\",\r\n\r\n            showModal: false,\r\n\r\n            powerPortState: null,\r\n            leftRight: null,\r\n            availableConnections: false,\r\n            portOptions: [],\r\n\r\n            canSubmit: false,\r\n            updated: false,\r\n            showConfirmationBox: false,\r\n\r\n            inputs: {\r\n                \"model\": createInputs(AssetInput.MODEL, \"Model\", false, \"A reference to an existing model\"),\r\n                \"hostname\": createInputs(AssetInput.HOSTNAME, \"Hostname\", false, \"A short string compliant with RFC 1034’s definition of 'label'\"),\r\n                \"rack\": createInputs(AssetInput.RACK, \"Rack\", false, \"The rack the equipment is installed in, written as a row letter and rack number, e.g. 'B12'\"),\r\n                \"rackU\": createInputs(AssetInput.RACK_U, \"Rack U\", false, \"An integer indicating the vertical location of the bottom of the equipment (e.g. '5')\"),\r\n                \"owner\": createInputs(AssetInput.OWNER, \"Owner\", false, \"A reference to an existing user on the system who owns this equipment\"),\r\n                \"comment\": createInputs(AssetInput.COMMENT, \"Comments\", false, \"Any additional information associated with this asset\"),\r\n                \"datacenter\": createInputs(AssetInput.DATACENTER, \"Datacenter\", false, \"A reference to an existing datacenter\"),\r\n                \"macAddress\": createInputs(AssetInput.MAC_ADDRESS, \"Mac Address\", false, \"A 6-byte hexadecimal string per network port shown canonically in lower case with colon delimiters (e.g., '00:1e:c9:ac:78:aa').\\nA hostname is required to enter in this value\"),\r\n                \"networkConnections\": createInputs(AssetInput.NETWORK_CONNECTIONS, \"Port Name\", false, \"For each network port, a reference to another network port on another piece of gear\"),\r\n                \"powerConnections\": createInputs(AssetInput.POWER_CONNECTIONS, \"Power Connections\", false, \"Choice of PDU port number (0 means not plugged in)\"),\r\n                \"assetNum\": createInputs(AssetInput.ASSET_NUMBER, \"Asset Number\", false, \"A six-digit serial number unique associated with an asset.\"),\r\n                \"bladeChassis\": createInputs(AssetInput.BLADE_CHASSIS, \"Blade Chassis\", false, \"A reference to a blade chassis asset\"),\r\n                \"bladePosition\": createInputs(AssetInput.BLADE_POSITION, \"Blade Position\", false, \"An integer indicating the slot number of a blade\"),\r\n            },\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        if ((this.props.defaultValues.model !== this.state.model\r\n            || this.props.defaultValues.hostname !== this.state.hostname\r\n            || this.props.defaultValues.rack !== this.state.rack\r\n            || this.props.defaultValues.rack_position !== this.state.rackU\r\n            || this.props.defaultValues.owner !== this.state.owner\r\n            || this.props.defaultValues.comment !== this.state.comment\r\n            || this.props.defaultValues.datacenter_name !== this.state.datacenter_name\r\n            || this.props.defaultValues.tags !== this.state.tags\r\n            || this.props.defaultValues.network_connections !== this.state.network_connections\r\n            || this.props.defaultValues.power_connections !== this.state.power_connections\r\n            || this.props.defaultValues.asset_number !== this.state.asset_number)\r\n            && !this.state.updated\r\n        ) {\r\n            this.setState({\r\n                model: this.props.defaultValues.model,\r\n                hostname: this.props.defaultValues.hostname,\r\n                rack: this.props.defaultValues.rack,\r\n                rackU: this.props.defaultValues.rack_position,\r\n                owner: this.props.defaultValues.owner,\r\n                comment: this.props.defaultValues.comment,\r\n                datacenter_name: this.props.defaultValues.datacenter_name,\r\n                tags: this.props.defaultValues.tags,\r\n                network_connections: this.props.defaultValues.network_connections,\r\n                power_connections: this.getPowerPortFromProps(this.props.defaultValues.power_connections),\r\n                asset_number: this.props.defaultValues.asset_number,\r\n                customCPU: this.props.defaultValues.cpu,\r\n                customColor: this.props.defaultValues.display_color,\r\n                customMemory: this.props.defaultValues.memory,\r\n                customStorage: this.props.defaultValues.storage,\r\n                leftRight: this.getPowerFromProps(this.props.defaultValues.power_connections),\r\n                mount_type: this.props.defaultValues.mount_type,\r\n                blade_chassis: this.props.defaultValues.chassis_hostname,\r\n                blade_position: this.props.defaultValues.chassis_slot,\r\n            });\r\n        } else {\r\n            //this.setState({ updated: true, });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLists();\r\n    }\r\n\r\n    getPowerFromProps = (pwrCons) => {\r\n        var pwr = [];\r\n\r\n        pwrCons.map(pwrCon => {\r\n            if (pwrCon.includes(\"L\")) {\r\n                pwr.push(\"left\");\r\n            } else if (pwrCon.includes(\"R\")) {\r\n                pwr.push(\"right\");\r\n            } else {\r\n                pwr.push(\"off\");\r\n            }\r\n        })\r\n\r\n        return pwr;\r\n    }\r\n\r\n    getPowerPortFromProps = (pwrCons) => {\r\n        var pwrPorts = [];\r\n\r\n        try {\r\n            pwrCons.map(pwrCon => {\r\n                pwrPorts.push(parseInt(pwrCon.substring(1)));\r\n            });\r\n        } catch {\r\n\r\n        }\r\n\r\n        return pwrPorts;\r\n    }\r\n\r\n    getLists = () => {\r\n        this.getModelList();\r\n        this.getOwnerList();\r\n        this.getDatacenterList();\r\n        this.getAssetList();\r\n        this.getChassisList();\r\n    }\r\n\r\n    getChassisList = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getchassis\")\r\n        ).then(\r\n            response => {\r\n                var instances = response.data.instances;\r\n                var instanceNames = [];\r\n\r\n                instances.map(instance => {\r\n                    instanceNames.push(instance.hostname);\r\n                });\r\n\r\n                this.setState({ chassisList: instanceNames });\r\n            }\r\n        )\r\n    }\r\n\r\n    getModelList = () => {\r\n        axios.post(\r\n            getURL(Constants.MODELS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var models = response.data.models;\r\n\r\n                    var modelNames = [];\r\n                    var networkNames = {};\r\n                    var powerPortNames = {};\r\n                    var mountType = {};\r\n\r\n                    models.map(model => {\r\n                        var modelKey = model.vendor + \" \" + model.model_number;\r\n                        modelNames.push(modelKey);\r\n                        networkNames[modelKey] = model.ethernet_ports;\r\n                        powerPortNames[modelKey] = parseInt(model.power_ports);\r\n                        mountType[modelKey] = model.mount_type;\r\n                    });\r\n\r\n                    this.setState({ loadingModels: false, modelList: modelNames, networkList: networkNames, powerPortList: powerPortNames, mountTypes: mountType });\r\n                });\r\n    }\r\n\r\n    getOwnerList = () => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, searchPath), {\r\n            \"filter\":\r\n            {\r\n                \"username\": \"\",\r\n                \"display_name\": \"\",\r\n                \"email\": \"\",\r\n                \"privilege\": {\r\n                    \"model\": false,\r\n                    \"asset\": false,\r\n                    \"datacenters\": [],\r\n                    \"power\": false,\r\n                    \"audit\": false,\r\n                    \"admin\": false\r\n                }\r\n            }\r\n        }).then(\r\n            response => {\r\n                try {\r\n                    var users = [];\r\n                    response.data.users.map(user => users.push(user.username + \"/\" + user.display_name));\r\n                    this.setState({ loadingOwners: false, ownerList: users });\r\n                } catch {\r\n                    this.setState({ loadingOwners: false })\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n                response => {\r\n                    var datacenters = [];\r\n                    response.data.datacenters.map(datacenter => {\r\n                        if (this.props.privilege.datacenters.length > 0) {\r\n                            if (this.props.privilege.datacenters[0] === \"*\" || this.props.privilege.datacenters.includes(datacenter.abbreviation) || this.props.privilege.asset || this.props.privilege.admin) {\r\n                                datacenters.push(datacenter);\r\n                            }\r\n                        }\r\n                    });\r\n                    this.setState({ loadingDatacenters: false, datacenterList: datacenters })\r\n                });\r\n\r\n    }\r\n\r\n    getAssetList = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var instances = response.data.instances;\r\n\r\n                    var hostnames = [];\r\n                    var hostToModel = {};\r\n                    instances.map(instance => {\r\n                        hostnames.push(instance.hostname);\r\n                        hostToModel[instance.hostname] = instance.model;\r\n                    })\r\n\r\n                    this.setState({ loadingHostnames: false, assetNumList: hostnames, assetNumToModelList: hostToModel }, this.availableNetworkConnections());\r\n                });\r\n    }\r\n\r\n    editAsset = (event) => {\r\n        event.preventDefault();\r\n        var json = this.createJSON();\r\n        console.log(json);\r\n        var changePlanJSON = {\r\n            \"change_plan_id\": this.props.changePlanID,\r\n            \"step\": this.props.changePlanStep,\r\n            \"action\": \"update\",\r\n            \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n            \"new_record\": json\r\n        };\r\n        var url = this.props.changePlanActive ? getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION) : getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.edit);\r\n        axios.post(\r\n            url,\r\n            this.props.changePlanActive ? changePlanJSON : json\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                    this.props.incrementChangePlanStep();\r\n                    this.setState({ statusOpen: true, statusMessage: \"Successfully saved edits\", statusSeverity: AssetConstants.SUCCESS_TOKEN });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            });\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        console.log(event.target.value);\r\n        var model = event.target.value;\r\n\r\n        if (model !== \"\") {\r\n            var ports = this.state.networkList[model];\r\n            var networkConns = {};\r\n\r\n            if (ports !== null) {\r\n                ports.map(port => {\r\n                    var defaultNetworkPort = {\r\n                        \"mac_address\": \"\",\r\n                        \"connection_hostname\": \"\",\r\n                        \"connection_port\": \"\",\r\n                    }\r\n                    networkConns[port] = defaultNetworkPort;\r\n                });\r\n            }\r\n\r\n            this.setState({ mount_type: this.state.mountTypes[model] });\r\n        } else {\r\n            var networkConns = {};\r\n        }\r\n\r\n\r\n        this.setState({ model: model, network_connections: networkConns }, () => { });\r\n    }\r\n\r\n    updateBladeChassis = (event) => {\r\n        this.setState({ blade_chassis: event.target.value });\r\n    }\r\n\r\n    updateBladePosition = (event) => {\r\n        this.setState({ blade_position: event.target.value });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value });\r\n    }\r\n\r\n    updateRack = (event) => {\r\n        var rackVal = stringToRack(event.target.value);\r\n        this.setState({ rack: rackVal }, () => { });\r\n    }\r\n\r\n    updateRackU = (event) => {\r\n        this.setState({ rackU: event.target.value }, () => { });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        this.setState({ owner: event.target.value }, () => { });\r\n    }\r\n\r\n    updateComment = (event) => {\r\n        this.setState({ comment: event.target.value }, () => { });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        var isOffline = false;\r\n\r\n        this.state.datacenterList.map(dc => {\r\n            if (dc.name === event.target.value) {\r\n                isOffline = dc.is_offline_storage;\r\n            }\r\n        });\r\n\r\n        this.setState({ datacenter_name: event.target.value, datacenterIsOffline: isOffline }, () => { });\r\n    }\r\n\r\n    updateTags = (event) => {\r\n        this.setState({ tags: event.target.value }, () => { });\r\n    }\r\n\r\n    changeNetworkMacAddress = (event, port) => {\r\n        var val = stringToMac(event.target.value);\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].mac_address = val;\r\n            return { network_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    changeNetworkHostname = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].connection_hostname = val;\r\n            return { network_connections };\r\n        }, () => { this.getPortOptions(val); });\r\n    }\r\n\r\n    changeNetworkPort = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port] = (network_connections[port] === null) ? {} : network_connections[port];\r\n            network_connections[port].connection_port = val;\r\n            return { network_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    updatePowerPort = (event, port) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let power_connections = Object.assign({}, prevState.power_connections);\r\n            power_connections[port] = val;\r\n            return { power_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    changePowerPortState = (event, portNum) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let leftRight = Object.assign({}, prevState.leftRight);\r\n            leftRight[portNum] = val;\r\n            return { leftRight };\r\n        }, () => { });\r\n    }\r\n\r\n    updateAssetNumber = (event) => {\r\n        this.setState({ asset_number: event.target.value }, () => { });\r\n    }\r\n\r\n    getPowerConnections = () => {\r\n        if (this.state.leftRight === null) {\r\n            return [];\r\n        }\r\n\r\n        var pwrConns = [];\r\n        var defaultValue = 1;\r\n        Object.entries(this.state.leftRight).map(([key, value]) => {\r\n            var num = this.state.power_connections === null ? defaultValue : this.state.power_connections[key];\r\n            switch (value) {\r\n                case left:\r\n                    pwrConns.push(\"L\" + num);\r\n                    break;\r\n                case right:\r\n                    pwrConns.push(\"R\" + num);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return pwrConns;\r\n    }\r\n\r\n    createJSON = () => {\r\n        return {\r\n            \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n            \"model\": this.state.model,\r\n            \"hostname\": this.state.hostname,\r\n            \"rack\": this.state.rack,\r\n            \"rack_position\": this.state.rackU,\r\n            \"owner\": this.state.owner.split(\"/\")[0],\r\n            \"comment\": this.state.comment,\r\n            \"datacenter_name\": this.state.datacenter_name,\r\n            \"tags\": this.state.tags,\r\n            \"network_connections\": ((this.state.network_connections === null) ? {} : this.state.network_connections),\r\n            \"power_connections\": this.getPowerConnections(),\r\n            'asset_number': this.state.asset_number,\r\n            \"chassis_hostname\": this.state.blade_chassis,\r\n            \"chassis_slot\": this.state.blade_position,\r\n            \"display_color\": this.state.customColor,\r\n            \"cpu\": this.state.customCPU,\r\n            \"memory\": this.state.customMemory,\r\n            \"storage\": this.state.customStorage,\r\n        }\r\n    }\r\n\r\n    availableNetworkConnections = () => {\r\n        var availableNetworks = false;\r\n\r\n        var assets = this.state.assetNumList;\r\n        assets.map(asset => {\r\n            if (Object.keys(this.state.networList[this.state.assetNumToModelList[asset]].length).length > 0) {\r\n                availableNetworks = true;\r\n            }\r\n        });\r\n        this.setState({ availableConnections: availableNetworks });\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.props.fetchAllAssets();\r\n    }\r\n\r\n    statusClose = () => {\r\n        this.setState({ statusOpen: false, statusMessage: \"\", statusSeverity: \"\" });\r\n    }\r\n\r\n    getPortOptions = (hostname) => {\r\n        try {\r\n            this.setState({ portOptions: this.state.networkList[this.state.assetNumToModelList[hostname]] });\r\n        } catch {\r\n\r\n        }\r\n    }\r\n\r\n    getModel = () => {\r\n        return this.state.model;\r\n    }\r\n\r\n    displayNetworks = () => {\r\n        var model = this.getModel();\r\n        return (this.state.networkList && this.state.networkList[model] && !this.state.datacenterIsOffline);\r\n    }\r\n\r\n    getNetworkConnections = () => {\r\n        return this.state.network_connections;\r\n    }\r\n\r\n    getMacValue = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].mac_address : \"\"\r\n    }\r\n\r\n    getConnectingHostname = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].connection_hostname : \"\"\r\n    }\r\n\r\n    getConnectionPort = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].connection_port : \"\"\r\n    }\r\n\r\n    connectionsDisabled = () => {\r\n        return this.state.hostname === \"\";\r\n    }\r\n\r\n    deleteAsset = () => {\r\n        this.setState({ showConfirmationBox: false })\r\n        axios.post(getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.delete),\r\n            { \"asset_number\": this.props.defaultValues.asset_number, \"datacenter_name\": this.props.defaultValues.datacenter_name }).then(\r\n                response => {\r\n                    if (response.data.message === \"success\") {\r\n                        this.props.close();\r\n                        this.props.fetchAllAssets();\r\n                        this.props.showStatus(true, \"success\", \"Successfully deleted asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                }\r\n            )\r\n    }\r\n\r\n    decommissionAsset = () => {\r\n        if (this.props.changePlanActive) {\r\n            var json = this.createJSON();\r\n            console.log(json);\r\n            var changePlanJSON = {\r\n                \"change_plan_id\": this.props.changePlanID,\r\n                \"step\": this.props.changePlanStep,\r\n                \"action\": \"decommission\",\r\n                \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n                \"new_record\": json\r\n            };\r\n            var url = getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION);\r\n            axios.post(\r\n                url,\r\n                changePlanJSON\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                        this.props.incrementChangePlanStep();\r\n                        this.props.showStatus(true, \"success\", \"Successfully decommissioned asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                });\r\n        } else {\r\n            axios.post(getURL(Constants.DECOMMISSIONS_MAIN_PATH, AssetCommand.DECOMMISSION),\r\n                {\r\n                    \"asset_number\": this.props.defaultValues.asset_number,\r\n                    \"datacenter_name\": this.props.defaultValues.datacenter_name,\r\n                    \"decommission_user\": this.props.username,\r\n                }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === \"success\") {\r\n                        this.props.close();\r\n                        this.props.fetchAllAssets();\r\n                        this.props.showStatus(true, \"success\", \"Successfully decommissioned asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    openConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: true });\r\n    }\r\n\r\n    closeConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: false })\r\n    }\r\n\r\n    cancelUpgrades = () => {\r\n        this.setState({\r\n            customizeModel: false,\r\n            customColor: this.props.defaultValues.display_colorOriginal,\r\n            customCPU: this.props.defaultValues.cpuOriginal,\r\n            customMemory: this.props.defaultValues.memoryOriginal,\r\n            customStorage: this.props.defaultValues.storageOriginal\r\n        });\r\n    }\r\n\r\n    restoreDefaults = () => {\r\n        this.setState({\r\n            customColor: this.props.defaultValues.display_colorOriginal,\r\n            customCPU: this.props.defaultValues.cpuOriginal,\r\n            customMemory: this.props.defaultValues.memoryOriginal,\r\n            customStorage: this.props.defaultValues.storageOriginal\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span className={classes.div}>\r\n                <Paper elevation={3}>\r\n                    {this.props.isDecommissioned ? \"This asset was decommissioned by \" + this.props.defaultValues.decommission_user + \" on \" + this.props.defaultValues.timestamp : \"\"}\r\n                    {(\r\n                        (this.state.loadingDatacenters\r\n                            || this.state.loadingModels\r\n                            || this.state.loadingHostnames\r\n                            || this.state.loadingOwners)\r\n                        //&& false\r\n                    ) ? <div className={classes.progress}><CircularProgress /></div> :\r\n                        <form\r\n                            onSubmit={(event) => { this.editAsset(event) }}\r\n                            className={classes.form}\r\n                        >\r\n                            <div className={classes.dialogDiv}>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.model.Tooltip} title={this.state.inputs.model.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.model.label}\r\n                                            name={this.state.inputs.model.name}\r\n                                            value={this.props.isDecommissioned ? this.props.defaultValues.vendor + \" \" + this.props.defaultValues.model_number : this.state.model}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"select-model\"\r\n                                            options={this.state.modelList}\r\n                                            includeInputInList\r\n                                            value={this.state.model}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.model.label}\r\n                                                    name={this.state.inputs.model.name}\r\n                                                    onChange={this.updateModel}\r\n                                                    onBlur={this.updateModel}\r\n                                                    required\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.owner.Tooltip} title={this.state.inputs.owner.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.owner.label}\r\n                                            name={this.state.inputs.owner.name}\r\n                                            fullWidth\r\n                                            value={this.state.owner}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"select-owner\"\r\n                                            options={this.state.ownerList}\r\n                                            includeInputInList\r\n                                            value={this.state.owner}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.owner.label}\r\n                                                    name={this.state.inputs.owner.name}\r\n                                                    onChange={this.updateOwner}\r\n                                                    onBlur={this.updateOwner}\r\n                                                    fullWidth\r\n                                                    disabled={this.props.disabled}\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <Autocomplete\r\n                                        id=\"select-chassis\"\r\n                                        options={this.state.chassisList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        value={this.state.blade_chassis}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.bladeChassis.label}\r\n                                                name={this.state.inputs.bladeChassis.name}\r\n                                                onChange={this.updateBladeChassis}\r\n                                                onBlur={this.updateBladeChassis}\r\n                                                variant=\"outlined\"\r\n                                                fullWidth\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    /> : null}\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <span>\r\n                                        <InputLabel id=\"select-blade-position-label\">Blade Position</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-blade-position-label\"\r\n                                            id=\"select-blade-position\"\r\n                                            value={this.state.blade_position}\r\n                                            required={true}\r\n                                            onChange={this.updateBladePosition}\r\n                                            style={{ width: \"100%\" }}\r\n                                        >\r\n                                            <MenuItem value={1}>1</MenuItem>\r\n                                            <MenuItem value={2}>2</MenuItem>\r\n                                            <MenuItem value={3}>3</MenuItem>\r\n                                            <MenuItem value={4}>4</MenuItem>\r\n                                            <MenuItem value={5}>5</MenuItem>\r\n                                            <MenuItem value={6}>6</MenuItem>\r\n                                            <MenuItem value={7}>7</MenuItem>\r\n                                            <MenuItem value={8}>8</MenuItem>\r\n                                            <MenuItem value={9}>9</MenuItem>\r\n                                            <MenuItem value={10}>10</MenuItem>\r\n                                            <MenuItem value={11}>11</MenuItem>\r\n                                            <MenuItem value={12}>12</MenuItem>\r\n                                            <MenuItem value={13}>13</MenuItem>\r\n                                            <MenuItem value={14}>14</MenuItem>\r\n                                        </Select>\r\n                                    </span> : null}\r\n\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.datacenter.label}\r\n                                            name={this.state.inputs.datacenter.name}\r\n                                            fullWidth\r\n                                            value={this.state.datacenter_name}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"input-datacenter\"\r\n                                            options={this.state.datacenterList.map(dc => dc.name)}\r\n                                            includeInputInList\r\n                                            value={this.state.datacenter_name}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.datacenter.label}\r\n                                                    name={this.state.inputs.datacenter.name}\r\n                                                    onChange={this.updateDatacenter}\r\n                                                    onBlur={this.updateDatacenter}\r\n\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    disabled={this.props.disabled}\r\n\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rack.Tooltip} title={this.state.inputs.rack.description}>\r\n                                        <TextField\r\n                                            id=\"input-rack\"\r\n                                            label={this.state.inputs.rack.label}\r\n                                            name={this.state.inputs.rack.name}\r\n                                            onChange={this.updateRack}\r\n                                            value={this.state.rack}\r\n                                            required\r\n                                            fullWidth\r\n                                            disabled={this.props.disabled}\r\n                                            defaultValue={this.props.defaultValues.rack}\r\n                                        />\r\n                                    </Tooltip>}\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rackU.Tooltip} title={this.state.inputs.rackU.description}>\r\n                                        <TextField\r\n                                            id=\"input-rackU\"\r\n\r\n                                            type=\"number\"\r\n                                            InputProps={{ inputProps: { min: 1, max: 42 } }}\r\n                                            label={this.state.inputs.rackU.label}\r\n                                            name={this.state.inputs.rackU.name}\r\n                                            onChange={this.updateRackU}\r\n                                            required\r\n                                            fullWidth\r\n                                            disabled={this.props.disabled}\r\n                                            value={this.state.rackU}\r\n                                        />\r\n                                    </Tooltip>}\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.assetNum.Tooltip} title={this.state.inputs.assetNum.description}>\r\n                                    <TextField\r\n                                        id=\"input-asset-number\"\r\n\r\n                                        type=\"number\"\r\n                                        InputProps={{ inputProps: { min: 100000, max: 999999 } }}\r\n                                        label={this.state.inputs.assetNum.label}\r\n                                        name={this.state.inputs.assetNum.name}\r\n                                        onChange={this.updateAssetNumber}\r\n                                        value={this.state.asset_number}\r\n                                        required\r\n                                        fullWidth\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.hostname.Tooltip} title={this.state.inputs.hostname.description}>\r\n                                    <TextField\r\n                                        id=\"input-hostname\"\r\n\r\n                                        label={this.state.inputs.hostname.label}\r\n                                        name={this.state.inputs.hostname.name}\r\n                                        onChange={this.updateHostname}\r\n                                        fullWidth\r\n                                        disabled={this.props.disabled}\r\n                                        value={this.state.hostname}\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                <div>\r\n                                    {this.state.customizeModel || this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={\"primary\"}\r\n                                            onClick={() => this.setState({ customizeModel: true })}\r\n                                        >\r\n                                            {\"Customize Model Hardware\"}\r\n                                        </Button>\r\n                                    }\r\n                                    {this.state.customizeModel || this.props.disabled ?\r\n                                        <span>\r\n                                            <CompactPicker\r\n                                                color={this.state.customColor}\r\n                                                onChange={color => { this.setState({ customColor: color.hex }) }}\r\n                                                disabled={this.props.disabled}\r\n                                            />\r\n                                            <TextField disabled={this.props.disabled} label={\"CPU\"} value={this.state.customCPU} onChange={event => { this.setState({ customCPU: event.target.value }) }} />\r\n                                            <TextField disabled={this.props.disabled} type=\"number\" value={this.state.customMemory} label={\"Memory\"} onChange={event => { this.setState({ customMemory: event.target.value }) }} InputProps={{ inputProps: { min: 0 } }} />\r\n                                            <TextField disabled={this.props.disabled} label={\"Storage\"} value={this.state.customStorage} onChange={event => { this.setState({ customStorage: event.target.value }) }} />\r\n                                            {this.props.disabled ? null : <div className={classes.buttons}>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color={\"primary\"}\r\n                                                    onClick={() => this.restoreDefaults()}\r\n                                                >\r\n                                                    Use original Model Values\r\n                                        </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => this.cancelUpgrades()}\r\n                                                >\r\n                                                    Cancel Upgrades\r\n                                        </Button>\r\n                                            </div>}\r\n                                        </span>\r\n                                        : null}\r\n                                </div>\r\n\r\n\r\n                                {this.displayNetworks() ?\r\n                                    <span>\r\n                                        {this.state.networkList[this.getModel()].length === Object.keys(this.state.network_connections).length ?\r\n                                            this.state.networkList[this.getModel()].map(networkPort => (\r\n                                                <div>\r\n                                                    <Typography style={{ display: \"inline-block\", }}>{\"Network Port: \" + networkPort + \": \"}</Typography>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.macAddress.Tooltip} title={this.state.inputs.macAddress.description}>\r\n                                                        <TextField\r\n                                                            id=\"input-mac-address\"\r\n                                                            style={{ display: \"inline-block\" }}\r\n                                                            label={this.state.inputs.macAddress.label}\r\n                                                            name={this.state.inputs.macAddress.name}\r\n                                                            onChange={(event) => { this.changeNetworkMacAddress(event, networkPort) }}\r\n                                                            fullWidth\r\n                                                            value={this.getMacValue(networkPort)}\r\n                                                        />\r\n                                                    </Tooltip>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                        {this.props.disabled ?\r\n                                                            <TextField\r\n                                                                label={\"Connection Hostname\"}\r\n                                                                name={\"Connection Hostname\"}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                fullWidth\r\n                                                                value={this.getConnectingHostname(networkPort)}\r\n                                                                disabled\r\n                                                            /> :\r\n                                                            <Autocomplete\r\n                                                                id=\"input-network-ports-hostname\"\r\n                                                                options={this.state.assetNumList}\r\n                                                                includeInputInList\r\n                                                                onChange={(event, value) => { this.changeNetworkHostname(value, networkPort) }}\r\n                                                                required={this.getNetworkConnections()[networkPort].connection_port !== \"\"}\r\n                                                                value={this.getConnectingHostname(networkPort)}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                renderInput={params => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        label={\"Connection Hostname\"}\r\n                                                                        name={\"Connection Hostname\"}\r\n                                                                        fullWidth\r\n                                                                    />\r\n                                                                )}\r\n                                                            />}\r\n                                                    </Tooltip>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                        {this.props.disabled ?\r\n                                                            <TextField\r\n                                                                label={\"Connection Port\"}\r\n                                                                name={\"Connection Port\"}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                fullWidth\r\n                                                                value={this.getConnectionPort(networkPort)}\r\n                                                                disabled\r\n                                                            /> :\r\n                                                            <Autocomplete\r\n                                                                id=\"input-network-ports-connection-port\"\r\n                                                                options={this.state.portOptions}\r\n                                                                includeInputInList\r\n                                                                onChange={(event, value) => { this.changeNetworkPort(value, networkPort) }}\r\n                                                                required={this.getNetworkConnections()[networkPort].connection_hostname !== \"\"}\r\n                                                                value={this.getConnectionPort(networkPort)}\r\n                                                                disabled={this.connectionsDisabled()}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                renderInput={params => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        label={\"Connection Port\"}\r\n                                                                        name={\"Connection Port\"}\r\n\r\n                                                                        fullWidth\r\n                                                                    />\r\n                                                                )}\r\n                                                            />}\r\n                                                    </Tooltip>\r\n                                                </div>\r\n                                            )) : null}\r\n                                    </span> : null}\r\n\r\n                                {(\r\n                                    !(this.state.powerPortList\r\n                                        && this.state.powerPortList[this.state.model])\r\n                                    || this.state.datacenterIsOffline\r\n                                ) ? null :\r\n                                    Array.from({ length: this.state.powerPortList[this.state.model] }, (_, k) => (\r\n                                        <span>\r\n                                            <Typography>{\"Power Port: \" + k}</Typography>\r\n                                            <FormControl component=\"fieldset\">\r\n                                                <RadioGroup\r\n                                                    id={\"power-port-\" + k}\r\n                                                    aria-label=\"position\"\r\n                                                    name={\"position\" + k}\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    value={(this.state.leftRight === null) ? off : (this.state.leftRight[k] === undefined ? off : this.state.leftRight[k])}\r\n                                                    onChange={(event) => { this.changePowerPortState(event, k) }}\r\n                                                    row\r\n                                                >\r\n                                                    <FormControlLabel\r\n                                                        value={left}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Left\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={right}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Right\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={off}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"No Connection\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                </RadioGroup>\r\n                                            </FormControl>\r\n                                            {(this.state.leftRight === null) ? null : (this.state.leftRight[k] === undefined || this.state.leftRight[k] === off ? null :\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    value={(this.state.power_connections === null) ? 1 : (this.state.power_connections[k] === undefined ? 1 : this.state.power_connections[k])}\r\n                                                    InputProps={{ inputProps: { min: 1, max: 24 } }}\r\n                                                    onChange={(event) => { this.updatePowerPort(event, k) }}\r\n                                                    disabled={this.props.disabled}\r\n                                                />\r\n                                            )}\r\n                                        </span>\r\n                                    ))\r\n                                }\r\n                                <div>\r\n                                    <TextField\r\n                                        id=\"input-comment\"\r\n                                        fullWidth\r\n                                        label={this.state.inputs.comment.label}\r\n                                        name={this.state.inputs.comment.name}\r\n                                        onChange={this.updateComment}\r\n                                        multiline={true}\r\n                                        fullWidth\r\n                                        style={{ width: \"50%\" }}\r\n                                        defaultValue={this.props.defaultValues.comment}\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                </div>\r\n\r\n                                { (this.state.blade_chassis !== undefined && this.state.blade_chassis.includes(\"BMI\")) ?\r\n                                <div className={classes.buttons}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<PowerIcon />}\r\n                                        style={{\r\n                                            backgroundColor: \"green\",\r\n                                            color: \"white\"\r\n                                        }}\r\n                                    >\r\n                                        Power On\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<PowerOffIcon />}\r\n                                        style={{\r\n                                            backgroundColor: \"black\",\r\n                                            color: \"white\"\r\n                                        }}\r\n                                    >\r\n                                        Power Off\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<LoopIcon />}\r\n                                        color=\"primary\"\r\n                                    >\r\n                                        Power Cycle\r\n                                    </Button>\r\n                                </div>\r\n                                : null }\r\n                                <div className={classes.buttons}>\r\n                                    {this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={this.props.changePlanActive ? \"\" : \"primary\"}\r\n                                            type=\"submit\"\r\n                                            style={{\r\n                                                backgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\"\r\n                                            }}\r\n                                        >\r\n                                            {this.props.changePlanActive ? \"Save to Change Plan\" : \"Save\"}\r\n                                        </Button>}\r\n                                    {this.props.disabled || this.props.changePlanActive ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick={() => this.openConfirmationBox()}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>}\r\n                                    {this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            onClick={() => this.decommissionAsset()}\r\n                                        >\r\n                                            {this.props.changePlanActive ? \"Decommission in Change Plan\" : \"Decommission\"}\r\n                                        </Button>}\r\n                                </div>\r\n                            </div></form>}\r\n                    {this.state.statusOpen ?\r\n                        <Alert\r\n                            severity={this.state.statusSeverity}\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        this.statusClose()\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {this.state.statusMessage}\r\n                        </Alert> : null}\r\n\r\n                    <Modal\r\n                        aria-labelledby=\"transition-modal-title\"\r\n                        aria-describedby=\"transition-modal-description\"\r\n                        className={classes.modal}\r\n                        open={this.state.showConfirmationBox}\r\n                        onClose={this.closeConfirmationBox}\r\n                        closeAfterTransition\r\n                        BackdropComponent={Backdrop}\r\n                        BackdropProps={{\r\n                            timeout: 500,\r\n                        }}\r\n                    >\r\n                        <div className={classes.paper}>\r\n                            <Grid container spacing={5}>\r\n                                <Grid item xs={12}>\r\n                                    Are you sure you wish to delete?\r\n                                    </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.deleteAsset()}\r\n                                    >\r\n                                        Yes\r\n                                        </Button>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.closeConfirmationBox()}\r\n                                    >\r\n                                        No\r\n                                        </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Modal>\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(EditAsset);\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Button,\r\n    ExpansionPanel,\r\n    ExpansionPanelSummary,\r\n    ExpansionPanelDetails,\r\n    Dialog,\r\n    AppBar,\r\n    Toolbar,\r\n    Slide,\r\n    IconButton,\r\n    Grid,\r\n} from \"@material-ui/core/\"\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { Typography } from '@material-ui/core';\r\nimport NetworkGraph from \"./NetworkGraph\";\r\nimport EditAsset from \"./EditAsset\";\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst useStyles = theme => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(3),\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass DetailAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            networkNodes: null,\r\n            detailsExpanded: true,\r\n        };\r\n    }\r\n\r\n    closeDetailView = () => {\r\n        this.props.close();\r\n        this.props.fetchAllAssets();\r\n    }\r\n\r\n    toggleDetails = () => {\r\n        this.setState({ detailsExpanded: !this.state.detailsExpanded });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span>\r\n                <Dialog fullScreen open={this.props.open} TransitionComponent={Transition} padding={3}>\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={this.closeDetailView} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Asset Details\r\n                        </Typography>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    {this.props.changePlanActive ?\r\n                        <Alert severity=\"info\">\r\n                            <AlertTitle>Change Plan Mode</AlertTitle>\r\n                            <Typography>Current plan: {this.props.changePlanName}</Typography>\r\n\t\t\t\t\t\tYou are currently in change plan mode! Changes made are being logged in the plan and not actually made in the system.\r\n\t\t\t\t\t</Alert> : null}\r\n\r\n                    <EditAsset\r\n                        defaultValues={this.props.asset}\r\n                        disabled={this.props.disabled}\r\n                        close={this.props.close}\r\n                        getAssetList={this.props.getAssetList}\r\n                        privilege={this.props.privilege}\r\n                        changePlanActive={this.props.changePlanActive}\r\n                        changePlanID={this.props.changePlanID}\r\n                        changePlanStep={this.props.changePlanStep}\r\n                        incrementChangePlanStep={this.props.incrementChangePlanStep}\r\n                        username={this.props.username}\r\n                        fetchAllAssets={this.props.fetchAllAssets}\r\n                        isDecommissioned={this.props.isDecommissioned}\r\n                        showStatus={this.props.showStatus}\r\n                    />\r\n                    {this.props.asset.hostname !== undefined && this.props.asset.hostname !== \"\" ?\r\n                        <NetworkGraph\r\n                            vals={this.state.networkNodes}\r\n                            host={this.props.asset.hostname}\r\n                            assetNum={this.props.asset.asset_number}\r\n                            isDecommissioned={this.props.isDecommissioned}\r\n                            decomAsset={this.props.asset}\r\n                        /> : null}\r\n                </Dialog>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(DetailAsset);\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    Grid,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    Switch,\r\n    TextField,\r\n    Typography,\r\n    InputLabel,\r\n} from '@material-ui/core/';\r\nimport React from 'react';\r\nimport * as Constants from '../../Constants';\r\nimport getURL from '../../helpers/functions/GetURL';\r\n\r\n\r\nclass FilterAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            datacenter: \"\",\r\n            model: \"\",\r\n            hostname: \"\",\r\n            startingLetter: \"A\",\r\n            endingLetter: \"Z\",\r\n            startingNum: 1,\r\n            endingNum: 1000,\r\n            startDate: \"\",\r\n            endDate: \"\",\r\n            user: \"\",\r\n            datacenterList:[],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.search();\r\n        this.getDatacenterList();\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n            response => { this.setState({ datacenterList: response.data.datacenters }) });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        this.setState({ datacenter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        this.setState({ model: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartingLetter = (event) => {\r\n        this.setState({ startingLetter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateEndingLetter = (event) => {\r\n        this.setState({ endingLetter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartingNum = (event) => {\r\n        this.setState({ startingNum: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateEndingNum = (event) => {\r\n        this.setState({ endingNum: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartDate = (event) => {\r\n        console.log(event.target);\r\n        this.setState({ startDate: event.target.value }, () => this.search());\r\n    }\r\n\r\n    updateEndDate = (event) => {\r\n        this.setState({ endDate: event.target.value }, () => this.search());\r\n    }\r\n\r\n    updateUser = (event) => {\r\n        this.setState({ user: event.target.value }, () => this.search());\r\n    }\r\n\r\n    search = () => {\r\n        var items = [];\r\n        try {\r\n            if (this.props.assetType === \"decommissioned\") {\r\n                this.props.decAssets.map(asset => {\r\n                    var startDate = new Date(this.state.startDate === \"\" || parseInt(this.state.startDate) < 2000 ? \"01/01/2001\" : this.state.startDate + \" 00:00:00\");\r\n                    var endDate = new Date(this.state.endDate === \"\" || parseInt(this.state.endDate) < 2000 ? \"12/31/2025\" : this.state.endDate + \" 23:59:59\");\r\n                    var decDate = new Date(asset.timestamp);\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && (asset.vendor + asset.model_number).toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                        && asset.rack >= this.state.startingLetter + \"\" + this.state.startingNum\r\n                        && asset.rack <= this.state.endingLetter + \"\" + this.state.endingNum\r\n                        && asset.decommission_user.toLowerCase().includes(this.state.user.toLowerCase())\r\n                        && decDate >= startDate\r\n                        && decDate <= endDate\r\n                    ) {\r\n\r\n                        items.push(asset);\r\n                    }\r\n                });\r\n            } else if (this.props.assetType == \"active\") {\r\n                this.props.allAssets.map(asset => {\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && asset.model.toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                        && asset.rack >= this.state.startingLetter + \"\" + this.state.startingNum\r\n                        && asset.rack <= this.state.endingLetter + \"\" + this.state.endingNum\r\n                    ) {\r\n                        var offline = false;\r\n                        this.state.datacenterList.map(dc => {\r\n                            if (dc.is_offline_storage && asset.datacenter_name === dc.datacenter_name) {\r\n                                offline = true;\r\n                            }\r\n                        });\r\n                        if (!offline) {\r\n                            items.push(asset);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            } else if (this.props.assetType === \"offline\") {\r\n                this.props.allAssets.map(asset => {\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && asset.model.toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                    ) {\r\n                        var offline = false;\r\n                        this.state.datacenterList.map(dc => {\r\n                            if (dc.is_offline_storage && asset.datacenter_name === dc.datacenter_name) {\r\n                                offline = true;\r\n                            }\r\n                        });\r\n                        if (offline) {\r\n                            items.push(asset);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.props.updateItems(items);\r\n        } catch {\r\n            this.props.updateItems([]);\r\n        }\r\n\r\n    }\r\n\r\n    switchAssetType = (event) => {\r\n        console.log(event.target.value);\r\n        this.props.switchAssetType(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{ \"padding\": \"10px\" }}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\">Filter</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"site\"\r\n                                label=\"Site\"\r\n                                name=\"site\"\r\n                                onChange={(event) => { this.updateDatacenter(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"model\"\r\n                                label=\"Model\"\r\n                                name=\"model\"\r\n                                onChange={(event) => { this.updateModel(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"hostname\"\r\n                                label=\"Hostname\"\r\n                                name=\"hostname\"\r\n                                onChange={(event) => this.updateHostname(event)}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item item xs={12} sm={6} md={4} lg={3}></Grid>\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n                            <FormControl>\r\n                                <Select\r\n                                    id=\"starting-letter-selector\"\r\n                                    value={this.state.startingLetter}\r\n                                    onChange={this.updateStartingLetter}\r\n                                >\r\n                                    {Constants.RackX.map(val => (<MenuItem value={val}>{val}</MenuItem>))}\r\n                                </Select>\r\n                                <FormHelperText>Starting Letter</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n                            <FormControl>\r\n                                <Select\r\n                                    id=\"ending-letter-selector\"\r\n                                    value={this.state.endingLetter}\r\n                                    onChange={this.updateEndingLetter}\r\n                                >\r\n                                    {Constants.RackX.map(val => (<MenuItem value={val}>{val}</MenuItem>))}\r\n                                </Select>\r\n                                <FormHelperText>Ending Letter</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    id=\"starting-num-selector\"\r\n                                    type=\"number\"\r\n                                    value={this.state.startingNum}\r\n                                    onChange={this.updateStartingNum}\r\n                                    InputProps={{ inputProps: { min: 1 } }}\r\n                                />\r\n                                <FormHelperText>Starting Number</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    id=\"ending-num-selector\"\r\n                                    type=\"number\"\r\n                                    value={this.state.endingNum}\r\n                                    onChange={this.updateEndingNum}\r\n                                    InputProps={{ inputProps: { min: 1 } }}\r\n                                />\r\n                                <FormHelperText>Ending Number</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        <Grid item xs={2} sm={6} md={4} lg={3}>\r\n                            <InputLabel id=\"datacenter-select-label\">Asset Type</InputLabel>\r\n                            <Select\r\n                                name='asset-type'\r\n                                id=\"asset-type\"\r\n                                value={this.props.assetType}\r\n                                onChange={event => this.switchAssetType(event)}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <MenuItem value={\"active\"}>Active</MenuItem>\r\n                                <MenuItem value={\"decommissioned\"}>Decommissioned</MenuItem>\r\n                                <MenuItem value={\"offline\"}>Offline Storage</MenuItem>\r\n                            </Select>\r\n                        </Grid>\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"user\"\r\n                                label=\"User\"\r\n                                name=\"user\"\r\n                                onChange={(event) => { this.updateUser(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid> : null}\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"start-date\"\r\n                                label=\"Start Date\"\r\n                                type=\"date\"\r\n                                onChange={event => this.updateStartDate(event)}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid> : null}\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"end-date\"\r\n                                label=\"End Date\"\r\n                                type=\"date\"\r\n                                onChange={event => this.updateEndDate(event)}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid> : null}\r\n                    </Grid>\r\n                </Paper>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterAsset;\r\n","export default function descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\nimport { CompactPicker } from 'react-color';\r\n\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Tooltip,\r\n    CircularProgress,\r\n    withStyles,\r\n    Radio,\r\n    RadioGroup,\r\n    FormControl,\r\n    FormControlLabel,\r\n    InputLabel,\r\n    Typography,\r\n    Paper,\r\n    IconButton,\r\n    Slide,\r\n    MenuItem,\r\n    Select\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport * as Constants from \"../../Constants\";\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport stringToMac from \"./functions/StringToMacAddress\";\r\nimport stringToRack from \"./functions/StringToRack\";\r\n\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst emptySearch = {\r\n    \"filter\": {\r\n        \"vendor\": null,\r\n        \"model_number\": null,\r\n        \"height\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"username\": null,\r\n        \"display_name\": null,\r\n        \"email\": null,\r\n        \"privilege\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"starting_rack_letter\": null,\r\n        \"ending_rack_letter\": null,\r\n        \"starting_rack_number\": null,\r\n        \"ending_rack_number\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"chassis_hostname\": null,\r\n        \"chassis_slot\": null,\r\n    },\r\n    \"datacenter_name\": \"\",\r\n}\r\n\r\nconst searchPath = \"search/\";\r\nconst left = \"left\";\r\nconst right = \"right\";\r\nconst off = \"off\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogDiv: {\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        maxWidth: \"80%\",\r\n        margin: \"0 auto\",\r\n        minWidth: \"70%\",\r\n        maxHeight: \"600px\",\r\n        overflow: \"scroll\",\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    form: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n    buttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass CreateAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // next available asset number\r\n            loadingAssetNumber: true,\r\n\r\n            // model information\r\n            loadingModels: true,\r\n            modelList: [],\r\n            networkList: null,\r\n            powerPortList: null,\r\n\r\n            // owner information\r\n            loadingOwners: true,\r\n            ownerList: [],\r\n\r\n            // datacenter information\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n\r\n            // hostname information\r\n            loadingHostnames: true,\r\n            assetNumList: [],\r\n            assetNumToModelList: null,\r\n\r\n            model: \"\",\r\n            hostname: \"\",\r\n            rack: \"\",\r\n            rackU: -1,\r\n            owner: \"\",\r\n            comment: \"\",\r\n            datacenter_name: \"\",\r\n            datacenterIsOffline: false,\r\n            tags: [],\r\n            network_connections: null,\r\n            power_connections: null,\r\n            asset_number: 100000,\r\n            blade_chassis: null,\r\n            blade_position: null,\r\n            mount_type: null,\r\n\r\n            chassisList: [],\r\n            mountTypes: null,\r\n\r\n            selectedConnection: null,\r\n\r\n            statusOpen: false,\r\n            statusMessage: \"\",\r\n            statusSeverity: \"\",\r\n\r\n            showModal: false,\r\n\r\n            powerPortState: null,\r\n            leftRight: null,\r\n            availableConnections: false,\r\n            portOptions: [],\r\n\r\n            canSubmit: false,\r\n\r\n            next_pair: -1,\r\n            free_left: -1,\r\n            free_right: -1,\r\n\r\n            inputs: {\r\n                \"model\": createInputs(AssetInput.MODEL, \"Model\", false, \"A reference to an existing model\"),\r\n                \"hostname\": createInputs(AssetInput.HOSTNAME, \"Hostname\", false, \"A short string compliant with RFC 1034’s definition of 'label'\"),\r\n                \"rack\": createInputs(AssetInput.RACK, \"Rack\", false, \"The rack the equipment is installed in, written as a row letter and rack number, e.g. 'B12'\"),\r\n                \"rackU\": createInputs(AssetInput.RACK_U, \"Rack U\", false, \"An integer indicating the vertical location of the bottom of the equipment (e.g. '5')\"),\r\n                \"owner\": createInputs(AssetInput.OWNER, \"Owner\", false, \"A reference to an existing user on the system who owns this equipment\"),\r\n                \"comment\": createInputs(AssetInput.COMMENT, \"Comment\", false, \"Any additional information associated with this asset\"),\r\n                \"datacenter\": createInputs(AssetInput.DATACENTER, \"Datacenter\", false, \"A reference to an existing datacenter\"),\r\n                \"macAddress\": createInputs(AssetInput.MAC_ADDRESS, \"Mac Address\", false, \"A 6-byte hexadecimal string per network port shown canonically in lower case with colon delimiters (e.g., '00:1e:c9:ac:78:aa').\\nA hostname is required to enter in this value\"),\r\n                \"networkConnections\": createInputs(AssetInput.NETWORK_CONNECTIONS, \"Port Name\", false, \"For each network port, a reference to another network port on another piece of gear\"),\r\n                \"powerConnections\": createInputs(AssetInput.POWER_CONNECTIONS, \"Power Connections\", false, \"Choice of PDU port number (0 means not plugged in)\"),\r\n                \"assetNum\": createInputs(AssetInput.ASSET_NUMBER, \"Asset Number\", false, \"A six-digit serial number unique associated with an asset.\"),\r\n                \"bladeChassis\": createInputs(AssetInput.BLADE_CHASSIS, \"Blade Chassis\", false, \"A reference to a blade chassis asset\"),\r\n                \"bladePosition\": createInputs(AssetInput.BLADE_POSITION, \"Blade Position\", false, \"An integer indicating the slot number of a blade\"),\r\n            },\r\n\r\n            customCPU: \"\",\r\n            customColor: \"\",\r\n            customMemory: \"\",\r\n            customStorage: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLists();\r\n    }\r\n\r\n    getLists = () => {\r\n        this.getModelList();\r\n        this.getOwnerList();\r\n        this.getDatacenterList();\r\n        this.getNextAssetNum();\r\n        this.getAssetList();\r\n        this.getChassisList();\r\n    }\r\n\r\n    getChassisList = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getchassis\")\r\n        ).then(\r\n            response => {\r\n                var instances = response.data.instances;\r\n                var instanceNames = [];\r\n\r\n                instances.map(instance => {\r\n                    instanceNames.push(instance.hostname);\r\n                });\r\n\r\n                this.setState({ chassisList: instanceNames });\r\n            }\r\n        )\r\n    }\r\n\r\n    getModelList = () => {\r\n        axios.post(\r\n            getURL(Constants.MODELS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var models = response.data.models;\r\n\r\n                    var modelNames = [];\r\n                    var networkNames = {};\r\n                    var powerPortNames = {};\r\n                    var mountType = {};\r\n\r\n                    models.map(model => {\r\n                        var modelKey = model.vendor + \" \" + model.model_number;\r\n                        modelNames.push(modelKey);\r\n                        networkNames[modelKey] = model.ethernet_ports;\r\n                        powerPortNames[modelKey] = parseInt(model.power_ports);\r\n                        mountType[modelKey] = model.mount_type;\r\n                    });\r\n\r\n                    this.setState({ originalModels: models, loadingModels: false, modelList: modelNames, networkList: networkNames, powerPortList: powerPortNames, mountTypes: mountType });\r\n                });\r\n    }\r\n\r\n    getOwnerList = () => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, searchPath), {\r\n            \"filter\":\r\n            {\r\n                \"username\": \"\",\r\n                \"display_name\": \"\",\r\n                \"email\": \"\",\r\n                \"privilege\": {\r\n                    \"model\": false,\r\n                    \"asset\": false,\r\n                    \"datacenters\": [],\r\n                    \"power\": false,\r\n                    \"audit\": false,\r\n                    \"admin\": false,\r\n                }\r\n            }\r\n        }).then(\r\n            response => {\r\n                var users = [];\r\n                response.data.users.map(user => users.push(user.username + \"/\" + user.display_name));\r\n                this.setState({ loadingOwners: false, ownerList: users });\r\n            });\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n                response => {\r\n                    var datacenters = [];\r\n                    response.data.datacenters.map(datacenter => {\r\n                        if (this.props.privilege.datacenters.length > 0) {\r\n                            if (this.props.privilege.datacenters[0] === \"*\" || this.props.privilege.datacenters.includes(datacenter.name)) {\r\n                                datacenters.push(datacenter);\r\n                            }\r\n                        } else if (this.props.privilege.asset || this.props.privilege.admin) {\r\n                            datacenters.push(datacenter);\r\n                        }\r\n                    });\r\n                    this.setState({ loadingDatacenters: false, datacenterList: datacenters })\r\n                });\r\n    }\r\n\r\n    getNextAssetNum = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.GET_NEXT_ASSET_NUM)).then(\r\n                response => this.setState({ loadingAssetNumber: false, asset_number: response.data.asset_number }));\r\n    }\r\n\r\n    getAssetList = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var instances = response.data.instances;\r\n\r\n                    var hostnames = [];\r\n                    var hostToModel = {};\r\n                    instances.map(instance => {\r\n                        hostnames.push(instance.hostname);\r\n                        hostToModel[instance.hostname] = instance.model;\r\n                    })\r\n\r\n                    this.setState({ loadingHostnames: false, assetNumList: hostnames, assetNumToModelList: hostToModel }, this.availableNetworkConnections());\r\n                });\r\n    }\r\n\r\n    validJSON = (json) => {\r\n        return (\r\n            json.model !== \"\" &&\r\n            json.datacenter_name !== \"\" &&\r\n            (json.rack !== \"\" || this.state.mount_type == \"blade\") &&\r\n            (json.rack_position !== -1 || this.state.mount_type == \"blade\") &&\r\n            json.asset_number >= 100000 &&\r\n            json.asset_number <= 999999\r\n        );\r\n    }\r\n\r\n    createAsset = (event) => {\r\n        event.preventDefault();\r\n\r\n        var json = this.createJSON();\r\n        var changePlanJSON = {\r\n            \"change_plan_id\": this.props.changePlanID,\r\n            \"step\": this.props.changePlanStep,\r\n            \"action\": \"create\",\r\n            \"asset_numberOriginal\": \"\",\r\n            \"new_record\": json\r\n        };\r\n        var url = this.props.changePlanActive ? getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION) : getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.create);\r\n\r\n        if (true) {\r\n            axios.post(\r\n                url,\r\n                this.props.changePlanActive ? changePlanJSON : json\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                        this.props.incrementChangePlanStep();\r\n                        this.props.showStatus(true, \"success\", \"Successfully created asset\");\r\n                        this.closeModal();\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        var model = event.target.value;\r\n\r\n        if (model !== \"\") {\r\n            var ports = this.state.networkList[model];\r\n            var networkConns = {};\r\n            if (ports !== null) {\r\n                ports.map(port => {\r\n                    var defaultNetworkPort = {\r\n                        \"mac_address\": \"\",\r\n                        \"connection_hostname\": \"\",\r\n                        \"connection_port\": \"\",\r\n                    }\r\n                    networkConns[port] = defaultNetworkPort;\r\n                });\r\n            }\r\n\r\n            this.setState({ mount_type: this.state.mountTypes[model] });\r\n        } else {\r\n            var networkConns = {};\r\n        }\r\n\r\n\r\n        this.setState({ model: model, network_connections: networkConns }, () => { this.validateForm(); this.restoreDefaults() });\r\n    }\r\n\r\n    updateBladeChassis = (event) => {\r\n        this.setState({ blade_chassis: event.target.value });\r\n    }\r\n\r\n    updateBladePosition = (event) => {\r\n        this.setState({ blade_position: event.target.value });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateRack = (event) => {\r\n        var rackVal = stringToRack(event.target.value);\r\n        this.setState({ rack: rackVal }, () => { this.validateForm() });\r\n\r\n        if (rackVal.length === 2 && this.state.datacenter_name !== \"\") {\r\n            axios.post(getURL(Constants.RACKS_MAIN_PATH, \"nextPDU/\"), {\r\n                \"rack\": rackVal,\r\n                \"datacenter_name\": this.state.datacenter_name,\r\n            }).then(response => {\r\n                console.log(this.state.power_connections);\r\n                try {\r\n                    var firstFree = response.data.free_left;\r\n                    var pwrLst = [];\r\n\r\n                    this.state.power_connections.map((powerPort, index) => {\r\n                        if (index % 2 === 0 && index < this.state.power_connections.length - 1) {\r\n                            console.log(index);\r\n                            pwrLst[index] = firstFree[index];\r\n                            pwrLst[index + 1] = firstFree[index + 1];\r\n                        } else {\r\n                            console.log(\"passing\");\r\n                        }\r\n                    });\r\n                } catch (exception) {\r\n                    console.log(exception);\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    updateRackU = (event) => {\r\n        this.setState({ rackU: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        this.setState({ owner: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateComment = (event) => {\r\n        this.setState({ comment: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        var isOffline = false;\r\n\r\n        this.state.datacenterList.map(dc => {\r\n            if (dc.name === event.target.value) {\r\n                isOffline = dc.is_offline_storage;\r\n            }\r\n        });\r\n        this.setState({ datacenter_name: event.target.value, datacenterIsOffline: isOffline }, () => { this.validateForm() });\r\n    }\r\n\r\n    changeNetworkMacAddress = (event, port) => {\r\n        var val = stringToMac(event.target.value);\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].mac_address = val;\r\n            return { network_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    changeNetworkHostname = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].connection_hostname = val;\r\n            return { network_connections };\r\n        }, () => { this.getPortOptions(val); this.validateForm() });\r\n    }\r\n\r\n    changeNetworkPort = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port] = (network_connections[port] === null) ? {} : network_connections[port];\r\n            network_connections[port].connection_port = val;\r\n            return { network_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    updatePowerPort = (event, port) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let power_connections = Object.assign({}, prevState.power_connections);\r\n            power_connections[port] = val;\r\n            return { power_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    changePowerPortState = (event, portNum) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let leftRight = Object.assign({}, prevState.leftRight);\r\n            leftRight[portNum] = val;\r\n            return { leftRight };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateAssetNumber = (event) => {\r\n        this.setState({ asset_number: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    getPowerConnections = () => {\r\n        if (this.state.leftRight === null) {\r\n            return [];\r\n        }\r\n\r\n        var pwrConns = [];\r\n        var defaultValue = 1;\r\n        Object.entries(this.state.leftRight).map(([key, value]) => {\r\n            var num = this.state.power_connections === null ? defaultValue : this.state.power_connections[key];\r\n            switch (value) {\r\n                case left:\r\n                    pwrConns.push(\"L\" + num);\r\n                    break;\r\n                case right:\r\n                    pwrConns.push(\"R\" + num);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return pwrConns;\r\n    }\r\n\r\n    createJSON = () => {\r\n        return {\r\n            \"model\": this.state.model,\r\n            \"hostname\": this.state.hostname,\r\n            \"rack\": this.state.rack,\r\n            \"rack_position\": this.state.rackU,\r\n            \"owner\": this.state.owner.split(\"/\")[0],\r\n            \"comment\": this.state.comment,\r\n            \"datacenter_name\": this.state.datacenter_name,\r\n            \"tags\": this.state.tags,\r\n            \"network_connections\": (this.state.network_connections === null) ? {} : this.state.network_connections,\r\n            \"power_connections\": this.getPowerConnections(),\r\n            'asset_number': this.state.asset_number,\r\n            \"chassis_hostname\": this.state.blade_chassis,\r\n            \"chassis_slot\": this.state.blade_position,\r\n            \"cpu\": this.state.customCPU,\r\n            \"display_color\": this.state.customColor,\r\n            \"memory\": this.state.customMemory,\r\n            \"storage\": this.state.customStorage,\r\n        }\r\n    }\r\n\r\n    availableNetworkConnections = () => {\r\n        var availableNetworks = false;\r\n\r\n        var assets = this.state.assetNumList;\r\n        assets.map(asset => {\r\n            if (Object.keys(this.state.networList[this.state.assetNumToModelList[asset]].length).length > 0) {\r\n                availableNetworks = true;\r\n            }\r\n        });\r\n        this.setState({ availableConnections: availableNetworks });\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.props.fetchAllAssets();\r\n        this.props.close();\r\n    }\r\n\r\n    statusClose = () => {\r\n        this.setState({ statusOpen: false, statusMessage: \"\", statusSeverity: \"\" });\r\n    }\r\n\r\n    validateForm = () => {\r\n        this.setState({ canSubmit: this.validJSON(this.createJSON()) });\r\n    }\r\n\r\n    getPortOptions = (hostname) => {\r\n        try {\r\n            this.setState({ portOptions: this.state.networkList[this.state.assetNumToModelList[hostname]] });\r\n        } catch { }\r\n    }\r\n\r\n    cancelUpgrades = () => {\r\n        this.setState({ customizeModel: false }, () => { this.restoreDefaults() });\r\n    }\r\n\r\n    restoreDefaults = () => {\r\n        var currModel = null;\r\n        this.state.originalModels.map(model => {\r\n            if (this.state.model === model.vendor + \" \" + model.model_number) {\r\n                currModel = model;\r\n            }\r\n        });\r\n\r\n        if (currModel !== null && currModel !== undefined) {\r\n            this.setState({\r\n                customColor: currModel.display_color === null ? \"#A52A2A\" : currModel.display_color,\r\n                customCPU: currModel.cpu,\r\n                customMemory: currModel.memory,\r\n                customStorage: currModel.storage,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                customColor: \"#A52A2A\",\r\n                customCPU: \"\",\r\n                customMemory: \"\",\r\n                customStorage: \"\",\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span className={classes.div}>\r\n                <Paper elevation={3}>\r\n                    {(\r\n                        (this.state.loadingAssetNumber\r\n                            || this.state.loadingDatacenters\r\n                            || this.state.loadingModels\r\n                            || this.state.loadingHostnames\r\n                            || this.state.loadingOwners)\r\n                        //&& false\r\n                    ) ? <div className={classes.progress}><CircularProgress /></div> :\r\n                        <form\r\n                            onSubmit={(event) => { this.createAsset(event) }}\r\n                            className={classes.form}\r\n                        >\r\n                            <div className={classes.dialogDiv}>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.model.Tooltip} title={this.state.inputs.model.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-model\"\r\n                                        options={this.state.modelList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        onSelect={this.updateModel}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.model.label}\r\n                                                name={this.state.inputs.model.name}\r\n                                                onChange={this.updateModel}\r\n                                                onBlur={this.updateModel}\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <div>\r\n                                    <Autocomplete\r\n                                        id=\"select-chassis\"\r\n                                        options={this.state.chassisList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.bladeChassis.label}\r\n                                                name={this.state.inputs.bladeChassis.name}\r\n                                                onChange={this.updateBladeChassis}\r\n                                                onBlur={this.updateBladeChassis}\r\n                                                variant=\"outlined\"\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    <InputLabel id=\"select-blade-position-label\">Blade Position</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-blade-position-label\"\r\n                                            id=\"select-blade-position\"\r\n                                            value={this.state.blade_position}\r\n                                            required={true}\r\n                                            onChange={this.updateBladePosition}\r\n                                            style={{ display: \"inline-block\", width: \"20%\" }}\r\n                                        >\r\n                                            <MenuItem value={1}>1</MenuItem>\r\n                                            <MenuItem value={2}>2</MenuItem>\r\n                                            <MenuItem value={3}>3</MenuItem>\r\n                                            <MenuItem value={4}>4</MenuItem>\r\n                                            <MenuItem value={5}>5</MenuItem>\r\n                                            <MenuItem value={6}>6</MenuItem>\r\n                                            <MenuItem value={7}>7</MenuItem>\r\n                                            <MenuItem value={8}>8</MenuItem>\r\n                                            <MenuItem value={9}>9</MenuItem>\r\n                                            <MenuItem value={10}>10</MenuItem>\r\n                                            <MenuItem value={11}>11</MenuItem>\r\n                                            <MenuItem value={12}>12</MenuItem>\r\n                                            <MenuItem value={13}>13</MenuItem>\r\n                                            <MenuItem value={14}>14</MenuItem>\r\n                                        </Select>\r\n                                    </div>\r\n                                    : null}\r\n\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.owner.Tooltip} title={this.state.inputs.owner.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-owner\"\r\n                                        options={this.state.ownerList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.owner.label}\r\n                                                name={this.state.inputs.owner.name}\r\n                                                onChange={this.updateOwner}\r\n                                                onBlur={this.updateOwner}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    <Autocomplete\r\n                                        id=\"input-datacenter\"\r\n                                        options={this.state.datacenterList.map(datacenter => datacenter.name)}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.datacenter.label}\r\n                                                name={this.state.inputs.datacenter.name}\r\n                                                onChange={(event) => { this.updateDatacenter(event) }}\r\n                                                onBlur={this.updateDatacenter}\r\n\r\n\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rack.Tooltip} title={this.state.inputs.rack.description}>\r\n                                        <TextField\r\n                                            id=\"input-rack\"\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            label={this.state.inputs.rack.label}\r\n                                            name={this.state.inputs.rack.name}\r\n                                            onChange={this.updateRack}\r\n                                            value={this.state.rack}\r\n                                            required\r\n\r\n                                        />\r\n                                    </Tooltip>}\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rackU.Tooltip} title={this.state.inputs.rackU.description}>\r\n                                        <TextField\r\n                                            id=\"input-rackU\"\r\n\r\n                                            type=\"number\"\r\n                                            InputProps={{ inputProps: { min: 1, max: 42 } }}\r\n                                            label={this.state.inputs.rackU.label}\r\n                                            name={this.state.inputs.rackU.name}\r\n                                            onChange={this.updateRackU}\r\n                                            required\r\n\r\n                                        />\r\n                                    </Tooltip>}\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.assetNum.Tooltip} title={this.state.inputs.assetNum.description}>\r\n                                    <TextField\r\n                                        id=\"input-asset-number\"\r\n\r\n                                        type=\"number\"\r\n                                        InputProps={{ inputProps: { min: 100000, max: 999999 } }}\r\n                                        label={this.state.inputs.assetNum.label}\r\n                                        name={this.state.inputs.assetNum.name}\r\n                                        onChange={this.updateAssetNumber}\r\n                                        value={this.state.asset_number}\r\n                                        required\r\n\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.hostname.Tooltip} title={this.state.inputs.hostname.description}>\r\n                                    <TextField\r\n                                        id=\"input-hostname\"\r\n\r\n                                        label={this.state.inputs.hostname.label}\r\n                                        name={this.state.inputs.hostname.name}\r\n                                        onChange={this.updateHostname}\r\n\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                <div>\r\n                                    {this.state.customizeModel || this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={\"primary\"}\r\n                                            onClick={() => this.setState({ customizeModel: true })}\r\n                                        >\r\n                                            {\"Customize Model Hardware\"}\r\n                                        </Button>\r\n                                    }\r\n                                    {this.state.customizeModel || this.props.disabled ?\r\n                                        <span>\r\n                                            <CompactPicker\r\n                                                color={this.state.customColor}\r\n                                                onChange={color => { try { this.setState({ customColor: color.hex }) } catch { this.setState({ customColor: \"#A52A2A\" }) } }}\r\n                                                disabled={this.props.disabled}\r\n                                            />\r\n                                            <TextField disabled={this.props.disabled} label={\"CPU\"} value={this.state.customCPU} onChange={event => { this.setState({ customCPU: event.target.value }) }} />\r\n                                            <TextField disabled={this.props.disabled} type=\"number\" value={this.state.customMemory} label={\"Memory\"} onChange={event => { this.setState({ customMemory: event.target.value }) }} InputProps={{ inputProps: { min: 0 } }} />\r\n                                            <TextField disabled={this.props.disabled} label={\"Storage\"} value={this.state.customStorage} onChange={event => { this.setState({ customStorage: event.target.value }) }} />\r\n                                            {this.props.disabled ? null : <div className={classes.buttons}>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color={\"primary\"}\r\n                                                    onClick={() => this.restoreDefaults()}\r\n                                                >\r\n                                                    Use original Model Values\r\n                                        </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => this.cancelUpgrades()}\r\n                                                >\r\n                                                    Cancel Upgrades\r\n                                        </Button>\r\n                                            </div>}\r\n                                        </span>\r\n                                        : null}\r\n                                </div>\r\n\r\n                                {!(this.state.networkList && this.state.networkList[this.state.model]) || this.state.datacenterIsOffline ? null :\r\n                                    this.state.networkList[this.state.model].map(networkPort => (\r\n                                        <div>\r\n                                            <Typography style={{ display: \"inline-block\", }}>{\"Network Port: \" + networkPort + \": \"}</Typography>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.macAddress.Tooltip} title={this.state.inputs.macAddress.description}>\r\n                                                <TextField\r\n                                                    id=\"input-mac-address\"\r\n                                                    label={this.state.inputs.macAddress.label}\r\n                                                    name={this.state.inputs.macAddress.name}\r\n                                                    onChange={(event) => { this.changeNetworkMacAddress(event, networkPort) }}\r\n                                                    value={(this.state.network_connections !== null && this.state.network_connections[networkPort] !== undefined) ? this.state.network_connections[networkPort].mac_address : \"\"}\r\n                                                />\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                <Autocomplete\r\n                                                    id=\"input-network-ports\"\r\n                                                    options={this.state.assetNumList}\r\n                                                    includeInputInList\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    onChange={(event, value) => { this.changeNetworkHostname(value, networkPort) }}\r\n                                                    required={this.state.network_connections[networkPort].connection_port !== \"\"}\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={\"Connection Hostname\"}\r\n                                                            name={\"Connection Hostname\"}\r\n\r\n\r\n                                                            disabled={this.state.hostname === \"\"}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                <Autocomplete\r\n                                                    id=\"input-network-ports\"\r\n                                                    options={this.state.portOptions}\r\n                                                    includeInputInList\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    onChange={(event, value) => { this.changeNetworkPort(value, networkPort) }}\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={\"Connection Port\"}\r\n                                                            name={\"Connection Port\"}\r\n                                                            required={this.state.network_connections[networkPort].connection_hostname !== \"\"}\r\n                                                            disabled={this.state.hostname === \"\"}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    ))}\r\n\r\n                                {(\r\n                                    !(this.state.powerPortList\r\n                                        && this.state.powerPortList[this.state.model])\r\n                                ) || this.state.datacenterIsOffline\r\n                                    ? null :\r\n                                    Array.from({ length: this.state.powerPortList[this.state.model] }, (_, k) => (\r\n                                        <span>\r\n                                            <Typography>{\"Power Port: \" + k}</Typography>\r\n                                            <FormControl component=\"fieldset\">\r\n                                                <RadioGroup\r\n                                                    id={\"power-port-\" + k}\r\n                                                    aria-label=\"position\"\r\n                                                    name={\"position\" + k}\r\n                                                    value={(this.state.leftRight === null) ? off : (this.state.leftRight[k] === undefined ? off : this.state.leftRight[k])}\r\n                                                    onChange={(event) => { this.changePowerPortState(event, k) }}\r\n                                                    row\r\n                                                >\r\n                                                    <FormControlLabel\r\n                                                        value={left}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Left\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={right}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Right\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={off}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"No Connection\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                </RadioGroup>\r\n                                            </FormControl>\r\n                                            {(this.state.leftRight === null) ? null : (this.state.leftRight[k] === undefined || this.state.leftRight[k] === off ? null :\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    value={(this.state.power_connections === null) ? 1 : (this.state.power_connections[k] === undefined ? 1 : this.state.power_connections[k])}\r\n                                                    InputProps={{ inputProps: { min: 1, max: 24 } }}\r\n                                                    onChange={(event) => { this.updatePowerPort(event, k) }}\r\n                                                />\r\n                                            )}\r\n                                        </span>\r\n                                    ))\r\n                                }\r\n\r\n                                <div>\r\n                                    <TextField\r\n                                        id=\"input-comment\"\r\n                                        style={{ width: \"50%\" }}\r\n                                        label={this.state.inputs.comment.label}\r\n                                        name={this.state.inputs.comment.name}\r\n                                        onChange={this.updateComment}\r\n                                        multiline={true}\r\n\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className={classes.buttons}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        type=\"submit\"\r\n                                        color={this.props.changePlanActive ? \"\" : \"primary\"}\r\n                                        style={{\r\n                                            backgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\"\r\n                                        }}\r\n                                    >\r\n                                        {this.props.changePlanActive ? \"Create in Change Plan\" : \"Create\"}\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={this.closeModal}\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </div>\r\n\r\n                            </div></form>}\r\n                    {this.state.statusOpen ?\r\n                        <Alert\r\n                            severity={this.state.statusSeverity}\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        this.statusClose()\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {this.state.statusMessage}\r\n                        </Alert> : null}\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(CreateAsset);\r\n","import React from \"react\";\r\n\r\nimport axios from 'axios';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport {\r\n\tModal,\r\n\tTypography,\r\n\tFade,\r\n\tBackdrop,\r\n\tGrid,\r\n\tButton,\r\n\tPaper,\r\n\twithStyles,\r\n} from \"@material-ui/core/\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport { AssetCommand } from \"../enums/AssetCommands.ts\";\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\"\r\n\r\n\r\nconst useStyles = theme => ({\r\n\tgrid: {\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tboxShadow: theme.shadows[5],\r\n\t\tpadding: theme.spacing(2, 4, 3),\r\n\t\twidth: \"50%\"\r\n\t},\r\n})\r\n\r\nclass ImportAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n            importedFile:null,\r\n\r\n            showStatus:false,\r\n            statusSeverity:\"\",\r\n            statusMessage:\"\",\r\n\t\t};\r\n\t}\r\n\r\n\tsetFile = (file) => {\r\n\t\tthis.setState({ importedFile: file });\r\n\t}\r\n\r\n\tchooseFile = (event) => {\r\n        this.setState({ importedFile: event.target.files[0] })\r\n    }\r\n\r\n\tuploadFile = () => {\r\n        const data = new FormData();\r\n        data.append('file', this.state.importedFile);\r\n        this.sendUploadedFile(data);\r\n    }\r\n\r\n\tcloseImport = () => {\r\n\t\tthis.setState({ importedFile: null }, () => { this.props.close() });\r\n\t}\r\n\r\n\tsendUploadedFile = (data) => {\r\n        axios.post(\r\n            getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.UPLOAD_FILE), data\r\n            ).then(response => {\r\n                if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n\t\t\t\t\tthis.setState({ showStatus: true, statusMessage: response.data.summary, statusSeverity:AssetConstants.SUCCESS_TOKEN, showImport: false,})\r\n\t\t\t\t\tthis.props.close();\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity:AssetConstants.ERROR_TOKEN })\r\n                }\r\n            });\r\n    }\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ showStatus: false, statusMessage:\"\", statusSeverity:\"\" });\r\n    }\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n            <div>\r\n\t\t\t<Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.props.open}\r\n                onClose={this.closeImport}\r\n                closeAfterTransition\r\n            >\r\n                    <Backdrop\r\n                        open={this.props.open}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={9}>\r\n                                <Typography variant=\"h5\">Import Assets</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    onClick={this.closeImport}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item direction=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype='file'\r\n\t\t\t\t\t\t\t\t\taccept=\".csv\"\r\n\t\t\t\t\t\t\t\t\tonChange={this.chooseFile}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n\t\t\t\t\t\t\t\t\tstyle={{width: \"40%\"}}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {this.uploadFile()}}\r\n                                >\r\n                                    Upload File\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Backdrop>\r\n            </Modal>\r\n            <StatusDisplay\r\n            open={this.state.showStatus}\r\n            severity={this.state.statusSeverity}\r\n            closeStatus={this.closeShowStatus}\r\n            message={this.state.statusMessage}\r\n        />\r\n        </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(ImportAsset);\r\n","import React from \"react\";\r\n\r\nimport {\r\n\tGrid,\r\n\tTypography,\r\n\tButton,\r\n\tPaper,\r\n\tDialog,\r\n\twithStyles,\r\n\tAppBar,\r\n\tToolbar,\r\n\tIconButton,\r\n\tSlide\r\n} from \"@material-ui/core/\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport CreateAsset from \"./CreateAsset\";\r\nimport ImportAsset from \"./ImportAsset\";\r\n\r\nconst useStyles = theme => ({\r\n\tappBar: {\r\n\t  position: 'relative',\r\n\t},\r\n\ttitle: {\r\n\t  marginLeft: theme.spacing(2),\r\n\t  flex: 1,\r\n\t},\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nclass AddAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tshowCreate: false,\r\n\t\t\tshowImport: false,\r\n\t\t\tshowConnectionsImport: false,\r\n\t\t};\r\n\t}\r\n\r\n\topenImport = () => {\r\n\t\tthis.setState({ showImport: true });\r\n\t}\r\n\r\n\tcloseImport = () => {\r\n\t\tthis.setState({ showImport: false });\r\n\t}\r\n\r\n\topenConnectionsImport = () => {\r\n\t\tthis.setState({ showConnectionsImport: true });\r\n\t}\r\n\r\n\tcloseConnectionsImport = () => {\r\n\t\tthis.setState({ showConnectionsImport: false });\r\n\t}\r\n\r\n\topenCreate = () => {\r\n\t\tthis.setState({ showCreate: true });\r\n\t}\r\n\r\n\tcloseCreate = () => {\r\n\t\tthis.setState({ showCreate: false });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\tspacing={2}\r\n\t\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t\t\tjustify=\"flex-start\"\r\n\t\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\t\tstyle={{\"padding\": \"10px\"}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tvariant=\"h5\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t\t\t\tbackground: \"green\",\r\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonClick={this.openCreate}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\tOr\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<CloudUploadIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => {this.openImport()} }\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tImport Assets\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<CloudUploadIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => {this.openConnectionsImport()} }\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tImport Network Connections\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\r\n\t\t\t\t<Dialog fullScreen open={this.state.showCreate} onClose={this.closeCreate} TransitionComponent={Transition} padding={3}>\r\n\t\t\t\t\t<AppBar className={classes.appBar}>\r\n\t\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" onClick={this.closeCreate} aria-label=\"close\">\r\n\t\t\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t<Typography variant=\"h6\" className={classes.title}>\r\n\t\t\t\t\t\t\t\tCreate Asset\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t</AppBar>\r\n\t\t\t\t\t<CreateAsset\r\n\t\t\t\t\t\tclose={this.closeCreate}\r\n\t\t\t\t\t\tgetAssetList={this.props.getAssetList}\r\n\t\t\t\t\t\tshowStatus={this.props.showStatus}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\tfetchAllAssets={this.props.fetchAllAssets}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Dialog>\r\n\r\n\t\t\t\t<ImportAsset\r\n\t\t\t\t\topen={this.state.showImport}\r\n\t\t\t\t\tclose={this.closeImport}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(AddAsset);\r\n","// React\r\nimport React from 'react';\r\nimport axios from \"axios\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\n// Core\r\nimport {\r\n\tButton,\r\n\tPaper,\r\n\tGrid,\r\n    Typography,\r\n    Modal,\r\n    Fade,\r\n    Backdrop,\r\n    withStyles,\r\n    TextField\r\n} from '@material-ui/core/';\r\n\r\n// Icons\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\n\r\n// Helpers\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: \"100%\",\r\n      },\r\n      grid: {\r\n          backgroundColor: theme.palette.background.paper,\r\n          boxShadow: theme.shadows[5],\r\n          padding: theme.spacing(2, 4, 3),\r\n          width: \"50%\"\r\n      },\r\n      progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n      },\r\n});\r\n\r\nclass ExportAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            csvData: \"\",\r\n            changePlanModal: false,\r\n            changeDescriptionModal: false,\r\n            canCreateChangePlans: false,\r\n\t\t};\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ canCreateChangePlans: (this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) });\r\n    }\r\n\r\n\tdownloadTable = () => {\r\n        axios.post(\r\n            getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.EXPORT_FILE),\r\n            {\r\n                'filter':{},\r\n                \"datacenter_name\":\"\",\r\n            }\r\n            ).then(response => {\r\n                console.log(response);\r\n                this.setState({ csvData: response.data.csvData });\r\n                this.csvLink.link.click();\r\n            });\r\n    }\r\n\r\n    openChangePlanModal = () => {\r\n        this.setState({ changePlanModal: true });\r\n    }\r\n\r\n    closeChangePlanModal = () => {\r\n        this.setState({ changePlanModal: false });\r\n    }\r\n\r\n    updatePlanName = (event) => {\r\n        this.setState({ changePlanName: event.target.value });\r\n    }\r\n\r\n    beginChangePlan = () => {\r\n        this.closeChangePlanModal();\r\n        this.setState({ changeDescriptionModal: true });\r\n\r\n        axios.post(\r\n            getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE),\r\n            {\r\n                'owner': this.props.username,\r\n                'name': this.state.changePlanName,\r\n            }\r\n            ).then(response => {\r\n                this.props.updateChangePlan(true, response.data.change_plan, 1, this.state.changePlanName);\r\n                this.setState({ changePlanName: \"\" });\r\n        });\r\n    }\r\n\r\n    closeDescriptionModal = () => {\r\n        this.setState({ changeDescriptionModal: false });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{\"padding\": \"10px\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">Export</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography>Download what is currently shown in the table.</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            onClick={() => {this.downloadTable()}}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<CloudDownloadIcon />}\r\n                            style={{\r\n                                width: \"100%\"\r\n                            }}\r\n                        >\r\n                            Export All Data\r\n                        </Button>\r\n                    </Grid>\r\n                    { !this.props.changePlanActive && this.state.canCreateChangePlans ?\r\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\tOr\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t</Grid> : null }\r\n                    { !this.props.changePlanActive && this.state.canCreateChangePlans ?\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"default\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<TrackChangesIcon />}\r\n\t\t\t\t\t\t\t\tonClick={this.openChangePlanModal}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCreate Change Plan\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid> : null }\r\n                </Grid>\r\n            </Paper>\r\n\r\n\t\t\t<CSVLink\r\n                data={this.state.csvData}\r\n\t\t\t\tfilename={AssetConstants.ASSET_DOWNLOAD_FILE_NAME}\r\n\t\t\t\tclassName=\"hidden\"\r\n\t\t\t\tref={(r) => this.csvLink = r}\r\n\t\t\t\ttarget=\"_blank\"\r\n\t\t\t/>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.changePlanModal}\r\n                onClose={this.closeChangePlanModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.changePlanModal}>\r\n                    <Backdrop\r\n                        open={this.state.changePlanModal}\r\n                    >\r\n                    <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={3}>\r\n                                <Typography>\r\n                                    Enter plan name:\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={this.beginChangePlan}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Begin\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={this.closeChangePlanModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.changeDescriptionModal}\r\n                onClose={this.closeDescriptionModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.changeDescriptionModal}>\r\n                    <Backdrop\r\n                        open={this.state.changeDescriptionModal}\r\n                    >\r\n                    <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography>\r\n                                    You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={this.closeDescriptionModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(ExportAsset);\r\n","// React\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\n// Core\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid, Paper, Button } from '@material-ui/core';\r\nimport { Checkbox, Toolbar, Typography, IconButton, Tooltip, TableSortLabel } from '@material-ui/core';\r\n\r\n// Lab\r\nimport { SpeedDial, SpeedDialAction, SpeedDialIcon, Alert, AlertTitle } from '@material-ui/lab';\r\n\r\n// Icons\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\n\r\n// Helpers\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport DetailAsset from \"./DetailsAsset\";\r\nimport FilterAsset from './FilterAsset';\r\nimport stableSort from \"../../helpers/functions/StableSort\";\r\nimport getComparator from \"../../helpers/functions/GetComparator\";\r\nimport { Privilege } from \"../../enums/privilegeTypes.ts\";\r\nimport AddAsset from \"./AddAsset\";\r\nimport ExportAsset from \"./ExportAsset\";\r\nimport * as Constants from '../../Constants';\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\";\r\n\r\n\r\nconst useStyles = theme => ({\r\n\troot: {\r\n\t\tpaddingLeft: theme.spacing(2),\r\n\t\tpaddingRight: theme.spacing(1),\r\n\t},\r\n\tstyledTableRow: {\r\n\t},\r\n\ttableCellHead: {\r\n\t},\r\n\tstyledTableCell: {\r\n\t\tfontSize: 14,\r\n\t},\r\n\ttable: {\r\n\t\tminWidth: 700,\r\n\t},\r\n\tpaper: {\r\n\t\twidth: '100%',\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\tvisuallyHidden: {\r\n\t\tborder: 0,\r\n\t\tclip: 'rect(0 0 0 0)',\r\n\t\theight: 1,\r\n\t\tmargin: -1,\r\n\t\toverflow: 'hidden',\r\n\t\tpadding: 0,\r\n\t\tposition: 'absolute',\r\n\t\ttop: 20,\r\n\t\twidth: 1,\r\n\t},\r\n\ttitle: {\r\n\t\tflex: '1 1 100%',\r\n\t},\r\n});\r\n\r\nconst decomType = \"decommissioned\";\r\n\r\nconst emptySearch = {\r\n\t\"filter\": {\r\n\t\t\"vendor\": null,\r\n\t\t\"model_number\": null,\r\n\t\t\"height\": null,\r\n\t\t\"model\": null,\r\n\t\t\"hostname\": null,\r\n\t\t\"rack\": null,\r\n\t\t\"rack_position\": null,\r\n\t\t\"username\": null,\r\n\t\t\"display_name\": null,\r\n\t\t\"email\": null,\r\n\t\t\"privilege\": null,\r\n\t\t\"model\": null,\r\n\t\t\"hostname\": null,\r\n\t\t\"starting_rack_letter\": null,\r\n\t\t\"ending_rack_letter\": null,\r\n\t\t\"starting_rack_number\": null,\r\n\t\t\"ending_rack_number\": null,\r\n\t\t\"rack\": null,\r\n\t\t\"rack_position\": null\r\n\t},\r\n\t\"datacenter_name\": \"\",\r\n}\r\n\r\nfunction createData(model, hostname, datacenter_name, rack, owner, asset_number) {\r\n\treturn { model, hostname, datacenter_name, rack, owner, asset_number };\r\n}\r\n\r\nfunction createDecData(model, hostname, datacenter_name, rack, owner, asset_number, decommission_user, timestamp) {\r\n\treturn { model, hostname, datacenter_name, rack, owner, asset_number, decommission_user, timestamp };\r\n}\r\n\r\nconst headCells = [\r\n\t{ id: 'hostname', numeric: false, label: \"Hostname\", align: \"left\" },\r\n\t{ id: 'datacenter_name', numeric: false, label: \"Datacenter\", align: \"left\" },\r\n\t{ id: 'model', numeric: false, label: \"Model\", align: \"left\" },\r\n\t{ id: 'rack', numeric: false, label: \"Rack\", align: \"left\" },\r\n\t{ id: 'owner', numeric: false, label: \"Owner\", align: \"left\" },\r\n\t{ id: 'asset_number', numeric: false, label: \"Asset Number\", align: \"right\" },\r\n];\r\n\r\nconst decommissionHeadCells = [\r\n\t{ id: 'decommission_user', numeric: false, label: \"User\", align: \"right\" },\r\n\t{ id: 'timestamp', numeric: false, label: \"Timestamp\", align: \"right\" },\r\n];\r\n\r\nclass TableAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tallAssets: [],\r\n\t\t\ttableItems: [],\r\n\t\t\tselectedItems: [],\r\n\t\t\tallSelected: false,\r\n\t\t\tdecAssets: [],\r\n\t\t\tofflineAssets: [],\r\n\r\n\t\t\tdetailStatusOpen: false,\r\n\t\t\tdetailStatusSeverity: '',\r\n\t\t\tdetailStatusMessage: '',\r\n\r\n\t\t\tdeleteAssetRack: '',\r\n\t\t\tdeleteAssetrack_position: '',\r\n\r\n\t\t\tshowDetailedView: false,\r\n\t\t\tdetailViewLoading: false,\r\n\t\t\tdetailAsset: -1,\r\n\t\t\tdetailHostname: \"\",\r\n\t\t\toriginalRack: '',\r\n\t\t\toriginalrack_position: '',\r\n\r\n\t\t\torder: \"asc\",\r\n\t\t\torderBy: \"datacenter\",\r\n\r\n\t\t\tshowStatus: false,\r\n\t\t\tstatusSeverity: \"\",\r\n\t\t\tstatusMessage: \"\",\r\n\r\n\t\t\t// Change plan\r\n\t\t\tspeedDialOpen: false,\r\n\t\t\tassetType: \"active\",\r\n\r\n\t\t\trowOwner: \"\",\r\n\t\t};\r\n\r\n\t\tthis.filter = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchAllAssets();\r\n\t}\r\n\r\n\t// Fetch all assets for the table\r\n\tfetchAllAssets = () => {\r\n\t\tif (this.props.changePlanActive) {\r\n\t\t\taxios.post(\r\n\t\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\t\tresponse => {\r\n\t\t\t\t\t\tvar items = [];\r\n\t\t\t\t\t\tvar instances = response.data.instances;\r\n\r\n\t\t\t\t\t\taxios.post(\r\n\t\t\t\t\t\t\tgetURL(\"changeplans/\", AssetCommand.CHANGE_PLAN_GET_ACTIONS), {\r\n\t\t\t\t\t\t\t'change_plan_id': this.props.changePlanID,\r\n\t\t\t\t\t\t\t'owner': this.props.username,\r\n\t\t\t\t\t\t}).then(response => {\r\n\t\t\t\t\t\t\tvar actions = response.data.change_plan_actions;\r\n\r\n\t\t\t\t\t\t\tvar assetNums = [];\r\n\t\t\t\t\t\t\tactions.forEach(action => {\r\n\t\t\t\t\t\t\t\tvar assetNum = action.asset_numberOriginal;\r\n\t\t\t\t\t\t\t\tassetNums.push(assetNum);\r\n\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\tvar newInstances = instances.filter(instance => {\r\n\t\t\t\t\t\t\t\treturn !assetNums.includes(instance.asset_number);\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tactions.forEach(action => {\r\n\t\t\t\t\t\t\t\tif (action.action !== \"decommission\") {\r\n\t\t\t\t\t\t\t\t\tnewInstances.push(action.new_record);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tnewInstances.map(asset => {\r\n\t\t\t\t\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tthis.setState({ allAssets: newInstances, tableItems: items });\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\tthis.getDecommissionedAssets();\r\n\t\t} else {\r\n\t\t\taxios.post(\r\n\t\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\t\tresponse => {\r\n\t\t\t\t\t\tvar items = [];\r\n\r\n\t\t\t\t\t\tresponse.data.instances.map(asset => {\r\n\t\t\t\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis.setState({ allAssets: response.data.instances, tableItems: items });\r\n\t\t\t\t\t});\r\n\t\t\tthis.getDecommissionedAssets();\r\n\t\t}\r\n\t}\r\n\r\n\tdeleteAsset = () => {\r\n\t\tvar body = {};\r\n\t\tbody[AssetInput.RACK] = this.state.originalRack;\r\n\t\tbody[AssetInput.RACK_U] = this.state.originalrack_position;\r\n\r\n\t\taxios.post(\r\n\t\t\tgetURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.delete), body\r\n\t\t).then(response => {\r\n\t\t\tif (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowStatus: true,\r\n\t\t\t\t\tstatusMessage: \"Successfully deleted asset\",\r\n\t\t\t\t\tstatusSeverity: AssetConstants.SUCCESS_TOKEN,\r\n\t\t\t\t\toriginalRack: '',\r\n\t\t\t\t\toriginalrack_position: '',\r\n\t\t\t\t\tshowDetailedView: false\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN })\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgenerateLabels = () => {\r\n\t\tvar body = {};\r\n\t\tbody[AssetInput.ASSET_NUMBER] = this.state.selectedItems;\r\n\r\n\t\taxios.post(\r\n\t\t\tgetURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.GENERATE_LABELS), body,\r\n\t\t\t{\r\n\t\t\t\tresponseType: 'arraybuffer',\r\n\t\t\t}\r\n\t\t).then(response => {\r\n\t\t\ttry {\r\n\t\t\t\tvar blob = new Blob([response.data], { type: \"application/pdf\" });\r\n\t\t\t\tvar link = document.createElement('a');\r\n\t\t\t\tlink.href = window.URL.createObjectURL(blob);\r\n\t\t\t\tlink.download = \"AssetLabels_\" + new Date() + \".pdf\";\r\n\t\t\t\tlink.click();\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowStatus: true,\r\n\t\t\t\t\tstatusMessage: \"Successfully generated asset label(s)\",\r\n\t\t\t\t\tstatusSeverity: AssetConstants.SUCCESS_TOKEN,\r\n\t\t\t\t});\r\n\t\t\t} catch {\r\n\t\t\t\tthis.setState({ showStatus: true, statusMessage: \"Could not generate asset labels\", statusSeverity: AssetConstants.ERROR_TOKEN })\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcloseDetailedView = () => {\r\n\t\tthis.setState({ showDetailedView: false });\r\n\t\tthis.fetchAllAssets();\r\n\t}\r\n\r\n\tcloseShowStatus = () => {\r\n\t\tthis.setState({ showStatus: false })\r\n\t}\r\n\r\n\tcreateSortHandler = (event, property) => {\r\n\t\tconst isAsc = this.state.orderBy === property && this.state.order === 'asc';\r\n\t\tthis.setState({ order: isAsc ? 'desc' : 'asc', orderBy: property });\r\n\t}\r\n\r\n\topenDetailedView = (event, asset) => {\r\n\t\tvar dAsset = {};\r\n\t\tvar assets = [];\r\n\t\tif (this.state.assetType === \"active\") {\r\n\t\t\tassets = this.state.allAssets;\r\n\t\t} else if (this.state.assetType === decomType) {\r\n\t\t\tassets = this.state.decAssets;\r\n\t\t} else if (this.state.assetType === \"offline\") {\r\n\t\t\tassets = this.state.offlineAssets;\r\n\t\t}\r\n\t\tassets.map(currAsset => {\r\n\t\t\tif (currAsset.asset_number === asset.asset_number) {\r\n\t\t\t\tObject.assign(dAsset, currAsset);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ detailAsset: dAsset, showDetailedView: true, rowOwner: asset.owner });\r\n\t}\r\n\r\n\tgetRack = (asset) => {\r\n\t\tconsole.log(asset);\r\n\t\tvar result = asset.rack;\r\n\t\tif (asset.mount_type !== \"blade\") {\r\n\t\t\tresult += \" U\" + asset.rack_position;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tupdateItems = (assets) => {\r\n\t\tvar items = [];\r\n\r\n\t\tif (this.state.assetType === \"active\") {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t});\r\n\t\t} else if (this.state.assetType === decomType) {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createDecData(asset.vendor + \" \" + asset.model_number, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number, asset.decommission_user, asset.timestamp));\r\n\t\t\t});\r\n\t\t} else if (this.state.assetType === \"offline\") {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\tthis.setState({ tableItems: items });\r\n\t}\r\n\r\n\tgetAssetList = () => {\r\n\t\taxios.post(\r\n\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\tresponse => { this.setState({ allAssets: response.data.instances }); });\r\n\t}\r\n\r\n\tgetDecommissionedAssets = () => {\r\n\t\taxios.post(\r\n\t\t\tgetURL(Constants.DECOMMISSIONS_MAIN_PATH, AssetCommand.search), {\r\n\t\t\t\"filter\": {\r\n\t\t\t\t\"decommission_user\": \"\",\r\n\t\t\t\t\"start_date\": \"\",\r\n\t\t\t\t\"end_date\": \"\",\r\n\t\t\t}\r\n\t\t}).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tthis.setState({ decAssets: response.data.decommissions })\r\n\t\t\t});\r\n\t}\r\n\r\n\tshowStatusBar = (status, severity, message) => {\r\n\t\tthis.setState({ showStatus: status, statusSeverity: severity, statusMessage: message });\r\n\t}\r\n\r\n\tcloseShowStatus = () => {\r\n\t\tthis.setState({ showStatus: false, statusSeverity: \"\", statusMessage: \"\" });\r\n\t}\r\n\r\n\tonSelectAllClick = (event) => {\r\n\t\tvar newSelected = this.state.selectedItems;\r\n\t\tthis.state.tableItems.map(n => {\r\n\t\t\tconst selectedIndex = newSelected.indexOf(n.asset_number);\r\n\t\t\tif (selectedIndex === -1) {\r\n\t\t\t\tnewSelected = newSelected.concat(n.asset_number);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ selectedItems: newSelected });\r\n\t\tthis.forceUpdate();\r\n\r\n\t}\r\n\r\n\tdeselectAllClick = () => {\r\n\t\tvar newSelected = this.state.selectedItems;\r\n\t\tthis.state.tableItems.map(n => {\r\n\t\t\tconst selectedIndex = newSelected.indexOf(n.asset_number);\r\n\r\n\t\t\tif (selectedIndex === 0) {\r\n\t\t\t\tnewSelected = newSelected.slice(1);\r\n\t\t\t} else if (selectedIndex === newSelected - 1) {\r\n\t\t\t\tnewSelected = newSelected.slice(0, -1);\r\n\t\t\t} else if (selectedIndex > 0) {\r\n\t\t\t\tnewSelected = newSelected.slice(0, selectedIndex).concat(newSelected.slice(selectedIndex + 1));\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ selectedItems: newSelected });\r\n\t\tthis.forceUpdate();\r\n\t}\r\n\r\n\taddCheckedItem = (event, assetNum) => {\r\n\t\tif (!(this.state.assetType === decomType)) {\r\n\t\t\tif (event.target.getAttribute(\"class\") !== \"MuiButton-label\") {\r\n\t\t\t\tconst selectedIndex = this.state.selectedItems.indexOf(assetNum);\r\n\t\t\t\tlet newSelected = [];\r\n\r\n\t\t\t\tif (selectedIndex === -1) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems, assetNum);\r\n\t\t\t\t} else if (selectedIndex === 0) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems.slice(1));\r\n\t\t\t\t} else if (selectedIndex === this.state.selectedItems.length - 1) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems.slice(0, -1));\r\n\t\t\t\t} else if (selectedIndex > 0) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(\r\n\t\t\t\t\t\tthis.state.selectedItems.slice(0, selectedIndex),\r\n\t\t\t\t\t\tthis.state.selectedItems.slice(selectedIndex + 1),\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({ selectedItems: newSelected });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\topenSpeedDial = () => {\r\n\t\tthis.setState({ speedDialOpen: true });\r\n\t}\r\n\r\n\tcloseSpeedDial = () => {\r\n\t\tthis.setState({ speedDialOpen: false });\r\n\t}\r\n\r\n\texitChangePlan = () => {\r\n\t\tthis.props.updateChangePlan(false, null, null, \"\");\r\n\t\tthis.fetchAllAssets();\r\n\t}\r\n\r\n\tswitchAssetType = (assetType) => {\r\n\t\tthis.setState({ assetType: assetType }, () => this.filter.current.search());\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\tvar allSelected = true;\r\n\t\tthis.state.tableItems.map(elem => {\r\n\t\t\tallSelected = allSelected && this.state.selectedItems.indexOf(elem.asset_number) !== -1;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t{this.props.changePlanActive ?\r\n\t\t\t\t\t\t\t<Alert severity=\"info\">\r\n\t\t\t\t\t\t\t\t<AlertTitle>Change Plan Mode</AlertTitle>\r\n\t\t\t\t\t\t\t\t<Typography>Current plan: {this.props.changePlanName}</Typography>\r\n\t\t\t\t\t\tYou are currently in change plan mode! Changes made are being logged in the plan and not actually made in the system.\r\n\t\t\t\t\t</Alert> : null}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={3}>\r\n\t\t\t\t\t\t{(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) ?\r\n\t\t\t\t\t\t\t<AddAsset\r\n\t\t\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t\t\t\tgetAssetList={this.getAssetList}\r\n\t\t\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\t\t\tfetchAllAssets={this.fetchAllAssets}\r\n\t\t\t\t\t\t\t\theight=\"300px\"\r\n\t\t\t\t\t\t\t/> : null}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={6}>\r\n\t\t\t\t\t\t<FilterAsset\r\n\t\t\t\t\t\t\tupdateItems={this.updateItems}\r\n\t\t\t\t\t\t\tgetAssetList={this.getAssetList}\r\n\t\t\t\t\t\t\tallAssets={this.state.allAssets}\r\n\t\t\t\t\t\t\tdecAssets={this.state.decAssets}\r\n\t\t\t\t\t\t\tofflineAssets={this.state.offlineAssets}\r\n\t\t\t\t\t\t\tswitchAssetType={this.switchAssetType}\r\n\t\t\t\t\t\t\tassetType={this.state.assetType}\r\n\t\t\t\t\t\t\tref={this.filter}\r\n\t\t\t\t\t\t\theight=\"300px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={3}>\r\n\t\t\t\t\t\t<ExportAsset\r\n\t\t\t\t\t\t\titems={this.state.tableItems}\r\n\t\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\t\tupdateChangePlan={this.props.updateChangePlan}\r\n\t\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\t\theight=\"300px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs={12} style={{ marginTop: \"20px\" }}>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t{this.state.selectedItems.length > 0 ? (\r\n\t\t\t\t\t\t\t<Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n\t\t\t\t\t\t\t\t{this.state.selectedItems.length} {this.state.selectedItems.length === 1 ? \"label\" : \"labels\"} ready to be generated\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t<Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n\t\t\t\t\t\t\t\tClick asset rows to prepare them for label generation\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\t<Tooltip title=\"Generate Labels\">\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstartIcon={<NoteAddIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => this.generateLabels()}\r\n\t\t\t\t\t\t\t\tdisabled={this.state.selectedItems.length < 1}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tGenerate Labels\r\n      \t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t\t\t<Table className={classes.table} aria-label=\"customized table\" style={{\r\n\t\t\t\t\t\t\tbackgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\",\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t<TableRow className={classes.styledTableRow}>\r\n\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? null :\r\n\t\t\t\t\t\t\t\t\t\t<TableCell padding=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Select All\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"select-all\" onClick={() => this.onSelectAllClick()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CheckIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Deselect All\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"deselect-all\" onClick={() => this.deselectAllClick()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ClearIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>}\r\n\t\t\t\t\t\t\t\t\t{headCells.map(headCell => (\r\n\t\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.tableCellHead}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\talign={headCell.align}\r\n\t\t\t\t\t\t\t\t\t\t\tsortDirection={this.state.orderBy === headCell.id ? this.state.order : false}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\t\t\t\t\t\tactive={this.state.orderBy === headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdirection={this.state.orderBy === headCell.id ? this.state.order : 'asc'}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.createSortHandler(event, headCell.id) }}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ fontWeight: \"bold\" }}>{headCell.label}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.orderBy === headCell.id ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ?\r\n\t\t\t\t\t\t\t\t\t\tdecommissionHeadCells.map(headCell => (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.tableCellHead}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\talign={headCell.align}\r\n\t\t\t\t\t\t\t\t\t\t\t\tsortDirection={this.state.orderBy === headCell.id ? this.state.order : false}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tactive={this.state.orderBy === headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdirection={this.state.orderBy === headCell.id ? this.state.order : 'asc'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.createSortHandler(event, headCell.id) }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ fontWeight: \"bold\" }}>{headCell.label}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.orderBy === headCell.id ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>)) : null}\r\n\t\t\t\t\t\t\t\t\t<TableCell align=\"left\" className={classes.tableCellHead}>{\"\"}</TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t{stableSort(this.state.tableItems, getComparator(this.state.order, this.state.orderBy))\r\n\t\t\t\t\t\t\t\t\t.map((row, index) => {\r\n\t\t\t\t\t\t\t\t\t\tconst labelId = `enhanced-table-checkbox-${index}`;\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t\t\t\thover\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={event => this.addCheckedItem(event, row.asset_number)}\r\n\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\t\taria-checked={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\tselected={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={row.assetNum}\r\n\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? null : <TableCell padding=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-labelledby': labelId }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.hostname}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" id={labelId} scope=\"row\">{row.datacenter_name}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.model}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.rack}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.owner}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">{row.asset_number}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? <TableCell align=\"right\">{row.decommission_user}</TableCell> : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? <TableCell align=\"right\">{row.timestamp}</TableCell> : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.openDetailedView(event, row); }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMore Details\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t</TableContainer>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t{this.state.showDetailedView ?\r\n\t\t\t\t\t<DetailAsset\r\n\t\t\t\t\t\topen={this.state.showDetailedView}\r\n\t\t\t\t\t\tclose={this.closeDetailedView}\r\n\t\t\t\t\t\tasset={this.state.detailAsset}\r\n\t\t\t\t\t\tsearch={this.getAssetList}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\tdisabled={(!(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.includes(this.state.detailAsset.datacenter_name)) || this.state.assetType === decomType)}\r\n\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\tfetchAllAssets={this.fetchAllAssets}\r\n\t\t\t\t\t\tchangePlanName={this.props.changePlanName}\r\n\t\t\t\t\t\tshowDecommissioned={this.state.assetType === decomType}\r\n\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t/> : null}\r\n\t\t\t\t<SpeedDial\r\n\t\t\t\t\tariaLabel=\"SpeedDial openIcon example\"\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tposition: 'fixed',\r\n\t\t\t\t\t\tbottom: '30px',\r\n\t\t\t\t\t\tright: '30px',\r\n\t\t\t\t\t}}\r\n\t\t\t\t\thidden={!this.props.changePlanActive}\r\n\t\t\t\t\ticon={<TrackChangesIcon />}\r\n\t\t\t\t\tonClose={this.closeSpeedDial}\r\n\t\t\t\t\tonOpen={this.openSpeedDial}\r\n\t\t\t\t\topen={this.state.speedDialOpen}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SpeedDialAction\r\n\t\t\t\t\t\tkey=\"exit\"\r\n\t\t\t\t\t\ticon={<ExitToAppIcon />}\r\n\t\t\t\t\t\ttooltipTitle=\"Exit Change Plan\"\r\n\t\t\t\t\t\tonClick={this.exitChangePlan}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</SpeedDial>\r\n\t\t\t\t<StatusDisplay\r\n\t\t\t\t\topen={this.state.showStatus}\r\n\t\t\t\t\tseverity={this.state.statusSeverity}\r\n\t\t\t\t\tcloseStatus={this.closeShowStatus}\r\n\t\t\t\t\tmessage={this.state.statusMessage}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(TableAsset);\r\n","export enum DatacenterCommand {\r\n    GET_ALL_DATACENTERS = \"all/\",\r\n    CREATE = \"create/\",\r\n    EDIT = \"edit/\",\r\n    DELETE = \"delete/\",\r\n}\r\n","import descendingComparator from \"./DescendingComparator\";\r\n\r\nexport default function getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy);\r\n  }\r\n","export default function stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n  }\r\n","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return \"An unforseen error occurred. Please refresh the page and try again later.\";\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n      // You can also log the error to an error reporting service\r\n      //logErrorToMyService(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n\r\n      return this.props.children;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    Grid,\r\n    Typography,\r\n } from '@material-ui/core/';\r\n\r\nimport { Privilege } from '../../enums/privilegeTypes.ts'\r\nimport TableAsset from '../helpers/TableAssets';\r\nimport ErrorBoundary from '../../errors/ErrorBoundry';\r\n\r\nexport default class AssetsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            statusSeverity:'',\r\n            statusMessage:'',\r\n            showStatus:false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Assets\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TableAsset\r\n                                privilege={this.props.privilege}\r\n                                username={this.props.username}\r\n                                changePlanActive={this.props.changePlanActive}\r\n                                updateChangePlan={this.props.updateChangePlan}\r\n                                changePlanID={this.props.changePlanID}\r\n                                changePlanStep={this.props.changePlanStep}\r\n                                incrementChangePlanStep={this.props.incrementChangePlanStep}\r\n                                changePlanName={this.props.changePlanName}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport axios from \"axios\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n\nimport * as Constants from \"../../Constants\";\nimport { DatacenterCommand } from \"../enums/DatacenterCommands\";\nimport getURL from \"../../helpers/functions/GetURL\";\n\n\nconst offlineStorageVal = \"offlineStorage\";\nconst datacenterVal = \"datacenter\";\n\nconst useStyles = theme => ({\n\troot: {\n\t\twidth: '100%',\n\t},\n\tmodal: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tpaper: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tborder: '2px solid #000',\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3),\n\t},\n});\n\nclass CreateDatacenter extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tshowCreate: false,\n\t\t\tdatacenterName: \"\",\n\t\t\tdatacenterAbbreviation: \"\",\n\t\t\tshowStatus: false,\n\t\t\tstatusSeverity: \"\",\n\t\t\tstatusMessage: \"\",\n\t\t\tsiteType: datacenterVal,\n\t\t};\n\t}\n\n\tgenerateCreateJSON = () => {\n\t\treturn {\n\t\t\t\"abbreviation\": this.state.datacenterAbbreviation,\n\t\t\t\"datacenter_name\": this.state.datacenterName,\n\t\t\t\"is_offline_storage\": this.state.siteType === offlineStorageVal,\n\t\t}\n\t}\n\n\tcreateDatacenter = () => {\n\t\taxios.post(\n\t\t\tgetURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.CREATE), this.generateCreateJSON()).then(\n\t\t\t\tresponse => {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\tif (response.data.message === \"success\") {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowCreate: false,\n\t\t\t\t\t\t\tdatacenterName: \"\",\n\t\t\t\t\t\t\tdatacenterAbbreviation: \"\",\n\t\t\t\t\t\t}, () => this.props.search());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowStatus: true,\n\t\t\t\t\t\t\tstatusSeverity: \"error\",\n\t\t\t\t\t\t\tstatusMessage: response.data.message,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tupdateDatacenterName = (event) => {\n\t\tthis.setState({ datacenterName: event.target.value });\n\t}\n\n\tupdateDatacenterAbbrevation = (event) => {\n\t\tthis.setState({ datacenterAbbreviation: this.getAbbreviation(event.target.value) });\n\t}\n\n\tgetAbbreviation = (val) => {\n\t\tif (val.length > 6) {\n\t\t\treturn val.substring(0, 7);\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tshowCreate = () => {\n\t\tthis.setState({ showCreate: true });\n\t}\n\n\tcloseCreate = () => {\n\t\tthis.setState({\n\t\t\tshowCreate: false,\n\t\t\tdatacenterName: \"\",\n\t\t\tdatacenterAbbreviation: \"\",\n\t\t});\n\t}\n\n\tcloseStatus = () => {\n\t\tthis.setState({ showStatus: false, statusSeverity: \"\", statusMessage: \"\", });\n\t}\n\n\tselectSiteType = (event) => {\n\t\tthis.setState({ siteType: event.target.value });\n\t}\n\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t{this.props.datacenterList.length > 0 ? <InputLabel id=\"datacenter-select-label\">Select Site</InputLabel> : null}\n\t\t\t\t\t{this.props.datacenterList.length > 0 ? <Select\n\t\t\t\t\t\tname='datacenter_name'\n\t\t\t\t\t\tid=\"datacenter-select\"\n\t\t\t\t\t\tvalue={this.props.dc}\n\t\t\t\t\t\tonChange={this.props.selectDatacenter}\n\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.datacenterList.map(value => {\n\t\t\t\t\t\t\treturn (<MenuItem value={value}>{value[\"name\"]}</MenuItem>);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Select> : null}\n\t\t\t\t</Grid>\n\t\t\t\t{this.props.disabled ? null :\n\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tonClick={() => { this.showCreate() }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate New Site\n            \t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\n\n\t\t\t\t<Modal\n\t\t\t\t\taria-labelledby=\"transition-modal-title\"\n\t\t\t\t\taria-describedby=\"transition-modal-description\"\n\t\t\t\t\tclassName={classes.modal}\n\t\t\t\t\topen={this.state.showCreate}\n\t\t\t\t\tonClose={this.closeCreate}\n\t\t\t\t\tcloseAfterTransition\n\t\t\t\t\tBackdropComponent={Backdrop}\n\t\t\t\t\tscroll=\"body\"\n\t\t\t\t\tBackdropProps={{\n\t\t\t\t\t\ttimeout: 500,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Fade in={this.state.showCreate}>\n\t\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t\t\t\t\t<Typography>Site Name:</Typography>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\tid=\"input-rack\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\tlabel={\"datacenter-name\"}\n\t\t\t\t\t\t\t\t\t\tname={\"datacenter-name\"}\n\t\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterName}\n\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t\t\t\t\t<Typography>Site Abbreviation:</Typography>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<Tooltip placement=\"top\" title={\"Max 6 characters\"}>\n\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\tid=\"input-rack\"\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\tlabel={\"datacenter-abbreviation\"}\n\t\t\t\t\t\t\t\t\t\t\tname={\"datacenter-abbreviation\"}\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterAbbrevation}\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterAbbreviation}\n\t\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\n\t\t\t\t\t\t\t\t\t\t<RadioGroup column aria-label=\"position\" name=\"position\" defaultValue=\"start\" value={this.state.siteType} onChange={(event) => this.selectSiteType(event)}>\n\t\t\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Datacenter\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={datacenterVal}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Offline Storage\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={offlineStorageVal}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\tdisabled={!(this.state.datacenterAbbreviation && this.state.datacenterName)}\n\t\t\t\t\t\t\t\t\t\tonClick={() => { this.createDatacenter() }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tCreate Site\n                            </Button>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t{this.state.showStatus ? <Alert severity=\"error\" onClose={() => { this.closeStatus() }}>{this.state.statusMessage}</Alert> : null}\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fade>\n\t\t\t\t</Modal>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default withStyles(useStyles)(CreateDatacenter);\n","import React from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../enums/DatacenterCommands\";\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n  });\r\n\r\nclass EditDatacenter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            datacenterName:props.dcName,\r\n            datacenterAbbreviation:props.dcAbbrev,\r\n\t\t};\r\n\r\n\t}\r\n\r\n    generateEditJSON = () => {\r\n\t\tconsole.log(\"generating edit\")\r\n\t\tconsole.log(this.props.dcName);\r\n        return {\r\n\t\t\t\"nameOriginal\": this.props.dcName,\r\n            \"abbreviation\" : this.state.datacenterAbbreviation||this.props.dcAbbrev,\r\n            \"datacenter_name\": this.state.datacenterName||this.props.dcName,\r\n            \"is_offline_storage\":this.props.is_offline_storage,\r\n        }\r\n    }\r\n\r\n    editDatacenter = () => {\r\n\t\tconsole.log(\"sending\");\r\n\t\tconsole.log(this.state.datacenterName);\r\n        axios.post(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.EDIT), this.generateEditJSON()).then(\r\n            response => {\r\n                console.log(response);\r\n                if (response.status === Constants.HTTPS_STATUS_OK) {\r\n                    this.setState({\r\n                        datacenterName:\"\",\r\n                        datacenterAbbreviation:\"\",\r\n                    }, () => {this.props.search(); this.props.close() } );\r\n                } else {\r\n                    this.setState({\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    updateDatacenterName = (event) => {\r\n        this.setState({ datacenterName: event.target.value });\r\n    }\r\n\r\n    updateDatacenterAbbrevation = (event) => {\r\n        this.setState({ datacenterAbbreviation: this.getAbbreviation(event.target.value) });\r\n    }\r\n\r\n    getAbbreviation = (val) => {\r\n        if (val.length > 6) {\r\n            return val.substring(0,7);\r\n        }\r\n\r\n        return val;\r\n\t}\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.props.show}\r\n                onClose={this.props.close}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                scroll=\"body\"\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={this.props.show}>\r\n                    <div className={classes.paper}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={2}>\r\n                                <Typography>Datcenter Name:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField\r\n                                    id=\"input-rack\"\r\n                                    variant=\"outlined\"\r\n                                    label={\"datacenter-name\"}\r\n                                    name={\"datacenter-name\"}\r\n\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterName}\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterName||this.props.dcName}\r\n                                    required\r\n\t\t\t\t\t\t\t\t\tfullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <Typography>Datcenter Abbreviation:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <Tooltip placement=\"top\" title={\"Max 6 characters\"}>\r\n                                    <TextField\r\n                                        id=\"input-rack\"\r\n                                        variant=\"outlined\"\r\n                                        label={\"datacenter-abbreviation\"}\r\n                                        name={\"datacenter-abbreviation\"}\r\n                                        onChange={this.updateDatacenterAbbrevation}\r\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterAbbreviation||this.props.dcAbbrev}\r\n                                        required\r\n\t\t\t\t\t\t\t\t\t\tfullWidth\r\n                                    />\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => { this.editDatacenter() }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tSave Edits\r\n\t\t\t\t\t\t\t\t</Button>\r\n                            </Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.close}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t\t\t</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(EditDatacenter);\r\n","import React from 'react';\r\n\r\nimport { fade, withStyles, SvgIcon, Collapse, Grid, Typography } from '@material-ui/core';\r\nimport { TreeView, TreeItem } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"../stylesheets/RackStyles.css\";\r\n\r\nimport ErrorBoundray from '../../errors/ErrorBoundry';\r\nimport { useSpring, animated } from 'react-spring/web.cjs';\r\n\r\nfunction MinusSquare(props) {\r\n    return (\r\n      <SvgIcon fontSize=\"inherit\" {...props}>\r\n        {/* tslint:disable-next-line: max-line-length */}\r\n        <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\r\n      </SvgIcon>\r\n    );\r\n  }\r\n\r\nfunction PlusSquare(props) {\r\n  return (\r\n    <SvgIcon fontSize=\"inherit\" {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction CloseSquare(props) {\r\n  return (\r\n    <SvgIcon className=\"close\" fontSize=\"inherit\" {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction TransitionComponent(props) {\r\n  const style = useSpring({\r\n    from: { opacity: 0, transform: 'translate3d(20px,0,0)' },\r\n    to: { opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)` },\r\n  });\r\n\r\n  return (\r\n    <animated.div style={style}>\r\n      <Collapse {...props} />\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nTransitionComponent.propTypes = {\r\n  /**\r\n   * Show the component; triggers the enter or exit states\r\n   */\r\n  in: PropTypes.bool,\r\n};\r\n\r\nconst StyledTreeItem = withStyles(theme => ({\r\n    iconContainer: {\r\n      '& .close': {\r\n        opacity: 0.3,\r\n      },\r\n    },\r\n    group: {\r\n      marginLeft: 12,\r\n      paddingLeft: 12,\r\n      borderLeft: `1px dashed ${fade(theme.palette.text.primary, 0.4)}`,\r\n    },\r\n  }))(props => <TreeItem {...props} TransitionComponent={TransitionComponent} />);\r\n\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n      },\r\n  });\r\n\r\nclass RacksView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            firstRack: 'A1',\r\n            secondRack: 'A1',\r\n\r\n            showStatus: false,\r\n            statusMessage: '',\r\n            statusSeverity: 'info',\r\n\r\n            showConfirmationBox: false,\r\n\r\n            racksList: [],\r\n            racks: {}\r\n        };\r\n    }\r\n\r\n    handleFormat = (event, newFormats) => {\r\n        if (newFormats.length) {\r\n            this.setState({formats: newFormats});\r\n        }\r\n    };\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    closeConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: false });\r\n    }\r\n\r\n    sortRacks = (rack1, rack2) => {\r\n      var num1 = parseInt(rack1.substr(1));\r\n      var num2 = parseInt(rack2.substr(1));\r\n\r\n      return num1 > num2;\r\n    }\r\n\r\n    deleteRack = (value) => {\r\n      console.log(value);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <ErrorBoundray>\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"f\r\n                    style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                >\r\n\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\">Racks</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TreeView\r\n                            className={classes.root}\r\n                            defaultExpanded={['1']}\r\n                            defaultCollapseIcon={<MinusSquare />}\r\n                            defaultExpandIcon={<PlusSquare />}\r\n                        >\r\n                            {Object.keys(this.props.racks).sort().map(key => {\r\n                                return (<StyledTreeItem nodeId={key} label={key}>\r\n                                        {this.props.racks[key].sort(this.sortRacks).map(value => {\r\n                                            return (<StyledTreeItem nodeId={value} label={value} />);\r\n                                        })}\r\n                                    </StyledTreeItem>);\r\n                            })}\r\n                        </TreeView>\r\n                    </Grid>\r\n                </Grid>\r\n            </ErrorBoundray>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(RacksView);\r\n","export enum RackCommand {\r\n    GET_ALL_RACKS = \"all\",\r\n    CREATE_RACKS = \"create\",\r\n    DELETE_RACKS = \"delete\",\r\n    GET_RACK_DETAILS = \"details\"\r\n}\r\n","import React from \"react\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Paper, TextField, Modal, Backdrop, Fade } from '@material-ui/core';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport { RackCommand } from \"../../enums/RackCommands.ts\";\r\n\r\n\r\n\r\nexport default function ShowDatacenters(props) {\r\n    const [rackType, setRackType] = React.useState('single');\r\n    const [rack1, setRack1] = React.useState('A1');\r\n    const [rack2, setRack2] = React.useState('A1');\r\n\r\n    const handleRackType = (event, newType) => {\r\n        setRackType(newType);\r\n      };\r\n\r\n      const updateRack = (event) => {\r\n        setRack1(event.target.value);\r\n        setRack2(event.target.value);\r\n      }\r\n\r\n      const updateStart = (event) => {\r\n        setRack1(event.target.value);\r\n      }\r\n\r\n      const updateEnd = (event) => {\r\n        setRack2(event.target.value);\r\n      }\r\n\r\n    const createRacks = () => {\r\n        props.updateRacks(RackCommand.CREATE_RACKS, rack1, rack2);\r\n    }\r\n\r\n    const deleteRacks = () => {\r\n        props.updateRacks(RackCommand.DELETE_RACKS, rack1, rack2);\r\n    }\r\n\r\n    const viewRacks = () => {\r\n        props.updateRacks(RackCommand.GET_RACK_DETAILS, rack1, rack2);\r\n    }\r\n\r\n    try {\r\n        if (props.datacentersList.length == 0) {\r\n            return <Typography>There are currently no datacenters being managed.</Typography>\r\n        } else {\r\n            return (<div>{\r\n                <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                    <Paper elevation={3}>\r\n                    {!(props.privilege.admin || props.privilege.asset) ? null :\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{\"padding\": \"10px\"}}\r\n                    >\r\n\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Manage\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={(event) => {props.editDatacenter(event, props.dc.name, props.dc.abbreviation)} }\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                            <hr style={{width: \"5vw\"}} />\r\n                            <Typography color=\"textSecondary\">\r\n                                Or\r\n                            </Typography>\r\n                            <hr style={{width: \"5vw\"}} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={(event) => {props.openConfirmationBox(event, props.selectedDatacenter)} }\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>}\r\n                    </Paper>\r\n                </Grid>\r\n\r\n                {props.isOfflineStorage ? null :\r\n                <Grid item xs={3}>\r\n                <Paper elevation={3}>\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{\"padding\": \"10px\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Racks\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid container item direction=\"row\" justify=\"center\" xs={12}>\r\n                            <ToggleButtonGroup\r\n                                value={rackType}\r\n                                exclusive\r\n                                onChange={handleRackType}\r\n                                aria-label=\"rack type\"\r\n                            >\r\n                                <ToggleButton value=\"single\" aria-label=\"single-rack\">\r\n                                    Single\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"range\" aria-label=\"range-rack\">\r\n                                    Range\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Grid>\r\n\r\n                        {rackType === \"single\" ? <Grid item xs={12}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Rack\" name=\"rack1\" onChange={updateRack}/>\r\n                        </Grid> : <Grid container item spacing={3} direciton=\"row\" justify=\"center\"><Grid item xs={6}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Start Rack (e.g. A1)\" name=\"rack1\" onChange={updateStart}/>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"End Rack (e.g. B10)\" name=\"rack2\" onChange={updateEnd}/>\r\n                        </Grid></Grid> }\r\n                        {!(props.privilege.admin || props.privilege.asset || props.privilege.datacenters.includes(props.selectedDatacenter)) ? null :\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{ width: \"100%\", backgroundColor: \"green\", color: \"white\" }}\r\n                                onClick={createRacks}\r\n                            >\r\n                                Create\r\n                            </Button>\r\n                        </Grid>}\r\n                        {!(props.privilege.admin || props.privilege.asset || props.privilege.datacenters.includes(props.selectedDatacenter)) ? null :\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={deleteRacks}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>}\r\n                    </Grid>\r\n\r\n                    </Paper>\r\n                </Grid>}\r\n            </Grid>\r\n            }\r\n            </div>\r\n            );\r\n        }\r\n    } catch (exception) {\r\n        console.log(exception);\r\n        return <Typography>Could not load any datacenters at this time</Typography>\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../enums/DatacenterCommands.ts\";\r\nimport RacksView from \"../pages/RacksView\";\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\nimport CreateDatacenter from \"./CreateDatacenter\";\r\nimport { Privilege } from '../../enums/privilegeTypes.ts';\r\nimport EditDatacenter from \"./EditDatacenter\";\r\nimport ShowDatacenters from \"./functions/ShowDatacenters\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n        justify:\"center\",\r\n        alignItems:\"center\",\r\n      },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n  });\r\n\r\nclass ConfirmDeteleDC extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<Modal\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    className={classes.modal}\r\n                    open={this.props.showConfirmationBox}\r\n                    onClose={this.props.closeConfirmationBox}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                    timeout: 500,\r\n                    }}\r\n                >\r\n                    <Fade in={this.props.showConfirmationBox}>\r\n                        <div className={classes.paper}>\r\n                            <Grid container spacing={5}>\r\n                                <Grid item xs={12}>\r\n                                    Are you sure you wish to delete?\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={this.props.deleteDatacenter}\r\n                                    >\r\n                                        Yes\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.props.closeConfirmationBox()}\r\n                                    >\r\n                                        No\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(ConfirmDeteleDC);\r\n","import React, { Component } from 'react'\r\n\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n\twithStyles,\r\n\tTypography,\r\n\tCircularProgress,\r\n\tPaper,\r\n} from \"@material-ui/core\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport DetailAsset from \"../../assets/helpers/DetailsAsset\";\r\n\r\nconst decomType = \"decommissioned\";\r\n\r\nconst useStyles = theme => ({\r\n\troot: {\r\n\t\talign: \"center\",\r\n\t},\r\n\tindex: {\r\n\t\tbackgroundColor: \"#000000\",\r\n\t\tcolor: \"#FFFFFF\",\r\n\t\twidth: \"15%\",\r\n\t\tdisplay: \"inline-block\",\r\n\t\tpaddingLeft: \"5%\",\r\n\t},\r\n\tasset: {\r\n\t\twidth: \"70%\",\r\n\t\tdisplay: \"inline-block\"\r\n\t},\r\n\ttitle: {\r\n\t\tbackgroundColor: \"#A9A9A9\",\r\n\t\twidth: \"100%\",\r\n\t\talign: \"center\",\r\n\t\tpaddingLeft: \"45%\",\r\n\t},\r\n\tfooter: {\r\n\t\tbackgroundColor: \"#A9A9A9\",\r\n\t\tcolor:\"#A9A9A9\",\r\n\t\twidth: \"100%\",\r\n\t\talign: \"center\",\r\n\t\tpaddingLeft: \"45%\",\r\n\t},\r\n\track: {\r\n\t\tdisplay: \"inline-block\",\r\n\t\twidth: \"20%\",\r\n\t\tmargin: \"2%\",\r\n\t}\r\n\r\n});\r\n\r\nclass RackDiagrams extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tshowDetailedView: false,\r\n\t\t\tdetailAsset: null,\r\n\r\n\t\t};\r\n\t}\r\n\r\n\topenAssetDetails = (assetNum) => {\r\n\t\tif (assetNum > 10000) {\r\n\t\t\taxios.post(getURL(Constants.ASSETS_MAIN_PATH, \"detailView/\"),\r\n\t\t\t\t{\r\n\t\t\t\t\t\"asset_number\": assetNum\r\n\t\t\t\t}\r\n\t\t\t).then(response => {\r\n\t\t\t\tthis.setState({ detailAsset: response.data.instances[0], showDetailedView: true });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tcloseDetailedView = () => {\r\n\t\tthis.setState({ showDetailedView: false });\r\n\t}\r\n\r\n\tgetAssetList = () => {\r\n\r\n\t}\r\n\r\n\tshowStatusBar = (status, severity, message) => {\r\n\t\tthis.setState({ showStatus: status, statusSeverity: severity, statusMessage: message });\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t{this.props.racks.length > 0 ?\r\n\t\t\t\t\tthis.props.racks.map((rack, index) => (\r\n\t\t\t\t\t\t<span className={classes.rack}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tclassName={classes.title}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{rack.rackTitle}\r\n\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t{rack.racks.map(rack => (\r\n\t\t\t\t\t\t\t\t<div onClick={() => this.openAssetDetails(rack.assetNum)}>\r\n\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.index}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{rack.index + \" \"}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t{rack.title !== \"\" ?\r\n\t\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ background: rack.color, display: \"inline-block\", width: \"70%\", color: rack.textColor, paddingLeft:\"3%\" }}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{rack.title}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ background: rack.color, display: \"inline-block\", width: \"70%\", color: rack.color, }}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{\".\"}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.index}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{\" \" + rack.index}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tclassName={classes.footer}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{\".\"}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t))\r\n\t\t\t\t\t: null}\r\n\r\n\r\n\t\t\t\t{this.state.showDetailedView ?\r\n\t\t\t\t\t<DetailAsset\r\n\t\t\t\t\t\tclose={this.closeDetailedView}\r\n\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t\tsearch={this.props.getRacks}\r\n\t\t\t\t\t\tfetchAllAssets={this.props.getRacks}\r\n\t\t\t\t\t\topen={this.state.showDetailedView}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\tasset={this.state.detailAsset}\r\n\t\t\t\t\t\tdisabled={(!(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.includes(this.state.detailAsset.datacenter_name)) || this.state.assetType === decomType)}\r\n\t\t\t\t\t\tchangePlanActive={false}\r\n\t\t\t\t\t\tchangePlanID={\"\"}\r\n\t\t\t\t\t\tchangePlanStep={-1}\r\n\t\t\t\t\t\tincrementChangePlanStep={null}\r\n\t\t\t\t\t\tchangePlanName={\"\"}\r\n\t\t\t\t\t\tshowDecommissioned={false}\r\n\t\t\t\t\t/> : null}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(RackDiagrams);\r\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport { Grid, CircularProgress, Typography, withStyles, Paper } from '@material-ui/core/';\nimport getURL from \"../../helpers/functions/GetURL\";\nimport * as Constants from \"../../Constants\";\nimport { DatacenterCommand } from \"../enums/DatacenterCommands.ts\";\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\nimport CreateDatacenter from \"../helpers/CreateDatacenter\";\nimport { Privilege } from '../../enums/privilegeTypes.ts';\nimport EditDatacenter from \"../helpers/EditDatacenter\";\nimport ConfirmDeteleDC from \"../helpers/ConfirmDeleteDC\";\nimport ShowDatacenters from \"../helpers/functions/ShowDatacenters\";\nimport RacksView from './RacksView';\nimport { RackCommand } from \"../enums/RackCommands.ts\";\nimport StatusDisplay from '../../helpers/StatusDisplay';\nimport RackDiagrams from \"../helpers/RackDiagrams\";\n\n\nconst racksMainPath = 'racks/';\n\nfunction createRackElem(color, title, index, assetNum, textColor) {\n    return { color, title, index, assetNum, textColor };\n}\n\nfunction createRack(rackTitle, racks) {\n    return { rackTitle, racks }\n}\n\nfunction sort(a, b) {\n    if (a.rackTitle > b.rackTitle) return 1;\n    if (a.rackTitle < b.rackTitle) return -1;\n    return 0;\n}\n\nfunction sortRack(a, b) {\n    if (a.index > b.index) return -1;\n    if (a.index < b.index) return 1;\n    return 0;\n}\n\nfunction sortAssets(a, b) {\n    if (a.rack_position > b.rack_position) return 1;\n    if (a.rack_position < b.rack_position) return -1;\n    return 0;\n}\n\nconst useStyles = theme => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    progress: {\n        display: 'flex',\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n        justify: \"center\",\n        alignItems: \"center\",\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n});\n\n\nclass DatacenterView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            datacentersList: [],\n            loadingDCList: true,\n            showConfirmationBox: false,\n            currentDatacenter: \"\",\n            showEditDC: false,\n            editDCName: \"\",\n            editDCAbbr: \"\",\n            selectedDatacenter: \"\",\n            abbreviation: \"\",\n            fullDatacenter: {},\n            racks: {},\n            is_offline_storage:false,\n        };\n    }\n\n    componentDidMount() {\n        this.getDatacenters();\n    }\n\n    getDatacenters = () => {\n        this.setState({ loadingDCList: true });\n        axios.get(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.GET_ALL_DATACENTERS)).then(\n            response => {\n                console.log(response.data.datacenters);\n                var datacenter = response.data.datacenters[0];\n                console.log(datacenter);\n                var name = datacenter === undefined ? \"\" : datacenter.name;\n                var abbreviation = datacenter === undefined ? \"\" : datacenter.abbreviation;\n                console.log(name);\n                this.setState({ datacentersList: response.data.datacenters, loadingDCList: false, selectedDatacenter: name, fullDatacenter: datacenter, abbreviation: abbreviation }, () => this.getRacks());\n            }\n        );\n    }\n\n    deleteDatacenter = () => {\n        console.log(this.state.currentDatacenter);\n        axios.post(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.DELETE),\n            {\n                \"datacenter_name\": this.state.currentDatacenter\n            }\n        ).then(\n            response => {\n                console.log(\"Deleteting\");\n                console.log(response);\n                if (response.data.message === \"success\") {\n                    this.setState({\n                        showConfirmationBox: false,\n                        showStatus: true,\n                        statusMessage: \"Successfully deleted site\",\n                        statusSeverity: \"success\",\n                    });\n                    this.getDatacenters();\n                } else {\n                    this.setState({\n                        showConfirmationBox: false,\n                        showStatus: true,\n                        statusMessage: response.data.message,\n                        statusSeverity: \"error\",\n                    });\n                }\n\n            }\n        );\n    }\n\n    openConfirmationBox = (event, datacenter) => {\n        this.setState({ showConfirmationBox: true, currentDatacenter: datacenter });\n    }\n\n    closeConfirmationBox = () => {\n        this.setState({ showConfirmationBox: false });\n    }\n\n    openEditDatacenter = (event, datacenterName, datacenterAbbrev) => {\n        this.setState({ editDCName: datacenterName, editDCAbbr: datacenterAbbrev }, () => this.setState({ showEditDC: true, }));\n    }\n\n    closeEditDatacenter = () => {\n        this.setState({\n            showEditDC: false,\n            editDCName: \"\",\n            editDCAbbr: \"\",\n            showStatus: false,\n            statusMessage: '',\n            statusSeverity: 'info',\n            isOfflineStorage: false,\n            selectedDatacenter: \"\",\n            fullDatacenter: \"\",\n\n            racks: [],\n        });\n    }\n\n    closeShowStatus = () => {\n        this.setState({ showStatus: false });\n    }\n\n    updateRacks = (command, rack1, rack2) => {\n        axios.post(\n            getURL(racksMainPath, command),\n            {\n                'start_letter': rack1[0],\n                'stop_letter': rack2[0],\n                'start_number': rack1.substring(1),\n                'stop_number': rack2.substring(1),\n                \"datacenter_name\": this.state.selectedDatacenter,\n            }\n        ).then(response => {\n            if (response.data.message === 'success') {\n                this.setState({ showStatus: true, statusMessage: \"Success\", statusSeverity: \"success\", showConfirmationBox: false }, () => this.getRacks());\n                if (command === RackCommand.GET_RACK_DETAILS) {\n                    const win = window.open(response.data.link, '_blank');\n                    if (win != null) {\n                        win.focus();\n                    }\n                }\n            } else {\n                this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\n            }\n        });\n    }\n\n    updateDatacenter = (event) => {\n        console.log(event.target.value);\n        this.setState({is_offline_storage:event.target.value.is_offline_storage, selectedDatacenter: event.target.value.name, abbreviation:event.target.value.abbreviation, fullDatacenter: event.target.value, isOfflineStorage: event.target.value.is_offline_storage }, () => this.getRacks());\n    }\n\n\n    getChassisData = (rackTitle, rack) => {\n        axios.post(getURL(Constants.ASSETS_MAIN_PATH, \"getbladesbychassis/\"),\n            {\n                \"blade_chassis\": \"\",\n            }\n        ).then(response => {\n            var blades = response.data.instances;\n\n        })\n    }\n\n\n    createDiagram = (startL, stopL, startN, stopN) => {\n        axios.post(getURL(Constants.RACKS_MAIN_PATH, \"details/\"),\n            {\n                \"start_letter\": startL,\n                \"stop_letter\": stopL,\n                \"start_number\": startN,\n                \"stop_number\": stopN,\n                \"datacenter_name\": this.state.selectedDatacenter,\n            }\n        ).then(\n            response => {\n                var assets = response.data.racks[0][startL + startN];\n                assets.sort(sortAssets);\n                var rack = [];\n\n                var numChassis = 0;\n                var index = 0;\n                for (let rackPos = 1; rackPos <= 42; rackPos++) {\n                    if (assets.length > 0 && index < assets.length) {\n                        var asset = assets[index];\n                        if (asset.rack_position === rackPos) {\n                            for (let assetHeight = 0; assetHeight < asset.height; assetHeight++) {\n                                var title = asset.model + \",  \";\n                                title += ((asset.hostname === \"\") ? \"#\" + asset.asset_number : asset.hostname);\n                                if (asset.mount_type === \"chassis\") {\n                                    //numChassis++;\n                                }\n                                title = (assetHeight === Math.floor(asset.height / 2)) ? title : \"\";\n\n                                try {\n                                    var r = parseInt(\"0x\" + asset.display_color.substring(1, 3));\n                                    var g = parseInt(\"0x\" + asset.display_color.substring(3, 5));\n                                    var b = parseInt(\"0x\" + asset.display_color.substring(5));\n\n                                    var textColor = (r + g + b < 300 ? \"#FFFFFF\" : \"#000000\")\n                                } catch {\n                                    var textColor = \"#000000\"\n                                }\n                                rack.push(createRackElem(asset.display_color, title, rackPos + assetHeight, asset.asset_number, textColor));\n\n\n                            }\n                            rackPos += (asset.height - 1);\n                            index++;\n                        } else {\n                            rack.push(createRackElem(\"#FFFFFF\", \"\", rackPos));\n                        }\n\n\n                    } else {\n                        rack.push(createRackElem(\"#FFFFFF\", \"\", rackPos));\n                    }\n                }\n\n                var rackTitle = startL + (startN > 9 ? startN : \" \" + startN);\n                if (numChassis > 0) {\n                    this.getChassisData(rackTitle, rack);\n                } else {\n                    rack.sort(sortRack);\n                    this.state.racks.push(createRack(rackTitle, rack));\n                    this.state.racks.sort(sort)\n                    this.forceUpdate();\n                }\n\n\n            });\n    }\n\n    getRacks = () => {\n        this.state.racks = [];\n        this.forceUpdate();\n        axios.post(getURL(Constants.RACKS_MAIN_PATH, \"all/\"),\n            {\n                \"datacenter_name\": this.state.selectedDatacenter,\n            }\n        ).then(\n            response => {\n                var racks = [];\n                response.data.racks.map(rack => {\n                    racks.push(rack.label);\n                })\n                racks.map(rack => {\n                    var startL = rack.substring(0, 1);\n                    var startN = parseInt(rack.substring(1));\n                    this.createDiagram(startL, startL, startN, startN);\n                });\n            });\n    }\n\n\n\n\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <React.Fragment>\n                <ErrorBoundary>\n                    <Grid\n                        container\n                        spacing={5}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                    >\n                        <Grid item xs={12}>\n                            <Typography variant=\"h4\">\n                                Sites\n                            </Typography>\n                        </Grid>\n                        <CreateDatacenter\n                            disabled={!(this.props.privilege.admin || this.props.privilege.asset)}\n                            search={this.getDatacenters}\n                            selectedDatacenter={this.state.selectedDatacenter}\n                            dc={this.state.fullDatacenter}\n                            selectDatacenter={this.updateDatacenter}\n                            datacenterList={this.state.datacentersList}\n                        />\n\n                        {this.state.loadingDCList ?\n                            <div className={classes.progress}><CircularProgress /></div> :\n\n                            <Grid item xs={12}>\n                                <ShowDatacenters\n                                    classes={classes}\n                                    datacentersList={this.state.datacentersList}\n                                    privilege={this.props.privilege}\n                                    openConfirmationBox={this.openConfirmationBox}\n                                    editDatacenter={this.openEditDatacenter}\n                                    selectedDatacenter={this.state.selectedDatacenter}\n                                    updateRacks={this.updateRacks}\n                                    privilege={this.props.privilege}\n                                    dc={this.state.fullDatacenter}\n                                    isOfflineStorage={this.state.isOfflineStorage}\n                                />\n                            </Grid>}\n                        <Grid item xs={6}>\n                            <EditDatacenter\n                                show={this.state.showEditDC}\n                                close={this.closeEditDatacenter}\n                                dcName={this.state.editDCName}\n                                dcAbbrev={this.state.editDCAbbr}\n                                search={this.getDatacenters}\n                                is_offline_storage={this.state.is_offline_storage}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <ConfirmDeteleDC\n                                showConfirmationBox={this.state.showConfirmationBox}\n                                closeConfirmationBox={this.closeConfirmationBox}\n                                deleteDatacenter={this.deleteDatacenter}\n                                close={this.closeEditDatacneter}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <Paper elevation={1}>\n                        <Typography variant=\"h5\" style={{ padding: \"1%\" }}>Datacenter Name: {this.state.selectedDatacenter}</Typography>\n                        <Typography variant=\"h5\" style={{ padding: \"1%\" }}>Datacenter Abbreviation: {this.state.abbreviation}</Typography>\n                    </Paper>\n                    {this.state.isOfflineStorage ? null :\n                        <RackDiagrams\n                            privilege={this.props.privilege}\n                            username={this.props.username}\n                            getRacks={this.getRacks}\n                            racks={this.state.racks}\n                        />\n                    }\n                    <StatusDisplay\n                        open={this.state.showStatus}\n                        severity={this.state.statusSeverity}\n                        closeStatus={this.closeShowStatus}\n                        message={this.state.statusMessage}\n                    />\n                </ErrorBoundary>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default withStyles(useStyles)(DatacenterView);\n","export enum StatsCommand {\r\n    GENERATE_REPORT = \"generate-report\",\r\n    TEST = \"test\",\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\nimport DatacenterView from \"./DatacentersView\";\r\nimport { Privilege } from '../../enums/privilegeTypes';\r\n\r\nconst useStyles = theme => ({\r\n\r\n  });\r\n\r\nclass DatacenterManagerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorBoundary>\r\n                    <DatacenterView privilege={this.props.privilege} username={this.props.uesername} />\r\n                </ErrorBoundary>\r\n            </React.Fragment>\r\n        );\r\n}\r\n  }\r\n\r\n\r\n  export default withStyles(useStyles)(DatacenterManagerView);\r\n","export default function jsonToArr(incomingJSON) {\r\n    var json = {};\r\n    try {\r\n        json = JSON.parse(incomingJSON);\r\n    } catch (e) {\r\n        json = incomingJSON;\r\n    }\r\n\r\n    if (Object.entries(json).length === 0 && json.constructor === Object) {\r\n        return [];\r\n    }\r\n\r\n    const items = [];\r\n\r\n    Object.keys(json).map((key) => {\r\n        const row = [];\r\n        row.push(key);\r\n        row.push(json[key]);\r\n        items.push(row);\r\n\r\n        return key;\r\n    });\r\n    return items;\r\n}\r\n","export enum LogCommand {\r\n    TEST = \"test/\",\r\n    GET_LOGS = \"getlogs/\",\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../../racks/enums/DatacenterCommands.ts\";\r\nimport { StatsCommand } from \"../enums/StatsCommands.ts\";\r\nimport JSONtoArr from \"../../helpers/functions/JSONtoArr\";\r\nimport StatusDisplay from '../../helpers/StatusDisplay';\r\nimport ErrorBoundray from '../../errors/ErrorBoundry';\r\nimport { Select, MenuItem, InputLabel, Grid, Paper, Typography, Button } from '@material-ui/core';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, CircularProgress } from '@material-ui/core';\r\n\r\nconst statsMainPath = 'stats/';\r\nconst tables = {\r\n    \"totalUsage\": \"Total Usage\",\r\n    \"spaceUsage\": \"Space Usage\",\r\n    \"vendorUsage\": \"Vendor Usage\",\r\n    \"modelUsage\": \"Model Usage\",\r\n    \"ownerUsage\": \"Owner Usage\",\r\n}\r\n\r\nconst tableCols = {\r\n    \"totalUsage\": [\"Total\", \"Usage\"],\r\n    \"spaceUsage\": [\"Rack\", \"Usage\"],\r\n    \"vendorUsage\": [\"Vendor\", \"Usage\"],\r\n    \"modelUsage\": [\"Model\", \"Usage\"],\r\n    \"ownerUsage\": [\"Ownder\", \"Usage\"],\r\n}\r\n\r\nexport default class StatisticsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n            selectedDatacenter: 'All Datacenters',\r\n            tableValues: {\r\n                \"totalUsage\": [],\r\n                \"spaceUsage\": [],\r\n                \"vendorUsage\": [],\r\n                \"modelUsage\": [],\r\n                \"ownerUsage\": [],\r\n            },\r\n            totalUsage: [],\r\n            spaceUsage: [],\r\n            vendorUsage: [],\r\n            modelUsage: [],\r\n            ownerUsage: [],\r\n\r\n            showStatus: false,\r\n            statusMessage: '',\r\n            statusSeverity: '',\r\n        };\r\n\r\n        this.closeShowStatus = this.closeShowStatus.bind(this);\r\n\r\n        axios.defaults.headers.common['token'] = this.props.token;\r\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDatacenters();\r\n\r\n        var event = {\r\n            target: {\r\n                value:\"All Datacenters\",\r\n            }\r\n        }\r\n        this.generateReport(event);\r\n    }\r\n\r\n    getDatacenters = () => {\r\n        axios.get(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.GET_ALL_DATACENTERS)).then(\r\n            response => {\r\n                console.log(response);\r\n                this.setState({ datacenterList: response.data.datacenters, loadingDatacenters: false });\r\n            }\r\n        );\r\n    }\r\n\r\n    generateReport = (event) => {\r\n        var dc = event.target.value;\r\n        this.setState({ selectedDatacenter: dc, generatingReport: true });\r\n        axios.post(getURL(statsMainPath, StatsCommand.GENERATE_REPORT), {\r\n            'datacenter_name': dc.name === \"All Datacenters\" ? \"\" : dc.name,\r\n        }).then(response => {\r\n            try {\r\n                var data = response.data;\r\n                var totalUsage = [];\r\n                var totalUsageRow = [\"Total Usage\"];\r\n                totalUsageRow.push(data[\"totalUsage\"]);\r\n                totalUsage.push(totalUsageRow);\r\n\r\n                var spaceUsage = JSONtoArr(data[\"spaceUsage\"]);\r\n                if (spaceUsage.length === 0) {\r\n                    spaceUsage.push([\"No space is currently being used\", []])\r\n                }\r\n                var vendorUsage = JSONtoArr(data[\"vendorUsage\"]);\r\n                if (vendorUsage.length === 0) {\r\n                    vendorUsage.push([\"No vendors currently using space\", []])\r\n                }\r\n                var modelUsage = JSONtoArr(data[\"modelUsage\"]);\r\n                if (modelUsage.length === 0) {\r\n                    modelUsage.push([\"No models currently using space\", []])\r\n                }\r\n                var ownerUsage = JSONtoArr(data[\"ownerUsage\"]);\r\n                if (ownerUsage.length === 0) {\r\n                    ownerUsage.push([\"No owners currently using space\", []])\r\n                }\r\n\r\n                this.setState({\r\n                    showStatus: true,\r\n                    statusSeverity: \"success\",\r\n                    statusMessage: \"Successfully generated Report\",\r\n                    tableValues: {\r\n                        \"totalUsage\": totalUsage,\r\n                        \"spaceUsage\": spaceUsage,\r\n                        \"vendorUsage\": vendorUsage,\r\n                        \"modelUsage\": modelUsage,\r\n                        \"ownerUsage\": ownerUsage,\r\n                    },\r\n                })\r\n            } catch {\r\n                this.setState({ showStatus: true, statusMessage: \"Successfully generated Report\", statusSeverity: \"error\" })\r\n            }\r\n\r\n            this.setState({ generatingReport: false })\r\n        });\r\n    }\r\n\r\n    closeShowStatus() {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ErrorBoundray >\r\n                    <StatusDisplay\r\n                        open={this.state.showStatus}\r\n                        severity={this.state.statusSeverity}\r\n                        closeStatus={this.closeShowStatus}\r\n                        message={this.state.statusMessage}\r\n                    />\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Reports\r\n                        </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            {this.state.loadingDatacenters || this.state.generatingReport ?\r\n                                <CircularProgress /> :\r\n                                <span>\r\n                                    <InputLabel id=\"datacenter-select-label\">Select Datacenter</InputLabel>\r\n                                    <Select\r\n                                        name='datacenter_name'\r\n                                        id=\"datacenter-select\"\r\n                                        value={this.state.selectedDatacenter}\r\n                                        onChange={(event) => this.generateReport(event)}\r\n                                        style={{ width: \"100%\" }}\r\n                                    >\r\n                                        <MenuItem value=\"All Datacenters\">All Datacenters</MenuItem>\r\n                                        {this.state.datacenterList.map(value => {\r\n                                            return (<MenuItem value={value}>{value[\"name\"]}</MenuItem>);\r\n                                        })}\r\n                                    </Select>\r\n                                </span>\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div>\r\n\r\n                    </div>\r\n                    {Object.keys(tables).map(key => (\r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                            >\r\n                                <Typography>{tables[key]}</Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n                                <TableContainer component={Paper}>\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow >\r\n                                                {tableCols[key].map(column => (<TableCell><span id={column}>{column}</span></TableCell>))}\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {this.state.tableValues[key].map(row => (\r\n                                                <TableRow>\r\n                                                    {row.map(column => (<TableCell><span id={column}>{column + (isNaN(column) ? \"\" : \"%\")}</span></TableCell>))}\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n                    ))}\r\n                </ErrorBoundray>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\"\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core/\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TextField } from '@material-ui/core';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport { LogCommand } from \"../enums/LogCommands.ts\";\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\n\r\nconst useStyles = {\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    searchbar: {\r\n        minWidth: \"200px\",\r\n        flexGrow: 1,\r\n    },\r\n  };\r\n\r\nfunction makeTableData(index, timestamp, type, message) {\r\n    return { index, timestamp, type, message };\r\n}\r\n\r\nconst typeKey = \"type\";\r\nconst timestampKey = \"timestamp\";\r\nconst USER_KEY = \"user\";\r\nconst ASSET_KEY = \"assets\";\r\n\r\nclass LogsView extends React.Component  {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            logItems:[],\r\n            filteredLogs:[],\r\n            allLogs:null,\r\n            filterUser:\"\",\r\n            filterAsset:\"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLogs();\r\n    }\r\n\r\n    getLogs = () => {\r\n        axios.get(getURL(Constants.LOGS_MAIN_PATH, LogCommand.GET_LOGS)).then(response => {\r\n            this.parseLog(response.data.log);\r\n            this.filter();\r\n        });\r\n    }\r\n\r\n    parseLog = (logs) => {\r\n        var items = [];\r\n        logs.map((log, index) => {\r\n            var message = \"\";\r\n            Object.entries(log).map(([key, value]) => {\r\n                if (key === typeKey || key === timestampKey) {\r\n                    return;\r\n                }\r\n                message += value + \"\\n\";\r\n            });\r\n            items.push(makeTableData(index, log[timestampKey], log[typeKey], message));\r\n        });\r\n\r\n        this.setState({ logItems: items, filteredLogs:items, allLogs:logs });\r\n    }\r\n\r\n    filter = () => {\r\n        var user = this.state.filterUser;\r\n        var asset = this.state.filterAsset;\r\n        var filteredItems = [];\r\n\r\n        this.state.allLogs.map(entry => {\r\n            console.log(entry);\r\n            var hasAsset = false;\r\n            var hasUser = false;\r\n\r\n            try {\r\n                if (entry.message.match(/\\[.+\\]/)[0].includes(user)) {\r\n                    hasUser = true;\r\n                }\r\n            } catch {\r\n                hasUser = false;\r\n            }\r\n\r\n\r\n            try {\r\n                if (asset !== \"\") {\r\n                    var assetNum = \"\" + entry.request.asset_number\r\n                    if (assetNum.includes(asset)) {\r\n                        hasAsset = true;\r\n                    }\r\n                } else {\r\n                    hasAsset = true;\r\n                }\r\n            } catch {\r\n                hasAsset = false;\r\n            }\r\n\r\n            if (hasAsset && hasUser) {\r\n                filteredItems.push(entry);\r\n            }\r\n        });\r\n\r\n        filteredItems.sort(function(a, b) {\r\n            if (a.timestamp > b.timestamp) return -1;\r\n            if (a.timestamp < b.timestamp) return 1;\r\n            return 0;\r\n        })\r\n\r\n        this.setState({ filteredLogs:filteredItems });\r\n    }\r\n\r\n    updateFilterUser = (event) => {\r\n        this.setState({ filterUser: event.target.value }, () => { this.filter() });\r\n    }\r\n\r\n    updateFilterAsset = (event) => {\r\n        this.setState({ filterAsset: event.target.value }, () => { this.filter() });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorBoundary>\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Logs\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.getLogs}\r\n                            >\r\n                                Refresh Logs\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                className={classes.searchbar}\r\n                                name={\"filter-users\"}\r\n                                placeholder=\"Search users\"\r\n                                fullWidth\r\n                                onChange={this.updateFilterUser}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                className={classes.searchbar}\r\n                                name={\"filter-assets\"}\r\n                                placeholder=\"Search assets\"\r\n                                fullWidth\r\n                                onChange={this.updateFilterAsset}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table className={classes.table} aria-label=\"simple table\">\r\n                                    <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"left\"><span id={\"timestamp\"} style={{fontWeight: \"bold\"}}>Timestamp</span></TableCell>\r\n                                        <TableCell align=\"left\"><span id={\"type\"} style={{fontWeight: \"bold\"}}>type</span></TableCell>\r\n                                        <TableCell align=\"left\"><span id={\"message\"} style={{fontWeight: \"bold\"}}>Message</span></TableCell>\r\n                                    </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                    {this.state.filteredLogs.map(logItem => (\r\n                                        <TableRow key={logItem.timestamp}>\r\n                                            <TableCell aligh=\"left\">{logItem.timestamp}</TableCell>\r\n                                            <TableCell align=\"left\">{logItem.type}</TableCell>\r\n                                            <TableCell align=\"left\">{logItem.message}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(LogsView);\r\n","// React\nimport React from 'react';\nimport axios from 'axios';\n\n// Helpers\nimport getURL from '../../helpers/functions/GetURL';\nimport StatusDisplay from '../../helpers/StatusDisplay';\nimport ErrorBoundray from '../../errors/ErrorBoundry';\nimport { AssetCommand } from '../../assets/enums/AssetCommands.ts';\n\n// Material UI Core\nimport { Grid, Paper, Typography, Button, withStyles } from '@material-ui/core';\nimport { Modal, Fade, Backdrop, TextField, Chip, IconButton } from '@material-ui/core';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails } from '@material-ui/core';\n\n// Icons\nimport EditIcon from '@material-ui/icons/Edit';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CheckIcon from '@material-ui/icons/Check';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// Path prefix for change plan routes\nconst changePlanPath = \"changeplans/\";\n\n// CSS styles\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: \"100%\",\n    },\n    grid: {\n        backgroundColor: theme.palette.background.paper,\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        width: \"50%\"\n    },\n    progress: {\n        display: 'flex',\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n});\n\n// A view to display a user's change plans\nclass ChangePlansView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // Status snackbar\n            statusOpen: false,\n            statusMessage: '',\n            statusSeverity: '',\n\n            // Change plans\n            changePlans: [],\n\n            // Change plan actions\n            changePlanDetails: {},\n\n            // Dialog to rename a change plan\n            renameDialog: false,\n\n            // Name to rename a change plan\n            planName: \"\",\n\n            // Id of change plan to rename\n            planId: null,\n\n            // Dialog to execute a change plan\n            executeDialog: false,\n\n            // Id of change plan to execute\n            executeId: null,\n\n            // Dialog to delete a change plan\n            deleteDialog: false,\n\n            // Id of change plan to delete\n            deleteId: null,\n\n            // Modal to inform user of change plan mode\n            changeDescriptionModal: false,\n\n            // Id of plan to edit\n            editId: null,\n\n            // Step of plan to edit\n            editStep: null,\n\n            // Name of plan to edit\n            editName: \"\",\n\n            // Conflicts\n            conflicts: null,\n\n            // Create change plan modal\n            changePlanModal: false,\n\n            // Name of change plan to create\n            changePlanName: null,\n\n            // Create plan description modal\n            descriptionModal: false,\n        };\n\n        // Axios network request headers\n        axios.defaults.headers.common['token'] = this.props.token;\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\n    }\n\n    // When component appears on screen\n    componentDidMount() {\n        this.fetchAllChangePlans();\n    }\n\n    // Get all change plans for the user\n    fetchAllChangePlans = () => {\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_GET_PLANS), {\n            'owner': this.props.username,\n        }).then(response => {\n            var change_plans = response.data.change_plans;\n            if (change_plans !== null) {\n                this.setState({ changePlans: change_plans });\n\n                // For each change plan, grab details/actions\n                change_plans.forEach(plan => {\n                    axios.post(\n                        getURL(changePlanPath, AssetCommand.CHANGE_PLAN_GET_ACTIONS), {\n                        'change_plan_id': plan.identifier,\n                        'owner': this.props.username,\n                    }).then(response => {\n                        var details = this.state.changePlanDetails;\n                        details[plan.identifier] = response.data.change_plan_actions;\n\n                        this.setState({ changePlanDetails: details });\n                    });\n                });\n            }\n        }\n        );\n    }\n\n    closeShowStatus = () => {\n        this.setState({ showStatus: false })\n    }\n\n    // Enter change plan mode for the given change plan unique id\n    startEditing = () => {\n        this.closeDescriptionModal();\n        this.props.updateChangePlan(true, this.state.editId, this.state.editStep, this.state.editName);\n    }\n\n    // Saves the plan name\n    updatePlanName = (event) => {\n        this.setState({ planName: event.target.value });\n    }\n\n    // Change the name of the change plan with the given unique id\n    renameChangePlan = () => {\n        this.closeRenameDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_EDIT), {\n            'change_plan_id': this.state.planId,\n            'name': this.state.planName,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ planId: null, planName: \"\" });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the dialog to rename the change plan for the given unique id\n    openRenameDialog = (identifier) => {\n        this.setState({ renameDialog: true, planId: identifier });\n    }\n\n    // Close the dialog to rename the change plan\n    closeRenameDialog = () => {\n        this.setState({ renameDialog: false });\n    }\n\n    // Open the dialog to execute the change plan for the given unique id\n    openExecuteDialog = (identifier) => {\n        this.setState({ executeDialog: true, executeId: identifier });\n    }\n\n    // Close the dialog to execute the change plan\n    closeExecuteDialog = () => {\n        this.setState({ executeDialog: false });\n    }\n\n    // Execute the change plan\n    executeChangePlan = () => {\n        this.closeExecuteDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_EXECUTE), {\n            'change_plan_id': this.state.executeId,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ executeId: null });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the dialog to delete the change plan for the given unique id\n    openDeleteDialog = (identifier) => {\n        this.setState({ deleteDialog: true, deleteId: identifier });\n    }\n\n    // Close the dialog to delete the change plan\n    closeDeleteDialog = () => {\n        this.setState({ deleteDialog: false });\n    }\n\n    // Delete the change plan\n    deleteChangePlan = () => {\n        this.closeDeleteDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_DELETE), {\n            'change_plan_id': this.state.deleteId,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ deleteId: null });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the description modal\n    openDescriptionModal = (identifier, currentStep, name) => {\n        console.log(currentStep);\n        this.setState({ editId: identifier, editStep: currentStep, editName: name, changeDescriptionModal: true });\n    }\n\n    // Close the description modal\n    closeDescriptionModal = () => {\n        this.setState({ changeDescriptionModal: false });\n    }\n\n    // Close the create description modal\n    closeDescription = () => {\n        this.setState({ descriptionModal: false });\n    }\n\n    // Concatenate network port summaries\n    reducePorts = (portList) => {\n        var result = \"\"\n\n        portList.forEach(port => {\n            if (port.connection_hostname.length > 0) {\n                result += \"Host: \" + port.connection_hostname + \" \";\n            }\n\n            if (port.connection_port.length > 0) {\n                result += \"Port: \" + port.connection_port + \" \";\n            }\n\n            if (port.mac_address.length > 0) {\n                result += \"Mac: \" + port.mac_address + \" \";\n            }\n        });\n\n        return result;\n    }\n\n    // Validate a change plan for conflicts\n    validate = (identifier) => {\n        axios.post(\n            getURL(changePlanPath, \"validateplan/\"), {\n            'change_plan_id': identifier,\n        }).then(response => {\n            console.log(response);\n            var conflicts = response.data.conflicts;\n            if (Object.keys(conflicts).length === 0) {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.conflicts[Object.keys(conflicts)[0]], statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Delete a change plan action\n    deleteAction = (identifier, step) => {\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_DELETE_ACTION), {\n            'change_plan_id': identifier,\n            'step': step,\n        }).then(response => {\n            this.fetchAllChangePlans();\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Convert keys from backend to user friendly display names\n    lookup = (key) => {\n        return {\n            \"asset_numberOriginal\": \"Asset Number\",\n            \"model\": \"Model\",\n            \"hostname\": \"Hostname\",\n            \"rack\": \"Rack\",\n            \"rack_position\": \"Rack Position\",\n            \"owner\": \"Owner\",\n            \"comment\": \"Comment\",\n            \"datacenter_name\": \"Datacenter\",\n            \"tags\": \"Tags\",\n            \"network_connections\": \"Network Connections\",\n            \"power_connections\": \"Power Connections\",\n            'asset_number': \"Asset Number\",\n        }[key];\n    }\n\n    // Close snackbar\n    closeShowStatus = () => {\n        this.setState({ statusOpen: false });\n    }\n\n    // Create a new change plan\n    createChangePlan = () => {\n        this.setState({ changePlanModal: true });\n    }\n\n    // Close new change plan modal\n    closeChangePlanModal = () => {\n        this.setState({ changePlanModal: false });\n    }\n\n    // Update new change plan name\n    updatePlanName = (event) => {\n        this.setState({ changePlanName: event.target.value });\n    }\n\n    // Start the new change plan\n    beginChangePlan = () => {\n        this.closeChangePlanModal();\n        this.setState({ descriptionModal: true });\n\n        axios.post(\n            getURL(\"changeplans/\", \"createplan\"),\n            {\n                'owner': this.props.username,\n                'name': this.state.changePlanName,\n            }\n        ).then(response => {\n            this.props.updateChangePlan(true, response.data.change_plan, 1, this.state.changePlanName);\n            this.setState({ changePlanName: null });\n            this.fetchAllChangePlans();\n        });\n    }\nß\n    // Generate the work order pdf\n    generateWorkOrder = (event, id) => {\n        axios.post(getURL(changePlanPath, \"workorder/\"), { \"change_plan_id\": id }, { responseType: 'arraybuffer' }).then(response => {\n            try {\n                var blob = new Blob([response.data], { type: \"application/pdf\" });\n                var link = document.createElement('a');\n                link.href = window.URL.createObjectURL(blob);\n                link.download = \"WorkOrder_\" + new Date() + \".pdf\";\n                link.click();\n            } catch { }\n        })\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <ErrorBoundray >\n                    <StatusDisplay\n                        open={this.state.statusOpen}\n                        severity={this.state.statusSeverity}\n                        closeStatus={this.closeShowStatus}\n                        message={this.state.statusMessage}\n                    />\n                    <Grid\n                        container\n                        spacing={5}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                    >\n                        <Grid item xs={12}>\n                            <Typography variant=\"h4\">\n                                Change Plans\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={5}></Grid>\n                        <Grid item xs={2}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ width: \"100%\" }}\n                                startIcon={<AddCircleIcon />}\n                                onClick={this.createChangePlan}\n                            >\n                                Create Change Plan\n                            </Button>\n                        </Grid>\n                        <Grid item xs={5}></Grid>\n                        <Grid item xs={2}></Grid>\n                        <Grid item xs={8}>\n                            {this.state.changePlans.map(plan => {\n                                const executed = plan.executed === \"True\";\n                                const details = this.state.changePlanDetails[plan.identifier];\n                                var step = 1;\n                                if (details !== undefined) {\n                                    details.forEach(s => {\n                                        step = Math.max(step, s.step);\n                                    });\n\n                                    step = step + 1;\n                                }\n\n                                return (<ExpansionPanel key={plan.identifier}>\n                                    <ExpansionPanelSummary\n                                        expandIcon={<ExpandMoreIcon />}\n                                    >\n                                        <Typography>{plan.name}</Typography>\n                                        {executed ? <Chip size=\"small\" icon={<DoneIcon />} color=\"primary\" label={\"Executed at \" + plan.timestamp} style={{\n                                            marginLeft: \"15px\"\n                                        }} /> : null}\n                                    </ExpansionPanelSummary>\n                                    <ExpansionPanelDetails>\n                                        <Grid\n                                            container\n                                            spacing={3}\n                                            direction=\"row\"\n                                            justify=\"center\"\n                                            alignItems=\"center\"\n                                            style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                                        >\n                                            <Grid item xs={3}>\n                                                <Button\n                                                    variant=\"contained\"\n                                                    color={\"primary\"}\n                                                    style={{ width: \"100%\" }}\n                                                    onClick={(event) => this.generateWorkOrder(event, plan.identifier)}\n                                                >\n                                                    Generate work order\n                                                </Button>\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ?\n                                                    <Button\n                                                        variant=\"contained\"\n                                                        color=\"primary\"\n                                                        style={{ width: \"100%\" }}\n                                                        startIcon={<ReplayIcon />}\n                                                        onClick={() => { this.openRenameDialog(plan.identifier) }}\n                                                    >\n                                                        Rename\n                                                    </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"default\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<EditIcon />}\n                                                    onClick={() => { this.openDescriptionModal(plan.identifier, step, plan.name) }}\n                                                >\n                                                    Edit\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={12}>\n                                                {this.state.changePlanDetails[plan.identifier] !== undefined ?\n                                                    this.state.changePlanDetails[plan.identifier].map(detail => {\n                                                        var diff = detail.diff;\n\n                                                        if (Object.keys(diff).length == 0) {\n                                                            return null;\n                                                        }\n\n                                                        var isCreate = detail.action === \"create\" || detail.action === \"decommission\";\n                                                        return (<div><TableContainer component={Paper}>\n                                                            <Typography style={{ margin: \"10px\" }}>\n                                                                {detail.action.charAt(0).toUpperCase() + detail.action.slice(1)} Asset Number: {\n                                                                    detail.new_record.asset_numberOriginal === undefined ?\n                                                                        detail.new_record.asset_number : detail.new_record.asset_numberOriginal\n                                                                }\n                                                                {(!executed && detail.action !== \"collateral\") ?\n                                                                    <IconButton\n                                                                        style={{\n                                                                            marginLeft: \"20px\",\n                                                                        }}\n                                                                        onClick={() => { this.deleteAction(plan.identifier, detail.step) }}\n                                                                    >\n                                                                        <DeleteIcon />\n                                                                    </IconButton> : null}\n\n                                                            </Typography>\n\n                                                            <Table>\n                                                                <TableHead>\n                                                                    <TableRow >\n                                                                        <TableCell>Field</TableCell>\n                                                                        {isCreate ? <TableCell>Value</TableCell> : <TableCell>Current</TableCell>}\n                                                                        {isCreate ? null : <TableCell>New</TableCell>}\n                                                                    </TableRow>\n                                                                </TableHead>\n                                                                <TableBody>\n                                                                    {Object.keys(diff).map(key => {\n                                                                        if (key === \"tags\") {\n                                                                            return null;\n                                                                        }\n\n                                                                        return isCreate ?\n                                                                            (\n                                                                                <TableRow>\n                                                                                    <TableCell>{this.lookup(key)}</TableCell>\n                                                                                    <TableCell>\n                                                                                        {(key !== \"power_connections\") ? (key === \"network_connections\" ? Object.keys(diff[key]).length : diff[key]) : diff[key].length}\n                                                                                    </TableCell>\n                                                                                </TableRow>\n                                                                            ) :\n                                                                            (\n                                                                                <TableRow>\n                                                                                    <TableCell>{this.lookup(key)}</TableCell>\n                                                                                    <TableCell>{key !== \"network_connections\" ? diff[key][0] : this.reducePorts(diff[key][0])}</TableCell>\n                                                                                    <TableCell>{key !== \"network_connections\" ? diff[key][1] : this.reducePorts(diff[key][1])}</TableCell>\n                                                                                </TableRow>\n                                                                            )\n                                                                    }\n                                                                    )}\n                                                                </TableBody>\n                                                            </Table>\n                                                        </TableContainer><br /></div>);\n                                                    })\n                                                    : \"This change plan has made no changes!\"}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"default\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<CheckIcon />}\n                                                    onClick={() => { this.validate(plan.identifier) }}\n                                                >\n                                                    Validate\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<PlayArrowIcon />}\n                                                    onClick={() => { this.openExecuteDialog(plan.identifier) }}\n                                                >\n                                                    Execute\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"secondary\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<DeleteIcon />}\n                                                    onClick={() => { this.openDeleteDialog(plan.identifier) }}\n                                                >\n                                                    Delete\n                                                </Button> : null}\n                                            </Grid>\n                                        </Grid>\n\n                                    </ExpansionPanelDetails>\n                                </ExpansionPanel>);\n                            })\n                            }\n                        </Grid>\n                        <Grid item xs={2}></Grid>\n                    </Grid>\n\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.renameDialog}\n                        onClose={this.closeRenameDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.renameDialog}>\n                            <Backdrop\n                                open={this.state.renameDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                New plan name:\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}>\n                                            <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.renameChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Save\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeRenameDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.executeDialog}\n                        onClose={this.closeExecuteDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.executeDialog}>\n                            <Backdrop\n                                open={this.state.executeDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                Are you sure you want to execute this change plan?\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}></Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.executeChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Yes\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeExecuteDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.deleteDialog}\n                        onClose={this.closeDeleteDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.deleteDialog}>\n                            <Backdrop\n                                open={this.state.deleteDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                Are you sure you want to delete this change plan?\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}></Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.deleteChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Yes\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeDeleteDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.changeDescriptionModal}\n                        onClose={this.closeDescriptionModal}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.changeDescriptionModal}>\n                            <Backdrop\n                                open={this.state.changeDescriptionModal}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>\n                                                You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.startEditing}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Ok\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.changePlanModal}\n                        onClose={this.closeChangePlanModal}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.changePlanModal}>\n                            <Backdrop\n                                open={this.state.changePlanModal}\n                            >\n                            <div className={classes.grid}>\n                                <Grid\n                                    container\n                                    spacing={1}\n                                    direction=\"row\"\n                                    justify=\"flex-start\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={3}>\n                                        <Typography>\n                                            Enter plan name:\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs={9}>\n                                        <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={this.beginChangePlan}\n                                            style={{width: \"100%\"}}\n                                        >\n                                            Begin\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={this.closeChangePlanModal}\n                                            style={{width: \"100%\"}}\n                                        >\n                                            Cancel\n                                        </Button>\n                                    </Grid>\n\n                                </Grid>\n                                </div>\n                        </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.descriptionModal}\n                        onClose={this.closeDescription}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.descriptionModal}>\n                            <Backdrop\n                                open={this.state.descriptionModal}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>\n                                                You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.closeDescription}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Ok\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n\n                </ErrorBoundray>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(ChangePlansView);\n","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport ModelsView from './models/pages/ModelsView';\r\nimport UsersView from './users/pages/UsersView';\r\nimport AssetsView from './assets/pages/AssetsView';\r\nimport DatacenterManagerView from './racks/pages/DatacenterManagerView';\r\nimport StatisticsView from './statistics/pages/StatisticsView';\r\nimport LogsView from \"./logs/pages/LogsView\";\r\nimport ChangePlansView from \"./changeplans/pages/ChangePlans\";\r\n\r\nimport ErrorBoundry from './errors/ErrorBoundry';\r\n\r\nimport '../stylesheets/TabStyles.css';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    tab: {\r\n        flexGrow: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        maxWidth: \"100%\",\r\n        width: \"100%\",\r\n        margin: \"0 auto\",\r\n    }\r\n});\r\n\r\nconst currentTab = \"currentTab\";\r\n\r\nclass TabViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTabID:0,\r\n            anchorEl: null,\r\n            isMenuOpen:false,\r\n\r\n            // If change plan mode is on\r\n            changePlanActive: false,\r\n\r\n            // Unique id of current change plan\r\n            changePlanID: null,\r\n\r\n            // Current step in change plan\r\n            changePlanStep: null,\r\n\r\n            // Name of current change plan\r\n            changePlanName: \"\",\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        console.log(sessionStorage.getItem(currentTab));\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(sessionStorage.getItem(currentTab));\r\n        if (sessionStorage.getItem(currentTab) !== null) {\r\n            var tab =   parseInt(sessionStorage.getItem(currentTab));\r\n            this.setState({ currentTabID:tab });\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        sessionStorage.removeItem(currentTab);\r\n    }\r\n\r\n    handleChange(event, newValue) {\r\n        this.setState({ currentTabID: newValue });\r\n        sessionStorage.setItem(currentTab, newValue);\r\n    }\r\n\r\n    handleProfileMenuOpen = (event) => {\r\n        this.setState({ anchorEl: event.currentTarget, isMenuOpen: true });\r\n    }\r\n\r\n    handleMenuClose = () => {\r\n        this.setState({ anchorEl: null, isMenuOpen: false });\r\n    }\r\n\r\n    updateChangePlan = (status, id, step, name) => {\r\n        console.log(status, id, step, name);\r\n        this.setState({ changePlanActive: status, changePlanID: id,  changePlanStep: step, changePlanName: name });\r\n\r\n        if (status === false) {\r\n            this.setState({ changePlanStep: null, changePlanName: \"\" });\r\n        }\r\n    }\r\n\r\n    incrementChangePlanStep = () => {\r\n        const currentStep = this.state.changePlanStep;\r\n\r\n        this.setState({ changePlanStep: currentStep + 1 });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <ErrorBoundry>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Hyposoft Server Management\r\n                    </Typography>\r\n                            <div>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"menu-appbar\"\r\n                                    aria-haspopup=\"true\"\r\n                                    color=\"inherit\"\r\n                                    onClick={this.handleProfileMenuOpen}\r\n                                >\r\n                                    <AccountCircle />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    anchorEl={this.state.anchorEl}\r\n                                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                                    id='primary-search-account-menu'\r\n                                    keepMounted\r\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                                    open={this.state.isMenuOpen}\r\n                                    onClose={this.handleMenuClose}\r\n                                >\r\n                                    <MenuItem>{\"Username: \" + this.props.username}</MenuItem>\r\n                                    <MenuItem onClick={this.props.logout} >LOGOUT</MenuItem>\r\n                                </Menu>\r\n                            </div>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n            <Tabs value={this.state.currentTabID} onChange={this.handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                centered\r\n            >\r\n                <Tab value={0} style={{flexGrow: 1,}} label=\"Models\"> </Tab>\r\n                <Tab value={1} style={{flexGrow: 1,}} label=\"Assets\" ></Tab>\r\n                { (this.props.privilege.asset || this.props.privilege.admin || this.props.privilege.datacenters.length > 0) ? <Tab value={6} style={{flexGrow: 1,}} label=\"Change Plans\" ></Tab> : null }\r\n                {(this.props.privilege.admin) ? <Tab value={2} style={{flexGrow: 1,}} label=\"Users\"></Tab> : null}\r\n                {(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) ? <Tab value={3} style={{flexGrow: 1,}} label=\"Sites\" /> : null}\r\n                <Tab value={4} style={{flexGrow: 1,}} label=\"Statistics\" />\r\n                {(this.props.privilege.admin || this.props.privilege.audit) ? <Tab value={5} style={{flexGrow: 1,}} label=\"Logs\" />:null}\r\n            </Tabs>\r\n            {this.state.currentTabID !== 0 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><ModelsView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 1 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} >\r\n                    <AssetsView\r\n                        token={this.props.token}\r\n                        privilege={this.props.privilege}\r\n                        username={this.props.username}\r\n                        changePlanActive={this.state.changePlanActive}\r\n                        updateChangePlan={this.updateChangePlan}\r\n                        changePlanID ={this.state.changePlanID}\r\n                        changePlanStep={this.state.changePlanStep}\r\n                        incrementChangePlanStep={this.incrementChangePlanStep}\r\n                        changePlanName={this.state.changePlanName}\r\n                    />\r\n                </Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 2 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><UsersView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 3 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><DatacenterManagerView token={this.props.token} privilege={this.props.privilege} username={this.props.username} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 4 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 4}\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><StatisticsView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 5 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 5}\r\n                id={`tab-panel-logs`}\r\n                aria-labelledby={`tab-panel-logs`}\r\n            >\r\n                <Container className={classes.tab} ><LogsView /></Container>\r\n            </Typography>}\r\n            { this.state.currentTabID !== 6 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 6}\r\n                id={`tab-panel-logs`}\r\n                aria-labelledby={`tab-panel-logs`}\r\n            >\r\n                <Container className={classes.tab} >\r\n                    <ChangePlansView\r\n                        token={this.props.token}\r\n                        privilege={this.props.privilege}\r\n                        username={this.props.username}\r\n                        updateChangePlan={this.updateChangePlan}\r\n                    />\r\n                </Container>\r\n            </Typography>}\r\n            </ErrorBoundry>\r\n        </div>);\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(TabViewer);\r\n","import React from \"react\";\r\n\r\nimport axios from 'axios';\r\n\r\nimport Login from \"./Login\";\r\nimport TabViewer from \"./Tabs\";\r\nimport getURL from './helpers/functions/GetURL';\r\nimport * as Constants from \"./Constants\";\r\nimport ErrorBoundary from \"./errors/ErrorBoundry\";\r\n\r\nconst storedToken = 'token';\r\nconst storedPrivilege = 'privilege';\r\nconst storedLoggedIn = 'loggedIn';\r\nconst storedUsername = 'username';\r\n\r\nexport default class PageSelector extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\ttoken: sessionStorage.getItem(storedToken) || '',\r\n\t\t\tprivilege: sessionStorage.getItem(storedPrivilege) || '',\r\n\t\t\tloggedIn: sessionStorage.getItem(storedLoggedIn) || '',\r\n\t\t\tusername: sessionStorage.getItem(storedUsername) || '',\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\taxios.defaults.headers.common['token'] = this.state.token;\r\n\t\taxios.defaults.headers.common['privilege'] = this.state.privilege;\r\n\t}\r\n\r\n\tlogin = (token, username, privilege) => {\r\n\t\tconsole.log(privilege);\r\n\t\tsessionStorage.setItem(storedToken, token);\r\n\t\tsessionStorage.setItem(storedPrivilege, JSON.stringify(privilege));\r\n\t\tsessionStorage.setItem(storedLoggedIn, true);\r\n\t\tsessionStorage.setItem(storedUsername, username);\r\n\r\n\t\taxios.defaults.headers.common['token'] = token;\r\n\t\taxios.defaults.headers.common['privilege'] = privilege;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: token,\r\n\t\t\tprivilege: privilege,\r\n\t\t\tloggedIn: true,\r\n\t\t\tusername: username,\r\n\t\t});\r\n\r\n\t\twindow.history.replaceState({}, \"Hyposoft Asset Management\", \"/\")\r\n\t}\r\n\r\n\tloginWithOAuth = (token, username, privilege) => {\r\n\r\n\t\tsessionStorage.setItem(storedToken, token);\r\n\t\tsessionStorage.setItem(storedPrivilege, privilege);\r\n\t\tsessionStorage.setItem(storedLoggedIn, true);\r\n\t\tsessionStorage.setItem(storedUsername, username);\r\n\r\n\t\taxios.defaults.headers.common['token'] = token;\r\n\t\taxios.defaults.headers.common['privilege'] = privilege;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: token,\r\n\t\t\tprivilege: privilege,\r\n\t\t\tloggedIn: true,\r\n\t\t\tusername: username,\r\n\t\t}, () => { window.history.replaceState({}, \"Hyposoft Asset Management\", \"/\") });\r\n\t}\r\n\r\n\tlogout = () => {\r\n\t\taxios.get(getURL('users/', 'logout'));\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: '',\r\n\t\t\tprivilege: '',\r\n\t\t\tloggedIn: false,\r\n\t\t\tusername: '',\r\n\t\t});\r\n\r\n\t\tsessionStorage.removeItem(storedToken);\r\n\t\tsessionStorage.removeItem(storedPrivilege);\r\n\t\tsessionStorage.removeItem(storedLoggedIn);\r\n\t\tsessionStorage.removeItem(storedUsername);\r\n\r\n\t\twindow.history.replaceState({}, \"Hyposoft Asset Management\", \"/\")\r\n\t\tconsole.log(window.location.href);\r\n\t\tconsole.log(Constants.SHIB_REDIRECT_URI);\r\n\t\t//window.location = Constants.SHIB_REDIRECT_URI;\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tvar privilege = \"\";\r\n\t\ttry {\r\n\t\t\tprivilege = JSON.parse(this.state.privilege);\r\n\t\t} catch {\r\n\t\t\tprivilege = this.state.privilege;\r\n\t\t}\r\n\t\tconsole.log(\"privilege: \");\r\n\t\tconsole.log(privilege);\r\n\r\n\t\treturn (\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.state.loggedIn ?\r\n\t\t\t\t\t\t<TabViewer\r\n\t\t\t\t\t\t\ttoken={this.state.token}\r\n\t\t\t\t\t\t\tusername={this.state.username}\r\n\t\t\t\t\t\t\tprivilege={privilege}\r\n\t\t\t\t\t\t\tlogout={this.logout}\r\n\t\t\t\t\t\t/> :\r\n\t\t\t\t\t\t<Login\r\n\t\t\t\t\t\t\tloginFunc={this.login}\r\n\t\t\t\t\t\t\tshib={this.props.redirected}\r\n\t\t\t\t\t\t\tloginFuncOAuth={this.loginWithOAuth}\r\n\t\t\t\t\t\t/>}\r\n\t\t\t\t</div>\r\n\t\t\t</ErrorBoundary>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport PageSelector from './javascript/PageSelector';\n\nReactDOM.render(<PageSelector redirected={document.referrer}/>, document.getElementById('root'));\n"],"sourceRoot":""}
