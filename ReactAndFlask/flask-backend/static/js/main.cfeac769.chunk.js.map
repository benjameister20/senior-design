{"version":3,"sources":["images/logo.png","javascript/Constants.jsx","javascript/enums/privilegeTypes.ts","javascript/helpers/functions/GetURL.jsx","javascript/models/enums/ModelCommands.ts","javascript/models/enums/ModelInputs.ts","javascript/helpers/StatusDisplay.jsx","javascript/ShibLogin.jsx","javascript/Login.jsx","javascript/models/helpers/ExportModel.jsx","javascript/models/helpers/FilterModel.jsx","javascript/models/helpers/CreateModel.jsx","javascript/models/ModelConstants.jsx","javascript/models/helpers/ModelsTable.jsx","javascript/users/enums/UserCommands.ts","javascript/models/pages/ModelsView.jsx","javascript/users/helpers/functions/PrivilegePicker.jsx","javascript/users/enums/PrivilegeCommands.ts","javascript/users/helpers/FilterUser.jsx","javascript/users/helpers/CreateUser.jsx","javascript/users/helpers/UsersTable.jsx","javascript/users/UserConstants.jsx","javascript/users/pages/UsersView.jsx","javascript/assets/enums/AssetInputs.ts","javascript/assets/enums/AssetCommands.ts","javascript/users/helpers/functions/MakeCreateJSON.jsx","javascript/users/helpers/functions/MakeEditJSON.jsx","javascript/users/helpers/functions/MakeDeleteJSON.jsx","javascript/users/helpers/functions/MakeDetailViewJSON.jsx","javascript/assets/AssetConstants.jsx","javascript/assets/helpers/NetworkGraph.jsx","javascript/assets/helpers/functions/StringToMacAddress.jsx","javascript/assets/helpers/EditAsset.jsx","javascript/assets/helpers/DetailsAsset.jsx","javascript/assets/helpers/FilterAsset.jsx","javascript/helpers/functions/DescendingComparator.jsx","javascript/assets/helpers/CreateAsset.jsx","javascript/assets/helpers/ImportAsset.jsx","javascript/assets/helpers/AddAsset.jsx","javascript/assets/helpers/ExportAsset.jsx","javascript/assets/helpers/TableAssets.jsx","javascript/racks/enums/DatacenterCommands.ts","javascript/helpers/functions/GetComparator.jsx","javascript/helpers/functions/StableSort.jsx","javascript/errors/ErrorBoundry.jsx","javascript/assets/pages/AssetsView.jsx","javascript/racks/helpers/CreateDatacenter.jsx","javascript/racks/helpers/EditDatacenter.jsx","javascript/racks/pages/RacksView.jsx","javascript/racks/enums/RackCommands.ts","javascript/racks/helpers/functions/ShowDatacenters.jsx","javascript/racks/helpers/ConfirmDeleteDC.jsx","javascript/racks/helpers/RackDiagrams.jsx","javascript/racks/pages/DatacentersView.jsx","javascript/statistics/enums/StatsCommands.ts","javascript/racks/pages/DatacenterManagerView.jsx","javascript/helpers/functions/JSONtoArr.jsx","javascript/logs/enums/LogCommands.ts","javascript/statistics/pages/StatisticsView.jsx","javascript/logs/pages/LogsView.jsx","javascript/changeplans/pages/ChangePlans.jsx","javascript/Tabs.jsx","javascript/PageSelector.jsx","index.jsx"],"names":["module","exports","serverEndpoint","RackX","ASSETS_MAIN_PATH","MODELS_MAIN_PATH","USERS_MAIN_PATH","RACKS_MAIN_PATH","DATACENTERS_MAIN_PATH","LOGS_MAIN_PATH","PERMISSIONS_MAIN_PATH","DECOMMISSIONS_MAIN_PATH","CLIENT_ID","SHIB_REDIRECT_URI","window","location","href","Privilege","SHIBBOLETH_LOGIN","encodeURIComponent","HTTPS_STATUS_OK","getURL","path","endpoint","Constants","ModelCommand","ModelInput","StatusDisplay","props","state","Snackbar","open","this","autoHideDuration","onClose","closeStatus","elevation","variant","severity","message","IconButton","aria-label","color","size","onClick","fontSize","React","Component","ShibLogin","username","password","statusMessage","showStatus","statusSeverity","Grid","container","spacing","direction","justify","alignItems","onKeyDown","e","onKeyPressed","style","item","xs","src","logo","alt","height","Card","minWidth","CardContent","Typography","fontWeight","gutterBottom","closeShowStatus","loginMainPath","queryString","require","Login","getDukeCredentials","token","axios","get","headers","then","response","post","data","netid","mail","displayName","status","setState","initialized","oauth","loginFuncOAuth","loginWithOAuth","bind","submitCredentials","params","parse","hash","substring","access_token","console","log","loginFunc","event","target","value","key","preventDefault","stopPropagation","TextField","id","label","required","ref","onChange","updateUsername","type","updatePassword","Button","direciton","width","ExportModel","Paper","minHeight","padding","downloadTable","startIcon","showAll","createInputs","name","inputs","FilterModel","filters","hasOwnProperty","newFilters","forceUpdate","search","sm","md","lg","Autocomplete","options","includeInputInList","freeSolo","renderInput","vendor","updateSearchText","onBlur","fullWidth","InputProps","inputProps","min","max","defaultColor","CreateModel","updateColor","updateModelColor","hex","showModal","showImportModal","closeModal","networkPorts","numPorts","mountType","closeImportModal","onSuccess","success","create","undefined","createModel","uploadFile","FormData","append","importedFile","sendUploadedFile","chooseFile","files","updateNetworkPorts","ports","i","push","toString","updateModelCreator","updatePort","port","updateMountType","classes","background","Modal","aria-labelledby","aria-describedby","className","modal","closeAfterTransition","Fade","in","Backdrop","grid","onSubmit","modelNumber","InputLabel","Select","labelId","MenuItem","ethernetPorts","powerPorts","cpu","memory","storage","rowsMax","multiline","comment","List","root","subheader","ListSubheader","component","maxHeight","overflow","Array","from","length","x","map","_","index","ListItem","role","dense","button","ListItemText","primary","defaultValue","accept","withStyles","theme","flexGrow","display","justifyContent","backgroundColor","palette","paper","boxShadow","shadows","progress","marginLeft","GENERAL_MODEL_ERROR","modelsMainPath","UserCommand","mountTypeLookup","ModelsTable","oldDetails","detailedValues","display_color","showDetailedView","row","detailViewLoading","detailViewModel","modelNum","detailView","model","originalVendor","originalModelNumber","originalHeight","catch","error","ModelConstants","closeDetailedView","showDeleteModal","closeDeleteModal","delete","deleteModel","onEditSuccess","edit","editModel","clickInfo","popoverAnchor","clickComment","commentPopover","handlePopoverClose","handleCommentPopoverClose","updateModelEdited","save","defaults","common","privilege","TableContainer","Table","TableHead","TableRow","columns","col","TableCell","align","TableBody","vals","hover","admin","scope","keys","margin","Popover","Boolean","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","CircularProgress","model_number","mount_type","ethernet_ports","power_ports","adminColumns","columnLookup","ModelsView","completion","createdModel","Vendor","Height","CPU","Memory","Storage","Comment","showCreateModal","getVendorList","searchModels","createshowStatus","originalModelNum","viewVendor","viewModel","filter","searchVendor","searchModelNum","searchMountType","searchMinHeight","searchMaxHeight","searchMinNetworkPorts","searchMaxNetworkPorts","searchMinPower","searchMaxPower","searchCPU","searchMinMem","searchMaxMem","searchStore","searchComment","models","rows","Object","values","forEach","includes","parseInt","items","searchText","VENDOR_VALUES","vendorsList","results","madeVendorQuery","UPLOAD_FILE","summary","EXPORT_FILE","searchHeight","csvData","csvLink","link","click","searchAll","openCreateModal","openImportModal","closeCreateModal","updateModelColorDetails","reason","createStatusClose","detailStatusClose","detailshowStatus","createdVendor","createdModelNum","createdMountType","createdHeight","createdDispClr","createdEthPorts","createdPwrPorts","createdCPU","createdMem","createdStorage","createdComments","deleteVendor","detailStatusSeverity","detailStatusMessage","maxWidth","statusClose","useAutocomplete","filename","r","PrivilegePicker","generalPrivileges","title","defaultPrivs","defaultDCs","defaultPrivileges","asset","audit","power","datacenters","multiple","getOptionLabel","option","updatePrivilege","loading","dcPrivileges","updateDCPrivilege","PrivilegeCommand","Filters","resetCreate","display_name","email","searchUsers","updateprivilege","privs","priv","privileges","CreateModal","selectedPrivileges","updateSelectedPrivileges","UsersTable","beginEditing","canEdit","originalUsername","Username","Email","endEditing","USER_SUCCESS_TOKEN","USER_FAILURE_TOKEN","USER_CREATION_SUCCESS_MESSAGE","USER_EDIT_SUCCESS_MESSAGE","USER_EDIT_FAILURE_MESSAGE","USER_DELETE_SUCCESS_MESSAGE","USER_DELETE_FAILURE_MESSAGE","AssetInput","AssetCommand","blankSearch","UsersView","createUser","makeCreateJSON","UserConstants","setDisplayStatus","editUser","makeEditJSON","processResponse","deleteUser","makeDeleteJSON","detailViewUser","makeDetailViewJSON","getPrivileges","GET_PRIVILEGES","allDCPrivileges","loadingPrivileges","statusOpen","updateUserEdited","newDetails","successMessage","failureMessage","searchUsernm","searchEml","searchDspNm","searchPriv","deleteUsername","viewUser","updateUserCreator","updateEditUser","CHANGE_PLAN_PATH","SUCCESS_TOKEN","ERROR_TOKEN","getGraph","primaryHosts","host","hostnameMapping","nodes","edges","primaryHostID","entries","primaryHost","secondaryHosts","to","secondaryHostID","secondaryHost","Exception","NetworkGraph","graph","GET_NETWORK_NEIGHBORHOOD","assetNum","layout","hierarchical","interaction","dragNodes","dragView","events","select","marginTop","isDecommissioned","decomAsset","network_neighborhood","getNetwork","network","document","getElementById","stringToMac","val","returnVal","replace","toLowerCase","showTooltip","description","emptySearch","searchPath","left","right","EditAsset","forwardRef","Slide","checkForPDUShit","savedDatacenter","savedRackLetter","savedRackNumber","showPDU","getPowerFromProps","pwrCons","pwr","pwrCon","getPowerPortFromProps","pwrPorts","getAllBlades","hostname","blade_chassis","instances","instanceNames","bladeSlots","instance","identifier","asset_number","chassis_slot","bladeList","getLists","getModelList","getOwnerList","getDatacenterList","getAssetList","getChassisList","filteredChassisList","datacenter_name","chassisList","allInstances","modelNames","networkNames","powerPortNames","modelKey","loadingModels","modelList","networkList","powerPortList","mountTypes","users","user","loadingOwners","ownerList","datacenter","abbreviation","loadingDatacenters","datacenterList","hostnames","hostToModel","loadingHostnames","assetNumList","assetNumToModelList","availableNetworkConnections","editAsset","json","createJSON","changePlanJSON","changePlanID","changePlanStep","defaultValues","url","changePlanActive","AssetConstants","CHANGE_PLAN_CREATE_ACTION","close","incrementChangePlanStep","updateModel","networkConns","network_connections","updateBladeChassis","updateBladePosition","blade_position","updateHostname","updateRack","rackVal","rack","updateRackU","rackU","updateOwner","owner","updateComment","updateDatacenter","isOffline","dc","is_offline_storage","datacenterIsOffline","updateTags","tags","changeNetworkMacAddress","prevState","assign","mac_address","changeNetworkHostname","connection_hostname","getPortOptions","changeNetworkPort","connection_port","updatePowerPort","power_connections","changePowerPortState","portNum","leftRight","updateAssetNumber","getPowerConnections","pwrConns","num","split","customColor","customCPU","customMemory","customStorage","availableNetworks","networList","availableConnections","fetchAllAssets","portOptions","getModel","displayNetworks","getNetworkConnections","getMacValue","netCons","getConnectingHostname","getConnectionPort","connectionsDisabled","deleteAsset","showConfirmationBox","decommissionAsset","DECOMMISSION","openConfirmationBox","closeConfirmationBox","cancelUpgrades","customizeModel","display_colorOriginal","cpuOriginal","memoryOriginal","storageOriginal","restoreDefaults","fetchPDUState","states","currentStates","pduStates","fetchPowerState","power_state","powerStates","bmiPowerOn","bmiPowerOff","bmiPowerCycle","wait","a","timeout","Promise","resolve","setTimeout","pduPowerOn","letter","number","pduPowerOff","pduPowerCycle","loadingAssetNumber","selectedConnection","powerPortState","canSubmit","updated","MODEL","HOSTNAME","RACK","RACK_U","OWNER","COMMENT","DATACENTER","MAC_ADDRESS","NETWORK_CONNECTIONS","POWER_CONNECTIONS","ASSET_NUMBER","BLADE_CHASSIS","BLADE_POSITION","allThePowers","rack_position","chassis_hostname","substr","div","decommission_user","timestamp","form","dialogDiv","Tooltip","placement","disabled","bladeChassis","buttons","networkPort","macAddress","networkConnections","k","FormControl","RadioGroup","FormControlLabel","control","Radio","labelPlacement","blade","marginRight","connection","Alert","action","BackdropComponent","BackdropProps","border","appBar","position","flex","Transition","DetailAsset","closeDetailView","toggleDetails","detailsExpanded","networkNodes","Dialog","fullScreen","TransitionComponent","AppBar","Toolbar","edge","AlertTitle","changePlanName","FilterAsset","updateStartingLetter","startingLetter","updateEndingLetter","endingLetter","updateStartingNum","startingNum","updateEndingNum","endingNum","updateStartDate","startDate","updateEndDate","endDate","updateUser","clearFilters","assetType","decAssets","Date","decDate","allAssets","offline","updateItems","switchAssetType","Fragment","FormHelperText","InputLabelProps","shrink","descendingComparator","b","orderBy","CreateAsset","getNextAssetNum","originalModels","GET_NEXT_ASSET_NUM","validJSON","createAsset","validateForm","firstFree","free_left","pwrLst","powerPort","exception","currModel","next_pair","free_right","onSelect","bladePosition","ImportAsset","setFile","file","closeImport","baseURL","connections","showImport","refresh","AddAsset","openImport","openConnectionsImport","showConnectionsImport","closeConnectionsImport","openCreate","showCreate","closeCreate","ExportAsset","componentDidMount","canCreateChangePlans","openChangePlanModal","changePlanModal","closeChangePlanModal","updatePlanName","beginChangePlan","changeDescriptionModal","CHANGE_PLAN_CREATE","updateChangePlan","change_plan","closeDescriptionModal","decomType","createData","DatacenterCommand","headCells","numeric","decommissionHeadCells","TableAsset","CHANGE_PLAN_GET_ACTIONS","actions","change_plan_actions","assetNums","asset_numberOriginal","newInstances","new_record","getRack","tableItems","current","getDecommissionedAssets","body","originalRack","originalrack_position","generateLabels","selectedItems","GENERATE_LABELS","responseType","blob","Blob","createElement","URL","createObjectURL","download","createSortHandler","property","isAsc","order","openDetailedView","dAsset","assets","currAsset","detailAsset","rowOwner","result","decommissions","showStatusBar","onSelectAllClick","newSelected","n","indexOf","concat","deselectAllClick","selectedIndex","slice","addCheckedItem","getAttribute","openSpeedDial","speedDialOpen","closeSpeedDial","exitChangePlan","allSelected","offlineAssets","detailStatusOpen","deleteAssetRack","deleteAssetrack_position","detailHostname","createRef","elem","table","styledTableRow","headCell","tableCellHead","sortDirection","TableSortLabel","active","visuallyHidden","array","comparator","stabilizedThis","el","sort","stableSort","aria-checked","selected","tabIndex","Checkbox","checked","showDecommissioned","SpeedDial","ariaLabel","bottom","hidden","icon","onOpen","SpeedDialAction","tooltipTitle","paddingLeft","paddingRight","styledTableCell","marginBottom","clip","top","ErrorBoundary","hasError","errorInfo","children","AssetsView","offlineStorageVal","datacenterVal","CreateDatacenter","generateCreateJSON","datacenterAbbreviation","datacenterName","siteType","createDatacenter","CREATE","updateDatacenterName","updateDatacenterAbbrevation","getAbbreviation","selectSiteType","selectDatacenter","scroll","column","EditDatacenter","generateEditJSON","dcName","dcAbbrev","editDatacenter","EDIT","show","MinusSquare","SvgIcon","d","PlusSquare","useSpring","opacity","transform","Collapse","RackCommand","StyledTreeItem","iconContainer","group","borderLeft","fade","text","TreeItem","RacksView","handleFormat","newFormats","formats","sortRacks","rack1","rack2","deleteRack","firstRack","secondRack","racksList","racks","f","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","nodeId","heading","typography","pxToRem","fontWeightRegular","ShowDatacenters","useState","rackType","setRackType","setRack1","setRack2","datacentersList","selectedDatacenter","isOfflineStorage","ToggleButtonGroup","exclusive","newType","ToggleButton","updateRacks","CREATE_RACKS","DELETE_RACKS","ConfirmDeteleDC","deleteDatacenter","RackDiagrams","openAssetDetails","rackTitle","textColor","footer","getRacks","racksMainPath","createRackElem","sortRack","sortAssets","StatsCommand","DatacenterView","getDatacenters","loadingDCList","GET_ALL_DATACENTERS","fullDatacenter","currentDatacenter","DELETE","openEditDatacenter","datacenterAbbrev","editDCName","editDCAbbr","showEditDC","closeEditDatacenter","command","GET_RACK_DETAILS","win","focus","getChassisData","createDiagram","startL","stopL","startN","stopN","rackPos","assetHeight","Math","floor","createRack","closeEditDatacneter","DatacenterManagerView","uesername","jsonToArr","incomingJSON","JSON","constructor","LogCommand","statsMainPath","tables","tableCols","StatisticsView","generateReport","generatingReport","GENERATE_REPORT","totalUsage","totalUsageRow","spaceUsage","JSONtoArr","vendorUsage","modelUsage","ownerUsage","tableValues","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","isNaN","typeKey","timestampKey","LogsView","getLogs","GET_LOGS","parseLog","logs","makeTableData","logItems","filteredLogs","allLogs","filterUser","filterAsset","filteredItems","entry","hasAsset","hasUser","match","request","updateFilterUser","updateFilterAsset","searchbar","placeholder","logItem","aligh","changePlanPath","ChangePlansView","fetchAllChangePlans","CHANGE_PLAN_GET_PLANS","change_plans","changePlans","plan","details","changePlanDetails","startEditing","editId","editStep","editName","planName","renameChangePlan","closeRenameDialog","CHANGE_PLAN_EDIT","planId","openRenameDialog","renameDialog","openExecuteDialog","executeDialog","executeId","closeExecuteDialog","executeChangePlan","CHANGE_PLAN_EXECUTE","openDeleteDialog","deleteDialog","deleteId","closeDeleteDialog","deleteChangePlan","CHANGE_PLAN_DELETE","openDescriptionModal","currentStep","closeDescription","descriptionModal","reducePorts","portList","validate","conflicts","deleteAction","step","CHANGE_PLAN_DELETE_ACTION","lookup","createChangePlan","generateWorkOrder","executed","s","Chip","detail","diff","isCreate","charAt","toUpperCase","currentTab","TabViewer","handleProfileMenuOpen","currentTarget","isMenuOpen","handleMenuClose","currentTabID","handleChange","sessionStorage","getItem","tab","removeItem","newValue","setItem","aria-controls","aria-haspopup","Menu","keepMounted","logout","Tabs","indicatorColor","centered","Tab","Container","ChangePlans","menuButton","storedToken","storedPrivilege","storedLoggedIn","storedUsername","PageSelector","login","stringify","loggedIn","history","replaceState","shib","redirected","ReactDOM","render","referrer"],"mappings":"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","file":"static/js/main.cfeac769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.df79d0ea.png\";","/**\r\n * Constants file\r\n */\r\n\r\nexport const localServerEndpoint = 'http://localhost:4010/';\r\nexport const testServerEndpoint = 'https://parseltongue-finishinge-lfw68m.herokuapp.com/';\r\nexport const devServerEndpoint = 'https://parseltongue-dev.herokuapp.com/';\r\nexport const prodServerEndpoint = 'https://parseltongue-prod.herokuapp.com/';\r\n\r\nexport const serverEndpoint = localServerEndpoint;\r\n\r\n\r\nexport const RackX = [\r\n    'A', 'B', 'C', 'D', 'E',\r\n    'F', 'G', 'H', 'I', 'J',\r\n    'K', 'L', 'M', 'N', 'O',\r\n    'P', 'Q', 'R', 'S', 'T',\r\n    'W', 'X', 'Y', 'Z',\r\n]\r\n\r\nexport const ASSETS_MAIN_PATH = 'instances/';\r\nexport const MODELS_MAIN_PATH = \"models/\";\r\nexport const USERS_MAIN_PATH = \"users/\";\r\nexport const RACKS_MAIN_PATH = \"racks/\";\r\nexport const DATACENTERS_MAIN_PATH = \"datacenters/\";\r\nexport const LOGS_MAIN_PATH = \"logs/\"\r\nexport const PERMISSIONS_MAIN_PATH = \"permissions/\";\r\nexport const DECOMMISSIONS_MAIN_PATH = \"decommissions/\";\r\n\r\nexport const CLIENT_ID = \"ParselTonguesUserAuth\";\r\nexport const CLIENT_SECRET = \"LpUwB*eiK4Iw#1gaCu5jYp1u5uRF3ERsdmuNUGoKYNzn7rHm7b\";\r\nexport const SCOPE = \"basic\";\r\n\r\nexport var SHIB_REDIRECT_URI = \"\";\r\n\r\nif (window.location.href === \"http://localhost:3000\" || window.location.href === \"http://localhost:3000/\") {\r\n    SHIB_REDIRECT_URI = window.location.href;\r\n} else {\r\n    SHIB_REDIRECT_URI = serverEndpoint;\r\n}\r\n\r\nexport const SHIBBOLETH_LOGIN =\r\n    \"https://oauth.oit.duke.edu/oauth/authorize.php?\"\r\n     + \"client_id=\" + encodeURIComponent(CLIENT_ID)\r\n     + \"&client_secret=\" + encodeURIComponent(CLIENT_SECRET)\r\n     + \"&redirect_uri=\" + encodeURIComponent(SHIB_REDIRECT_URI)\r\n     + \"&response_type=token\"\r\n     + \"&state=1129\"\r\n     + \"&scope=\" + encodeURIComponent(SCOPE);\r\n\r\nexport const HTTPS_STATUS_OK = 200;\r\n","export enum Privilege  {\r\n    ADMIN = \"admin\",\r\n    USER = \"user\",\r\n};\r\n","import * as Constants from '../../Constants';\r\n\r\nexport default function getURL(path, endpoint) {\r\n    return Constants.serverEndpoint + path + endpoint;\r\n}\r\n","export enum ModelCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search = 'search/',\r\n    VENDOR_VALUES = 'assistedvendor/',\r\n    UPLOAD_FILE = 'import/',\r\n    EXPORT_FILE = 'export/'\r\n}\r\n","export enum ModelInput {\r\n    Vendor = 'vendor',\r\n    model_number = 'model_number',\r\n    mount_type = 'mount_type',\r\n    Height = 'height',\r\n    display_color = 'display_color',\r\n    ethernet_ports = 'ethernet_ports',\r\n    power_ports = 'power_ports',\r\n    CPU = 'cpu',\r\n    Memory = 'memory',\r\n    Storage = 'storage',\r\n    Comment = 'comment'\r\n}\r\n","import React from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\n\r\nexport default class StatusDisplay extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Snackbar open={this.props.open} autoHideDuration={4000} onClose={this.props.closeStatus}>\r\n                    <MuiAlert elevation={6} variant=\"filled\"\r\n                        severity={this.props.severity}\r\n                    >\r\n                        <div>\r\n                        {this.props.message}\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={this.props.closeStatus}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\" />\r\n                        </IconButton>\r\n                        </div>\r\n                    </MuiAlert >\r\n                </Snackbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport StatusDisplay from './helpers/StatusDisplay';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from '../images/logo.png';\r\n\r\n\r\n\r\nexport default class ShibLogin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username:'',\r\n            password:'',\r\n            statusMessage:'',\r\n            showStatus:false,\r\n            statusSeverity:'info',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid\r\n                container\r\n                spacing={5}\r\n                direction=\"column\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n                onKeyDown={(e) => this.onKeyPressed(e)}\r\n                style={{\r\n                    \"minHeight\": \"102vh\",\r\n                    \"background\": \"linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                }}\r\n            >\r\n                <Grid item xs={12}>\r\n                    <img src={logo} alt=\"\" style={{height: \"200px\", \"marginTop\": \"50px\"}} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Card\r\n                        style={\r\n                            {\r\n                                minWidth: '20vw',\r\n                            }\r\n                        }\r\n                    >\r\n                        <CardContent>\r\n                            <Grid\r\n                                container\r\n                                spacing={1}\r\n                                direction=\"column\"\r\n                                justify=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Grid container item alignItems=\"flex-start\" xs={12}>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        color=\"textPrimary\"\r\n                                        fontWeight=\"fontWeightBold\"\r\n                                        gutterBottom\r\n                                    >\r\n                                        Please wait while we log you in...\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <StatusDisplay\r\n                        open={this.state.showStatus}\r\n                        severity={this.state.statusSeverity}\r\n                        closeStatus={this.closeShowStatus}\r\n                        message={this.state.statusMessage}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Grid, Button, TextField, Card, CardContent, Typography } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport getURL from './helpers/functions/GetURL';\r\nimport { Privilege } from './enums/privilegeTypes.ts'\r\nimport StatusDisplay from './helpers/StatusDisplay';\r\nimport logo from '../images/logo.png';\r\nimport ShibLogin from './ShibLogin';\r\nimport * as Constants from \"./Constants\";\r\n\r\nconst loginMainPath = 'users/';\r\nconst queryString = require('query-string');\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // Login info\r\n            username:'',\r\n            password:'',\r\n\r\n            // Snackbar\r\n            statusMessage: '',\r\n            showStatus: false,\r\n            statusSeverity: 'info',\r\n\r\n            // If view has been initialized\r\n            initialized: false,\r\n\r\n            // OAuth NetID login\r\n            oauth: false,\r\n        };\r\n\r\n        this.closeShowStatus = this.closeShowStatus.bind(this);\r\n        this.submitCredentials = this.submitCredentials.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        try {\r\n            var params = queryString.parse(window.location.hash.substring(1));\r\n            if (params.access_token != null) {\r\n                this.getDukeCredentials(params.access_token);\r\n                this.setState({ oauth: true });\r\n            }\r\n        } catch(e) {\r\n            console.log(\"tried:\")\r\n        }\r\n\r\n        this.setState({ initialized: true });\r\n    }\r\n\r\n    // Login and send credentials to backend\r\n    submitCredentials() {\r\n        axios.post(\r\n            getURL(loginMainPath, 'authenticate'), {\r\n                username: this.state.username,\r\n                password: this.state.password,\r\n            }).then(response => {\r\n                const message = response.data['message'];\r\n                if (message === 'success') {\r\n                    this.setState({ message: '' });\r\n                    console.log(response);\r\n                    this.props.loginFunc(response.data['token'], this.state.username, response.data['privilege']);\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: message });\r\n                }\r\n            });\r\n        //this.props.loginFunc('token', \"Administrator\", Privilege.ADMIN);\r\n    }\r\n\r\n    // Set the username\r\n    updateUsername(event) {\r\n        this.setState({ username: event.target.value })\r\n    }\r\n\r\n    // Set the password\r\n    updatePassword(event) {\r\n        this.setState({ password: event.target.value })\r\n    }\r\n\r\n    // Close snackbar\r\n    closeShowStatus() {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    // Fired when key is pressed, login on enter\r\n    onKeyPressed(event) {\r\n        if (event.key === 'Enter') {\r\n            // Intercept key event\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n\r\n            // Login\r\n            this.submitCredentials();\r\n        }\r\n    }\r\n\r\n    // Get Duke info from colab API\r\n    getDukeCredentials = (token) => {\r\n        axios.get('https://api.colab.duke.edu/identity/v1/', {\r\n            headers: {\r\n                'x-api-key': Constants.CLIENT_ID,\r\n                'Authorization': `Bearer ${token}`\r\n            }\r\n        }).then(response => {\r\n            axios.post(\r\n                getURL(loginMainPath, 'oauth'), {\r\n                    \"username\": response.data.netid,\r\n                    \"email\": response.data.mail,\r\n                    \"display_name\": response.data.displayName,\r\n                    \"client_id\": Constants.CLIENT_ID,\r\n                    \"token\": token,\r\n                }).then(response => {\r\n                    const message = response.data['message'];\r\n                    if (response.status === Constants.HTTPS_STATUS_OK) {\r\n                        this.setState({\r\n                            username: '',\r\n                            password: '',\r\n\r\n                            statusMessage: '',\r\n                            showStatus: false,\r\n                            statusSeverity:' info',\r\n\r\n                            initialized: false,\r\n\r\n                            oauth:false,\r\n                         });\r\n\r\n                        this.props.loginFuncOAuth(response.data['token'], response.data.username, response.data['privilege']);\r\n                    } else {\r\n                        this.setState({ showStatus: true, statusMessage: message });\r\n                    }\r\n            });\r\n        });\r\n    }\r\n\r\n    // Redirect to shibboleth login\r\n    loginWithOAuth = () => {\r\n        window.location = Constants.SHIBBOLETH_LOGIN;\r\n    }\r\n\r\n    // Render view\r\n    render() {\r\n        return (\r\n            <div>\r\n                { (this.state.oauth) ? <ShibLogin /> :\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    onKeyDown={(e) => this.onKeyPressed(e)}\r\n                    style={{\r\n                        \"minHeight\": \"102vh\",\r\n                        \"background\": \"#56ab2f\",\r\n                        \"background\": \"-webkit-linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                        \"background\": \"linear-gradient(to top, #a8e063, #56ab2f)\",\r\n                    }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <img src={logo} style={{ height: \"200px\", \"marginTop\": \"50px\" }} alt=\"Hyposoft\" />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Card style={{ minWidth: '20vw' }}>\r\n                            <CardContent>\r\n                                <Grid\r\n                                    container\r\n                                    spacing={1}\r\n                                    direction=\"column\"\r\n                                    justify=\"center\"\r\n                                    alignItems=\"center\"\r\n                                >\r\n                                    <Grid container item alignItems=\"flex-start\" xs={12}>\r\n                                        <Typography\r\n                                            variant=\"h4\"\r\n                                            color=\"textPrimary\"\r\n                                            fontWeight=\"fontWeightBold\"\r\n                                            gutterBottom\r\n                                        >\r\n                                            Login\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"username-input\"\r\n                                            label=\"Username\"\r\n                                            variant=\"outlined\"\r\n                                            required={true}\r\n                                            ref='username'\r\n                                            onChange={this.updateUsername.bind(this)}\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <TextField\r\n                                            id=\"password-input\"\r\n                                            label=\"Password\"\r\n                                            variant=\"outlined\"\r\n                                            required={true}\r\n                                            ref='password'\r\n                                            type=\"password\"\r\n                                            onChange={this.updatePassword.bind(this)}\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button\r\n                                            onClick={this.submitCredentials}\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            style={{minWidth: \"15vw\"}}\r\n                                        >\r\n                                            Sign In\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                            <hr style={{width: \"5vw\"}} />\r\n                                            <Typography color=\"textSecondary\">\r\n                                                Or\r\n                                            </Typography>\r\n                                            <hr style={{width: \"5vw\"}} />\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button\r\n                                            onClick={this.loginWithOAuth}\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                        >\r\n                                            Sign In with NetID\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <StatusDisplay\r\n                            open={this.state.showStatus}\r\n                            severity={this.state.statusSeverity}\r\n                            closeStatus={this.closeShowStatus}\r\n                            message={this.state.statusMessage}\r\n                        />\r\n                    </Grid>\r\n                </Grid>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\n\nexport default class ExportModel extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div>\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\n                <Grid\n                    container\n                    spacing={2}\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                    style={{ padding: \"10px\" }}\n                >\n                    <Grid item xs={12}>\n                        <Typography variant=\"h6\">Export</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Typography>Download what is currently shown in the table.</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.props.downloadTable}\n                            variant=\"contained\"\n                            color=\"primary\"\n                            startIcon={<CloudDownloadIcon />}\n                            style={{\n                                width: \"100%\"\n                            }}\n                        >\n                            Export\n                        </Button>\n                    </Grid>\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\n                        <hr style={{width: \"5vw\"}} />\n                        <Typography color=\"textSecondary\">\n                            Or\n                        </Typography>\n                        <hr style={{width: \"5vw\"}} />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.props.showAll}\n                            variant=\"contained\"\n                            color=\"default\"\n                            style={{\n                                width: \"100%\"\n                            }}\n                        >\n                            Show all models\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            </div>\n        );\n    }\n}\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nfunction createInputs(name, label) {\r\n    return {label, name};\r\n}\r\n\r\nconst inputs = {\r\n    \"vendor\": createInputs('vendor', \"Vendor\"),\r\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\r\n    \"height\": createInputs('height', \"Height\"),\r\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\r\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\r\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\r\n    \"cpu\": createInputs('cpu', \"CPU\"),\r\n    \"memory\": createInputs('memory', \"Memory\"),\r\n    \"storage\": createInputs('storage', \"Storage\"),\r\n    \"comments\": createInputs('comments', \"Comments\"),\r\n}\r\n\r\nexport default class FilterModel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            filters: {},\r\n        };\r\n    }\r\n\r\n    updateSearchText(event) {\r\n        if (this.state.filters.hasOwnProperty(event.target.id)) {\r\n            const newFilters = this.state.filters;\r\n            newFilters[event.target.id] = event.target.value;\r\n            this.setState({ filters: newFilters });\r\n            this.forceUpdate();\r\n        } else {\r\n            const newFilters = this.state.filters;\r\n            newFilters[event.target.id] = event.target.value;\r\n            this.setState({ filters: newFilters });\r\n            this.forceUpdate();\r\n        }\r\n    }\r\n\r\n    search() {\r\n        this.props.search(this.state.filters);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{ padding: \"10px\" }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\">Search</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <Autocomplete\r\n                            id=\"vendor\"\r\n                            options={this.props.options}\r\n                            includeInputInList\r\n                            freeSolo\r\n                            renderInput={params => (\r\n                            <TextField {...params} label={inputs.vendor.label} name={inputs.vendor.name} onChange={this.updateSearchText.bind(this)} onBlur={this.updateSearchText.bind(this)} variant=\"outlined\" fullWidth />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"model_number\" variant=\"outlined\" label=\"Model Number\" name=\"model_number\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_height\" type=\"number\" variant=\"outlined\" label=\"Min Height\" name=\"min_height\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 1, max: 42} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_height\" type=\"number\" variant=\"outlined\" label=\"Max Height\" name=\"max_height\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 1, max: 42} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_ethernet_ports\" type=\"number\" variant=\"outlined\" label=\"Min Network Ports\" name=\"min_ethernet_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_ethernet_ports\" type=\"number\" variant=\"outlined\" label=\"Max Network Ports\" name=\"max_ethernet_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_power_ports\" type=\"number\" variant=\"outlined\" label=\"Min Power Ports\" name=\"min_power_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_power_ports\" type=\"number\" variant=\"outlined\" label=\"Max Power Ports\" name=\"max_power_ports\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"cpu\" variant=\"outlined\" label=\"CPU\" name=\"cpu\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"min_memory\" type=\"number\" variant=\"outlined\" label=\"Min Memory\" name=\"min_memory\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"max_memory\" type=\"number\" variant=\"outlined\" label=\"Max Memory\" name=\"max_memory\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}} InputProps={{ inputProps: { min: 0} }}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"storage\" variant=\"outlined\" label=\"Storage\" name=\"storage\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <TextField id=\"comment\" variant=\"outlined\" label=\"Comment\" name=\"comment\" onChange={this.updateSearchText.bind(this)} style={{width: \"100%\"}}/>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            onClick={this.search.bind(this)}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{\r\n                                width: \"100%\"\r\n                            }}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { TextField, Button, Typography, Paper, Grid, Modal, Backdrop, Fade, List, ListItem, ListItemText, ListSubheader } from \"@material-ui/core\";\r\nimport { InputLabel, Select, MenuItem } from \"@material-ui/core\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n\r\nimport { CompactPicker } from 'react-color';\r\nimport '../stylesheets/ModelStyles.css';\r\n\r\nfunction createInputs(name, label) {\r\n    return {label, name};\r\n}\r\n\r\nconst inputs = {\r\n    \"vendor\": createInputs('vendor', \"Vendor\"),\r\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\r\n    \"height\": createInputs('height', \"Height\"),\r\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\r\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\r\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\r\n    \"cpu\": createInputs('cpu', \"CPU\"),\r\n    \"memory\": createInputs('memory', \"Memory\"),\r\n    \"storage\": createInputs('storage', \"Storage\"),\r\n    \"comment\": createInputs('comment', \"Comment\"),\r\n    \"mount_type\": createInputs('mount_type', \"Mount Type\"),\r\n}\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: \"100%\",\r\n      },\r\n      grid: {\r\n          backgroundColor: theme.palette.background.paper,\r\n          boxShadow: theme.shadows[5],\r\n          padding: theme.spacing(2, 4, 3),\r\n          width: \"50%\"\r\n      },\r\n      progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n      },\r\n});\r\n\r\nconst defaultColor = \"#B0BC00\";\r\n\r\nclass CreateModel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            color: defaultColor,\r\n            showModal: false,\r\n            showImportModal: false,\r\n            importedFile: null,\r\n            networkPorts: [],\r\n            numPorts: 0,\r\n            mountType: \"rackmount\",\r\n        };\r\n    }\r\n\r\n    updateColor = (color) => {\r\n        this.setState({ color: color });\r\n        this.props.updateModelColor(color.hex);\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    showImportModal = () => {\r\n        this.setState({ showImportModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({ showModal: false, networkPorts: [], numPorts: 0, mountType: \"rackmount\" });\r\n    }\r\n\r\n    closeImportModal = () => {\r\n        this.setState({ showImportModal: false });\r\n    }\r\n\r\n    onSuccess = (success) => {\r\n        if (success) {\r\n            this.closeModal();\r\n            this.setState({ mountType: \"rackmount\" });\r\n            this.updateColor(defaultColor);\r\n        }\r\n    }\r\n\r\n    create = (event) => {\r\n        event.preventDefault();\r\n        var color = (this.state.color.hex === undefined ? this.state.color : this.state.color.hex);\r\n        this.props.createModel(this.state.networkPorts, this.state.mountType, color, this.onSuccess);\r\n    }\r\n\r\n    uploadFile = () => {\r\n        const data = new FormData();\r\n        data.append('file', this.state.importedFile);\r\n        this.props.sendUploadedFile(data);\r\n    }\r\n\r\n    chooseFile = (event) => {\r\n        this.setState({ importedFile: event.target.files[0] })\r\n    }\r\n\r\n    updateNetworkPorts = (event) => {\r\n        const numPorts = event.target.value === '' ? 0 : event.target.value;\r\n\r\n        var ports = [];\r\n        for (var i = 1; i <= numPorts; i++) {\r\n            ports.push(i.toString());\r\n        }\r\n\r\n        this.setState({ networkPorts: ports, numPorts: numPorts });\r\n        this.props.updateModelCreator(event);\r\n    }\r\n\r\n    updatePort = (port, event) => {\r\n        const ports = this.state.networkPorts;\r\n        ports[port] = event.target.value;\r\n\r\n        this.setState({ networkPorts: ports });\r\n    }\r\n\r\n    updateMountType = (event) => {\r\n        this.setState({ mountType: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n        <div>\r\n            <Paper style={{ minHeight: this.props.height }} elevation={3}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{ padding: \"10px\" }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h5\"\r\n                        >\r\n                            Add\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography>Create a new model.</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            style={{\r\n                                width: \"100%\",\r\n                                background: \"green\",\r\n                                color: \"white\"\r\n                            }}\r\n                            onClick={this.showModal}\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                        <hr style={{width: \"5vw\"}} />\r\n                        <Typography color=\"textSecondary\">\r\n                            Or\r\n                        </Typography>\r\n                        <hr style={{width: \"5vw\"}} />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            style={{width: \"100%\"}}\r\n                            startIcon={<CloudUploadIcon />}\r\n                            onClick={() => {this.showImportModal()} }\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.showModal}\r\n                onClose={this.closeModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.showModal}>\r\n                    <Backdrop\r\n                        open={this.state.showModal}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                            <form\r\n                                onSubmit={(event) => this.create(event)}\r\n                            >\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"h5\">New Model</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                                <Autocomplete\r\n                                    id=\"select-vendor\"\r\n                                    options={this.props.options}\r\n                                    includeInputInList\r\n                                    freeSolo\r\n                                    renderInput={params => (\r\n                                        <TextField {...params} required={true} label={inputs.vendor.label} name={inputs.vendor.name} onChange={this.props.updateModelCreator} onBlur={this.props.updateModelCreator} variant=\"outlined\" fullWidth />\r\n                                    )}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                                <TextField id=\"standard-basic\" required={true} variant=\"outlined\" label={inputs.modelNumber.label} name={inputs.modelNumber.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <InputLabel id=\"select-mount-type-label\">Mount Type</InputLabel>\r\n                                <Select\r\n                                    labelId=\"select-mount-type-label\"\r\n                                    id=\"select-mount-type\"\r\n                                    value={this.state.mountType}\r\n                                    required={true}\r\n                                    onChange={this.updateMountType}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    <MenuItem value=\"rackmount\">Rack Mounted</MenuItem>\r\n                                    <MenuItem value=\"chassis\">Blade Chassis</MenuItem>\r\n                                    <MenuItem value=\"blade\">Blade</MenuItem>\r\n                                </Select>\r\n                            </Grid>\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" required={true} variant=\"outlined\" label={inputs.height.label} name={inputs.height.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 1, max: 42} }} style={{ width: \"100%\" }} />\r\n                            </Grid>\r\n                            : null }\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.ethernetPorts.label} name={inputs.ethernetPorts.name} onChange={this.updateNetworkPorts} InputProps={{ inputProps: { min: 0} }} />\r\n                            </Grid>\r\n                            : null }\r\n                            { this.state.mountType !== \"blade\" ?\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.powerPorts.label} name={inputs.powerPorts.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 0} }}/>\r\n                            </Grid> : null }\r\n                            <Grid item xs={3}>\r\n                                <TextField id=\"standard-basic\" variant=\"outlined\" label={inputs.cpu.label} name={inputs.cpu.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <TextField type=\"number\" id=\"standard-basic\" variant=\"outlined\" label={inputs.memory.label} name={inputs.memory.name} onChange={this.props.updateModelCreator} InputProps={{ inputProps: { min: 0} }} style={{ width: \"100%\" }}/>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <TextField id=\"standard-basic\" variant=\"outlined\" label={inputs.storage.label} name={inputs.storage.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <TextField rowsMax={3} multiline={true} style={{ width: \"100%\" }} id=\"standard-basic\" variant=\"outlined\" label={inputs.comment.label} name={inputs.comment.name} onChange={this.props.updateModelCreator}/>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={6}>\r\n                                <Typography>Display Color</Typography>\r\n                                <CompactPicker\r\n                                    color={this.state.color}\r\n                                    onChange={this.updateColor}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                            { this.state.mountType !== \"blade\" ?\r\n                                <List\r\n                                    className={classes.root}\r\n                                    subheader={\r\n                                        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                                        Network Ports\r\n                                        </ListSubheader>\r\n                                    }\r\n                                    style={{\r\n                                        maxHeight: \"30vh\",\r\n                                        overflow: \"auto\"\r\n                                    }}\r\n                                >\r\n                                {Array.from({length: this.state.numPorts}, (x,i) => i).map((_, index) => {\r\n                                    const labelId = `list-label-${this.state.networkPorts[index]}`;\r\n\r\n                                    return (\r\n                                    <ListItem key={index} role={undefined} dense button>\r\n                                        <ListItemText id={labelId} primary={\"Port \" + (index+1).toString()} />\r\n                                        <TextField defaultValue={this.state.networkPorts[index]} onChange={(e) => this.updatePort(index, e)} />\r\n                                    </ListItem>\r\n                                    );\r\n                                })}\r\n                                {this.state.numPorts === 0 ? <ListItem key=\"add-items\" role={undefined} dense>\r\n                                <ListItemText id=\"add-items-label\" primary=\"Enter the number of network ports above\" />\r\n                                </ListItem> : null}\r\n                                </List> : null }\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    type=\"submit\"\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Create\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={this.closeModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </form>\r\n                </div>\r\n                </Backdrop>\r\n\r\n                </Fade>\r\n            </Modal>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.showImportModal}\r\n                onClose={this.closeImportModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.showImportModal}>\r\n                    <Backdrop\r\n                        open={this.state.showImportModal}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={9}>\r\n                                <Typography variant=\"h5\">Import Models</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    onClick={this.closeImportModal}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item direction=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype='file'\r\n                                    accept=\".csv\"\r\n                                    name=\"models_upload\"\r\n\t\t\t\t\t\t\t\t\tonChange={(event) => this.chooseFile(event)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n\t\t\t\t\t\t\t\t\tstyle={{width: \"40%\"}}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {this.uploadFile()}}\r\n                                >\r\n                                    Upload File\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(CreateModel);\r\n","\r\n\r\n\r\nexport const GENERAL_MODEL_ERROR =  \"There was an error in the backend. Could not perform the given model operation at this time.\";\r\n","import React from 'react';\nimport { CompactPicker } from 'react-color';\nimport axios from 'axios';\n\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Paper, Popover, Typography, Modal, Backdrop, Fade } from '@material-ui/core';\nimport { TextField, Button, Grid, InputLabel, Select, MenuItem, CircularProgress } from \"@material-ui/core\";\nimport { List, ListItem, ListItemText, ListSubheader } from '@material-ui/core';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport ViewListIcon from '@material-ui/icons/ViewList';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport { ModelCommand } from '../enums/ModelCommands.ts'\nimport getURL from '../../helpers/functions/GetURL';\nimport * as ModelConstants from \"../ModelConstants\";\n\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    modal: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: \"100%\",\n            margin:\"0 auto\",\n            overflow: \"scroll\"\n        },\n        grid: {\n                backgroundColor: theme.palette.background.paper,\n                boxShadow: theme.shadows[5],\n                padding: theme.spacing(2, 4, 3),\n                width: \"50%\"\n        },\n        progress: {\n            display: 'flex',\n            '& > * + *': {\n                marginLeft: theme.spacing(2),\n            },\n        },\n});\n\nconst modelsMainPath = 'models/';\n\nfunction createInputs(name, label) {\n        return {label, name};\n}\n\nconst inputs = {\n    \"vendor\": createInputs('vendor', \"Vendor\", ),\n    \"modelNumber\": createInputs('model_number', \"Model Number\"),\n    \"mount_type\": createInputs('mount_type', 'Mount Type'),\n    \"height\": createInputs('height', \"Height\"),\n    \"displayColor\": createInputs('display_color', \"Display Color\"),\n    \"ethernetPorts\": createInputs('ethernet_ports', \"Network Ports\"),\n    \"powerPorts\": createInputs('power_ports', \"Power Ports\"),\n    \"cpu\": createInputs('cpu', \"CPU\"),\n    \"memory\": createInputs('memory', \"Memory\"),\n    \"storage\": createInputs('storage', \"Storage\"),\n    \"comment\": createInputs('comment', \"Comment\"),\n};\n\nconst mountTypeLookup = {\n    \"rackmount\": \"Rack Mounted\",\n    \"chassis\": \"Blade Chassis\",\n    \"blade\": \"Blade\",\n};\n\nclass ModelsTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n                popoverAnchor: null,\n                commentPopover: null,\n\n                networkPorts: [],\n                numPorts: 0,\n\n                showDetailedView: false,\n                showDeleteModal: false,\n\n                row: null,\n                comment: \"\",\n                color: '#000',\n\n                detailViewLoading: false,\n\n                detailedValues : {\n                    'vendor': '',\n                    'model_number': '',\n                    'mount_type': '',\n                    'height': '',\n                    'display_color': '',\n                    'ethernet_ports': [],\n                    'power_ports': '',\n                    'cpu': '',\n                    'memory': '',\n                    'storage': '',\n                    'comment': '',\n                },\n\n                originalVendor: '',\n                originalModelNumber: '',\n                originalHeight: '',\n\n                mountType: null,\n        };\n\n        axios.defaults.headers.common['token'] = this.props.token;\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\n    }\n\n    updateColor = (color) => {\n        var oldDetails = this.state.detailedValues;\n        oldDetails.display_color = color.hex;\n        this.setState({ color: color, detailedValues: oldDetails });\n        this.props.updateModelColor(color.hex);\n    }\n\n    // Show the detail view of a model to edit\n    showDetailedView = (row) => {\n        this.setState({\n            row: row,\n            showDetailedView: true,\n            detailViewLoading: true,\n            color: row[\"Display Color\"] === null ? \"#000000\" : row[\"Display Color\"],\n            networkPorts: row[\"Network Ports\"] === null ? [] : row[\"Network Ports\"],\n            numPorts: row[\"Network Ports\"] === null ? 0 : row[\"Network Ports\"].length,\n            mountType: row[\"Mount Type\"],\n        });\n\n        this.detailViewModel(row[\"Vendor\"], row[\"Model Number\"]);\n    }\n\n    // Get the details of a model\n    detailViewModel = (vendor, modelNum) => {\n        axios.post(\n            getURL(modelsMainPath, ModelCommand.detailView), {\n                'vendor': vendor,\n                'model_number': modelNum,\n            }).then(response => {\n                    const model = response.data['models'][0];\n                    this.setState({\n                        detailedValues: model,\n                        detailViewLoading: false,\n                        originalVendor: model[\"vendor\"],\n                        originalModelNumber: model[\"model_number\"],\n                        originalHeight: model[\"height\"]\n                    });\n            }).catch(function(error) {\n                this.setState({\n                    showStatus: true,\n                    statusMessage: ModelConstants.GENERAL_MODEL_ERROR,\n                    statusSeverity: \"error\"\n                });\n            });\n    }\n\n    // Close the detail view of a model\n    closeDetailedView = () => {\n        this.setState({ showDetailedView: false, row: null, color: \"#000000\", originalVendor: \"\", originalModelNumber: \"\", originalHeight: \"\" });\n    }\n\n    // Show delete model confirmation\n    showDeleteModal = (row) => {\n        this.setState({ showDeleteModal: true, originalVendor: row[\"Vendor\"], originalModelNumber: row[\"Model Number\"] });\n    }\n\n    // Close delete model confirmation\n    closeDeleteModal = () => {\n        this.setState({ showDeleteModal: false, originalVendor: \"\", originalModelNumber: \"\", originalHeight: \"\" });\n    }\n\n    // Delete a model\n    delete = () => {\n        this.props.deleteModel(this.state.originalVendor, this.state.originalModelNumber);\n        this.closeDeleteModal();\n    }\n\n    onEditSuccess = (success) => {\n        if (success) {\n            this.closeDetailedView();\n        }\n    }\n\n    edit = (event) => {\n        event.preventDefault();\n        this.props.editModel(this.state.originalVendor, this.state.originalModelNumber, this.state.originalHeight, this.state.detailedValues, this.state.networkPorts, this.onEditSuccess);\n    }\n\n    clickInfo = (event, ports) => {\n        this.setState({ popoverAnchor: event.target, networkPorts: ports });\n    }\n\n    clickComment = (event, comment) => {\n        this.setState({ commentPopover: event.target, comment: comment });\n    }\n\n    handlePopoverClose = () => {\n        this.setState({ popoverAnchor: null });\n    }\n\n    handleCommentPopoverClose = () => {\n        this.setState({ commentPopover: null });\n    }\n\n    updateNetworkPorts = (event) => {\n        const numPorts = event.target.value === '' ? 0 : event.target.value;\n\n        var ports = [];\n        for (var i = 1; i <= numPorts; i++) {\n                ports.push(i.toString());\n        }\n\n        this.setState({ networkPorts: ports, numPorts: numPorts });\n        this.updateModelEdited(event);\n    }\n\n    updatePort = (port, event) => {\n        const ports = this.state.networkPorts;\n        ports[port] = event.target.value;\n\n        this.setState({ networkPorts: ports });\n    }\n\n    save = () => {\n        this.props.editModel(this.state.originalVendor, this.state.originalModelNumber, this.state.originalHeight, this.state.detailedValues, this.state.networkPorts);\n        this.closeDetailedView();\n    }\n\n    updateModelEdited = (event) => {\n        this.state.detailedValues[event.target.name] = event.target.value;\n        this.forceUpdate();\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <TableContainer component={Paper}>\n                    <Table style={{ minWidth: 1000 }} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                {this.props.columns.map(col => (\n                                    <TableCell align=\"center\">\n                                        <span id={col} style={{ fontWeight: \"bold\" }}>\n                                            {col}\n                                        </span>\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.props.vals.map((row, index) => (\n                                <TableRow id={index} hover={true}>\n                                    {this.props.privilege.admin || this.props.privilege.model ? (\n                                        <TableCell scope=\"row\" align=\"center\">\n                                            <Button\n                                                startIcon={<EditIcon />}\n                                                onClick={() => this.showDetailedView(row)}\n                                            />\n                                            <Button\n                                                startIcon={<DeleteIcon />}\n                                                onClick={() => this.showDeleteModal(row)}\n                                            />\n                                        </TableCell>\n                                    ) : null}\n                                    {this.props.keys.map(key => {\n                                        if (key === \"Display Color\") {\n                                            return (\n                                                <TableCell\n                                                    scope=\"row\"\n                                                    align=\"center\"\n                                                    style={{\n                                                        backgroundColor: row[key]\n                                                    }}\n                                                ></TableCell>\n                                            );\n                                        }\n\n                                        if (key === \"Network Ports\") {\n                                            return (\n                                                <TableCell scope=\"row\" align=\"center\">\n                                                    {row[key] === null ? \"\" : row[key].length}\n                                                    {row[key] == null ? null : (\n                                                        <Button style={{ margin: \"5px\" }}>\n                                                            <ViewListIcon\n                                                                onClick={e => {\n                                                                    this.clickInfo(e, row[key]);\n                                                                }}\n                                                            />\n                                                        </Button>\n                                                    )}\n                                                </TableCell>\n                                            );\n                                        }\n\n                                        if (key == \"Comment\") {\n                                            return row[\"Comment\"] !== null && row[\"Comment\"].length > 0 ? (\n                                                <TableCell scope=\"row\" align=\"center\">\n                                                    <Button\n                                                        startIcon={<CommentIcon />}\n                                                        onClick={e => this.clickComment(e, row[\"Comment\"])}\n                                                    />\n                                                </TableCell>\n                                            ) : (\n                                                <TableCell scope=\"row\" align=\"center\"></TableCell>\n                                            );\n                                        }\n\n                                        if (key == \"Mount Type\") {\n                                            return (\n                                            <TableCell scope=\"row\" align=\"center\">\n                                                {mountTypeLookup[row[key]]}\n                                            </TableCell>\n                                        );\n                                        }\n\n                                        return (\n                                            <TableCell scope=\"row\" align=\"center\">\n                                                {row[key]}\n                                            </TableCell>\n                                        );\n                                    })}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <Popover\n                    id={Boolean(this.state.popoverAnchor) ? \"simple-popover\" : undefined}\n                    open={Boolean(this.state.popoverAnchor)}\n                    anchorEl={this.state.popoverAnchor}\n                    onClose={this.handlePopoverClose}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\"\n                    }}\n                    transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"center\"\n                    }}\n                >\n                    <List\n                        className={classes.root}\n                        subheader={\n                            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                                Network Ports\n                            </ListSubheader>\n                        }\n                    >\n                        {this.state.networkPorts.map(value => {\n                            const labelId = `checkbox-list-label-${value}`;\n\n                            return (\n                                <ListItem key={value} role={undefined} dense button>\n                                    <ListItemText id={labelId} primary={value} />\n                                </ListItem>\n                            );\n                        })}\n                    </List>\n                </Popover>\n                <Popover\n                    id={Boolean(this.state.commentPopover) ? \"simple-popover\" : undefined}\n                    open={Boolean(this.state.commentPopover)}\n                    anchorEl={this.state.commentPopover}\n                    onClose={this.handleCommentPopoverClose}\n                    anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"center\"\n                    }}\n                    transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"center\"\n                    }}\n                >\n                    <Typography\n                        variant=\"body1\"\n                        style={{\n                            padding: \"30px\"\n                        }}\n                    >\n                        {this.state.comment}\n                    </Typography>\n                </Popover>\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={this.state.showDetailedView}\n                    onClose={this.closeDetailedView}\n                    closeAfterTransition\n                >\n                    <Fade in={this.state.showDetailedView}>\n                        <Backdrop open={this.state.showDetailedView}>\n                            <div className={classes.grid}>\n                                {this.state.detailViewLoading ? (\n                                    <CircularProgress />\n                                ) : (\n                                    <form\n                                        onSubmit={(event) => this.edit(event)}\n                                    >\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={12}>\n                                            <Typography variant=\"h5\">Model Details</Typography>\n                                        </Grid>\n                                        <Grid item xs={12} sm={12} md={6} lg={6}>\n                                            <Autocomplete\n                                                id=\"select-vendor\"\n                                                options={this.props.options}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.vendor\n                                                }\n                                                includeInputInList\n                                                freeSolo\n                                                renderInput={params => (\n                                                    <TextField\n                                                        {...params}\n                                                        label={inputs.vendor.label}\n                                                        required={true}\n                                                        name={inputs.vendor.name}\n                                                        onChange={this.updateModelEdited}\n                                                        onBlur={this.updateModelEdited}\n                                                        variant=\"outlined\"\n                                                        fullWidth\n                                                    />\n                                                )}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={12} sm={6} md={4} lg={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.modelNumber.label}\n                                                name={inputs.modelNumber.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.model_number\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <InputLabel id=\"select-mount-type-label\">Mount Type</InputLabel>\n                                            <Select\n                                                labelId=\"select-mount-type-label\"\n                                                id=\"select-mount-type\"\n                                                name={inputs.mount_type.name}\n                                                value={this.state.mountType}\n                                                required={true}\n                                                onChange={this.updateModelEdited}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                <MenuItem value=\"rackmount\">Rack Mounted</MenuItem>\n                                                <MenuItem value=\"chassis\">Blade Chassis</MenuItem>\n                                                <MenuItem value=\"blade\">Blade</MenuItem>\n                                            </Select>\n                                        </Grid>\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.height.label}\n                                                name={inputs.height.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.height\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 1, max: 42 } }}\n                                                style={{ width: \"100%\" }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.ethernetPorts.label}\n                                                name={inputs.ethernetPorts.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.ethernet_ports == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.ethernet_ports.length\n                                                }\n                                                onChange={this.updateNetworkPorts}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.powerPorts.label}\n                                                name={inputs.powerPorts.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.power_ports\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                            />\n                                        </Grid>\n                                        : null }\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.cpu.label}\n                                                name={inputs.cpu.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.cpu\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                type=\"number\"\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.memory.label}\n                                                name={inputs.memory.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.memory\n                                                }\n                                                onChange={this.updateModelEdited}\n                                                InputProps={{ inputProps: { min: 0 } }}\n                                                style={{ width: \"100%\" }}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <TextField\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.storage.label}\n                                                name={inputs.storage.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.storage\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <TextField\n                                                rowsMax={3}\n                                                multiline={true}\n                                                style={{ width: \"100%\" }}\n                                                id=\"standard-basic\"\n                                                variant=\"outlined\"\n                                                label={inputs.comment.label}\n                                                name={inputs.comment.name}\n                                                defaultValue={\n                                                    this.state.detailedValues == null\n                                                        ? \"\"\n                                                        : this.state.detailedValues.comment\n                                                }\n                                                onChange={this.updateModelEdited}\n                                            />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>Display Color</Typography>\n                                            <CompactPicker\n                                                color={this.state.color}\n                                                onChange={this.updateColor}\n                                            />\n                                        </Grid>\n                                        { this.state.mountType !== \"blade\" ?\n                                        <Grid item xs={12}>\n                                            <List\n                                                className={classes.root}\n                                                subheader={\n                                                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                                                        Network Ports\n                                                    </ListSubheader>\n                                                }\n                                                style={{\n                                                    maxHeight: \"30vh\",\n                                                    overflow: \"auto\"\n                                                }}\n                                            >\n                                                {Array.from({ length: this.state.numPorts }, (x, i) => i).map(\n                                                    (_, index) => {\n                                                        const labelId = `list-label-${this.state.networkPorts[index]}`;\n\n                                                        return (\n                                                            <ListItem key={index} role={undefined} dense button>\n                                                                <ListItemText\n                                                                    id={labelId}\n                                                                    primary={\"Port \" + (index + 1).toString()}\n                                                                />\n                                                                <TextField\n                                                                    defaultValue={this.state.networkPorts[index]}\n                                                                    onChange={e => this.updatePort(index, e)}\n                                                                />\n                                                            </ListItem>\n                                                        );\n                                                    }\n                                                )}\n                                                {this.state.numPorts === 0 ? (\n                                                    <ListItem key=\"add-items\" role={undefined} dense>\n                                                        <ListItemText\n                                                            id=\"add-items-label\"\n                                                            primary=\"Enter the number of network ports above\"\n                                                        />\n                                                    </ListItem>\n                                                ) : null}\n                                            </List>\n                                        </Grid>\n                                        : null }\n                                        <Grid item xs={3}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                type=\"submit\"\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Save\n                                            </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeDetailedView}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                    </form>\n                                )}\n                            </div>\n                        </Backdrop>\n                    </Fade>\n                </Modal>\n\n                <Modal\n                    aria-labelledby=\"transition-modal-title\"\n                    aria-describedby=\"transition-modal-description\"\n                    className={classes.modal}\n                    open={this.state.showDeleteModal}\n                    onClose={this.closeDeleteModal}\n                    closeAfterTransition\n                >\n                    <Fade in={this.state.showDeleteModal}>\n                        <Backdrop open={this.state.showDeleteModal}>\n                            <div className={classes.grid}>\n                                <Grid\n                                    container\n                                    spacing={1}\n                                    direction=\"row\"\n                                    justify=\"flex-start\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={12}>\n                                        <Typography variant=\"h5\">Are you sure?</Typography>\n                                    </Grid>\n                                    <Grid item xs={12} sm={12} md={6} lg={6}>\n                                        <Typography variant=\"body1\">\n                                            Doing this will remove the model permanently.\n                                        </Typography>\n                                    </Grid>\n\n                                    <Grid item xs={3}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={this.delete}\n                                            style={{ width: \"100%\" }}\n                                        >\n                                            Yes\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={3}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={this.closeDeleteModal}\n                                            style={{ width: \"100%\" }}\n                                        >\n                                            No\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Backdrop>\n                    </Fade>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(ModelsTable);\n","export enum UserCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search='search/',\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nimport { ModelCommand } from '../enums/ModelCommands.ts'\r\nimport { ModelInput } from '../enums/ModelInputs.ts'\r\n\r\nimport ExportModel from '../helpers/ExportModel';\r\nimport FilterModel from '../helpers/FilterModel';\r\nimport CreateModel from '../helpers/CreateModel';\r\n\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport ModelsTable from '../helpers/ModelsTable';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport * as ModelConstants from \"../ModelConstants\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\";\r\n\r\nconst columns = [\r\n    'Vendor',\r\n    'Model Number',\r\n    'Mount Type',\r\n    'Height',\r\n    'Display Color',\r\n    'Network Ports',\r\n    'Power Ports',\r\n    'CPU',\r\n    'Memory',\r\n    'Storage',\r\n    'Comment',\r\n]\r\n\r\nconst adminColumns = [\r\n    'Actions',\r\n    'Vendor',\r\n    'Model Number',\r\n    'Mount Type',\r\n    'Height',\r\n    'Display Color',\r\n    'Network Ports',\r\n    'Power Ports',\r\n    'CPU',\r\n    'Memory',\r\n    'Storage',\r\n    'Comment',\r\n]\r\n\r\nconst columnLookup = {\r\n    \"vendor\": \"Vendor\",\r\n    \"model_number\": \"Model Number\",\r\n    'mount_type': \"Mount Type\",\r\n    \"height\": \"Height\",\r\n    'display_color': 'Display Color',\r\n    'ethernet_ports': 'Network Ports',\r\n    'power_ports': 'Power Ports',\r\n    'cpu': 'CPU',\r\n    'memory': 'Memory',\r\n    'storage': 'Storage',\r\n    'comment': \"Comment\"\r\n}\r\n\r\nconst modelsMainPath = 'models/';\r\nconst modelDownloadFileName = 'models.csv';\r\n\r\nexport default class ModelsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // modals\r\n            showCreateModal: false,\r\n            showImportModal: false,\r\n\r\n            // table items\r\n            items: [],\r\n            rows: [],\r\n\r\n            // vals for creating a new model\r\n            createdModel : {\r\n                'vendor': '',\r\n                'model_number': '',\r\n                'mount_type': '',\r\n                'height': '',\r\n                'display_color': '#A52A2A',\r\n                'ethernet_ports': '',\r\n                'power_ports': '',\r\n                'cpu': '',\r\n                'memory': '',\r\n                'storage': '',\r\n                'comment': '',\r\n            },\r\n            createdVendor: '',\r\n            createdModelNum: '',\r\n            createdMountType: '',\r\n            createdHeight: '',\r\n            createdDispClr: '',\r\n            createdEthPorts: '',\r\n            createdPwrPorts: '',\r\n            createdCPU: '',\r\n            createdMem: '',\r\n            createdStorage: '',\r\n            createdComments: '',\r\n\r\n            detailedValues : {\r\n                'vendor': '',\r\n                'model_number': '',\r\n                'mount_type': '',\r\n                'height': '',\r\n                'display_color': '',\r\n                'ethernet_ports': '',\r\n                'power_ports': '',\r\n                'cpu': '',\r\n                'memory': '',\r\n                'storage': '',\r\n                'comment': '',\r\n            },\r\n\r\n            // vals for deleting a model\r\n            deleteVendor:'',\r\n            deleteModel:'',\r\n\r\n            // vals for viewing a model\r\n            viewVendor:'',\r\n            viewModel:'',\r\n\r\n            // searching a model\r\n            searchText: \"\",\r\n            searchVendor: '',\r\n            searchModelNum: '',\r\n            searchMountType: '',\r\n            searchMinHeight: '',\r\n            searchMaxHeight: '',\r\n            searchMinNetworkPorts: '',\r\n            searchMaxNetworkPorts: '',\r\n            searchMinPower: '',\r\n            searchMaxPower: '',\r\n            searchCPU: '',\r\n            searchMinMem: '',\r\n            searchMaxMem: '',\r\n            searchStore: '',\r\n            searchComment: '',\r\n\r\n            // csv data\r\n            csvData: '',\r\n\r\n            showStatus: false,\r\n            statusSeverity: '',\r\n            statusMessage: '',\r\n            detailshowStatus: false,\r\n            detailStatusSeverity: '',\r\n            detailStatusMessage: '',\r\n            createshowStatus: false,\r\n            statusSeverity:' ',\r\n            statusMessage: '',\r\n\r\n            vendorsList: [],\r\n            madeVendorQuery: false,\r\n        };\r\n\r\n        axios.defaults.headers.common['token'] = this.props.token;\r\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchModels();\r\n        this.getVendorList();\r\n    }\r\n\r\n    createModel = (networkPorts, mountType, color, completion) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.create),\r\n            {\r\n                'vendor': this.state.createdModel[ModelInput.Vendor],\r\n                'model_number': this.state.createdModel[ModelInput.model_number],\r\n                'mount_type': mountType,\r\n                'height': this.state.createdModel[ModelInput.Height],\r\n                'display_color': color,\r\n                'ethernet_ports': this.state.createdModel[ModelInput.ethernet_ports],\r\n                'power_ports': this.state.createdModel[ModelInput.power_ports],\r\n                'cpu': this.state.createdModel[ModelInput.CPU],\r\n                'memory': this.state.createdModel[ModelInput.Memory],\r\n                'storage': this.state.createdModel[ModelInput.Storage],\r\n                'comment': this.state.createdModel[ModelInput.Comment],\r\n                'ethernet_ports': networkPorts,\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusMessage: \"Successfully created model\",\r\n                            statusSeverity: \"success\",\r\n                            createdModel : {\r\n                                'vendor': '',\r\n                                'model_number': '',\r\n                                'mount_type': '',\r\n                                'height': '',\r\n                                'display_color': '',\r\n                                'ethernet_ports': '',\r\n                                'power_ports': '',\r\n                                'cpu': '',\r\n                                'memory': '',\r\n                                'storage': '',\r\n                                'comment': '',\r\n                            },\r\n                            showCreateModal:false,\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n\r\n                        completion(true);\r\n                    } else {\r\n                        this.setState({ createshowStatus: true, showStatus:true, statusMessage: response.data.message, statusSeverity: \"error\" });\r\n\r\n                        completion(false);\r\n                    }\r\n                }).catch(\r\n                    this.setState({ createshowStatus: true, statusMessage: ModelConstants.GENERAL_MODEL_ERROR, statusSeverity: \"error\" })\r\n                );\r\n    }\r\n\r\n    editModel = (originalVendor, originalModelNum, originalHeight, detailedValues, networkPorts, completion) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.edit),\r\n            {\r\n                'vendorOriginal': originalVendor,\r\n                'model_numberOriginal': originalModelNum,\r\n                'heightOriginal': originalHeight,\r\n                'vendor': detailedValues[ModelInput.Vendor],\r\n                'model_number': detailedValues[ModelInput.model_number],\r\n                'mount_type': detailedValues[ModelInput.mount_type],\r\n                'height': detailedValues[ModelInput.Height],\r\n                'display_color': detailedValues[ModelInput.display_color],\r\n                'ethernet_ports': networkPorts,\r\n                'power_ports': detailedValues[ModelInput.power_ports],\r\n                'cpu': detailedValues[ModelInput.CPU],\r\n                'memory': detailedValues[ModelInput.Memory],\r\n                'storage': detailedValues[ModelInput.Storage],\r\n                'comment': detailedValues[ModelInput.Comment],\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusSeverity: 'success',\r\n                            statusMessage: \"Successfully edited model\",\r\n                            showDetailedView: false\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n\r\n                        completion(true);\r\n                    } else {\r\n                        this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" });\r\n\r\n                        completion(false);\r\n                    }\r\n                }).catch(\r\n                    //this.setState({ showStatus: true, statusMessage: ModelConstants.GENERAL_MODEL_ERROR, statusSeverity: \"error\" })\r\n                );\r\n    }\r\n\r\n    deleteModel = (originalVendor, originalModelNumber) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.delete),\r\n            {\r\n                'vendor': originalVendor,\r\n                'model_number': originalModelNumber,\r\n            }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === 'success') {\r\n                        this.setState({\r\n                            showStatus: true,\r\n                            statusSeverity:'success',\r\n                            statusMessage: \"Successfully deleted model\",\r\n                        });\r\n                        this.getVendorList();\r\n                        this.searchModels();\r\n                    } else {\r\n                        this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                    }\r\n                });\r\n    }\r\n\r\n    detailViewModel = (vendor, modelNum) => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.detailView),\r\n            {\r\n                'vendor': vendor,\r\n                'model_number': modelNum,\r\n            }\r\n            ).then(response => {\r\n                this.setState({ detailedValues: response.data['models'][0], detailViewLoading: false});\r\n            }\r\n            ).catch(function(error) {\r\n                this.setState({ showStatus: true, statusMessage: ModelConstants.GENERAL_MODEL_ERROR, statusSeverity:\"error\" });\r\n            });\r\n\r\n        this.setState({\r\n            viewVendor: '',\r\n            viewModel: '',\r\n        });\r\n    }\r\n\r\n    searchModels = () => {\r\n        const filter = {\r\n            \"vendor\": this.state.searchVendor,\r\n            \"model_number\": this.state.searchModelNum,\r\n            'mount_type': this.state.searchMountType,\r\n            \"min_height\": this.state.searchMinHeight,\r\n            \"max_height\": this.state.searchMaxHeight,\r\n            \"min_ethernet_ports\": this.state.searchMinNetworkPorts,\r\n            \"max_ethernet_ports\": this.state.searchMaxNetworkPorts,\r\n            \"min_power_ports\": this.state.searchMinPower,\r\n            \"max_power_ports\": this.state.searchMaxPower,\r\n            'cpu': this.state.searchCPU,\r\n            'min_memory': this.state.searchMinMem,\r\n            'max_memory': this.state.searchMaxMem,\r\n            'storage': this.state.searchStore,\r\n            'comment': this.state.searchComment,\r\n        };\r\n\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.search),\r\n            {\r\n                'filter': {\r\n                    'vendor': \"\",\r\n                    'model_number': \"\",\r\n                    'height': \"\"\r\n                }\r\n            }\r\n            ).then(response => {\r\n                const models = response.data['models'] === undefined ? [] : response.data['models'];\r\n                var rows = [];\r\n                Object.values(models).forEach(model => {\r\n                    var row = {};\r\n                    Object.keys(model).forEach(key => {\r\n                        if (key in columnLookup) {\r\n                            row[columnLookup[key]] = model[key];\r\n                        } else {\r\n                            row[key] = model[key];\r\n                        }\r\n                    });\r\n\r\n\r\n                    if (\r\n                        (filter[\"vendor\"] == undefined || filter[\"vendor\"] === \"\" || row[\"Vendor\"] === undefined || row[\"Vendor\"].includes(filter[\"vendor\"])) &&\r\n                        (filter[\"model_number\"] === undefined || filter[\"model_number\"] === \"\" || row[\"Model Number\"].includes(filter[\"model_number\"])) &&\r\n                        (filter[\"mount_type\"] === undefined || filter[\"mount_type\"] === \"\" || row[\"Mount Type\"] === filter[\"mount_type\"]) &&\r\n                        (filter[\"min_height\"] === undefined || filter[\"min_height\"] === \"\" ||  row[\"Height\"] >= parseInt(filter[\"min_height\"])) &&\r\n                        (filter[\"max_height\"] === undefined || filter[\"max_height\"] === \"\" ||  row[\"Height\"] <= parseInt(filter[\"max_height\"])) &&\r\n\r\n                        (filter[\"min_ethernet_ports\"] === undefined || filter[\"min_ethernet_ports\"] === \"\" ||  row[\"Network Ports\"].length >= parseInt(filter[\"min_ethernet_ports\"])) &&\r\n                        (filter[\"max_ethernet_ports\"] === undefined || filter[\"max_ethernet_ports\"] === \"\" ||  row[\"Network Ports\"].length <= parseInt(filter[\"max_ethernet_ports\"])) &&\r\n\r\n\r\n                        (filter[\"min_power_ports\"] === undefined || filter[\"min_power_ports\"] === \"\" ||  row[\"Power Ports\"] >= parseInt(filter[\"min_power_ports\"])) &&\r\n                        (filter[\"max_power_ports\"] === undefined || filter[\"max_power_ports\"] === \"\" ||  row[\"Power Ports\"] <= parseInt(filter[\"max_power_ports\"])) &&\r\n\r\n\r\n                        (filter[\"cpu\"] === undefined || filter[\"cpu\"] === \"\" || row[\"CPU\"] === null || row[\"CPU\"].includes(filter[\"cpu\"])) &&\r\n                        (filter[\"min_memory\"] === undefined || filter[\"min_memory\"] === \"\" ||  row[\"Memory\"] >= parseInt(filter[\"min_memory\"])) &&\r\n                        (filter[\"max_memory\"] === undefined || filter[\"max_memory\"] === \"\" ||  row[\"Memory\"] <= parseInt(filter[\"max_memory\"])) &&\r\n\r\n                        (filter[\"storage\"] === undefined || filter[\"storage\"] === \"\" || row[\"Storage\"] === null || row[\"Storage\"].includes(filter[\"storage\"])) &&\r\n                        (filter[\"comment\"] === undefined || filter[\"comment\"] === \"\" || row[\"Comment\"] === null || row[\"Comment\"].includes(filter[\"comment\"]))\r\n                    ) {\r\n                        rows.push(row);\r\n                    }\r\n\r\n                });\r\n\r\n                this.setState({ rows: rows, items: models })\r\n            });\r\n\r\n        this.setState({\r\n            searchText: '',\r\n        });\r\n    }\r\n\r\n    getVendorList = () => {\r\n        axios.get(\r\n            getURL(modelsMainPath, ModelCommand.VENDOR_VALUES), {}\r\n        ).then(response => this.setState({ vendorsList: response.data.results }));\r\n\r\n        this.setState({ madeVendorQuery: true });\r\n    }\r\n\r\n    sendUploadedFile = (data) => {\r\n        axios.post(\r\n            getURL(\"models/\", ModelCommand.UPLOAD_FILE), data\r\n        ).then(response => {\r\n                if (response.data.message === 'success') {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.summary, statusSeverity: 'success', showImportModal: false,})\r\n                    this.searchModels();\r\n                } else {\r\n                    this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\r\n                }\r\n            });\r\n    }\r\n\r\n    downloadTable = () => {\r\n        axios.post(\r\n            getURL(modelsMainPath, ModelCommand.EXPORT_FILE),\r\n            {\r\n                'filter': {\r\n                    'vendor': this.state.searchVendor,\r\n                    'model_number': this.state.searchModelNum,\r\n                    'height': this.state.searchHeight,\r\n                }\r\n            }\r\n        ).then(response => {\r\n            this.setState({ csvData: response.data.csvData });\r\n            this.csvLink.link.click();\r\n        });\r\n    }\r\n\r\n    search = (filters) => {\r\n        this.setState({\r\n            searchVendor: filters['vendor'],\r\n            searchModelNum: filters['model_number'],\r\n            searchMountType: filters['mount_type'],\r\n            searchMinHeight: filters['min_height'],\r\n            searchMaxHeight: filters['max_height'],\r\n            searchMinNetworkPorts: filters[\"min_ethernet_ports\"],\r\n            searchMaxNetworkPorts: filters[\"max_ethernet_ports\"],\r\n            searchMinPower: filters[\"min_power_ports\"],\r\n            searchMaxPower: filters[\"max_power_ports\"],\r\n            searchCPU: filters[\"cpu\"],\r\n            searchMinMem: filters[\"min_memory\"],\r\n            searchMaxMem: filters[\"max_memory\"],\r\n            searchStore: filters[\"storage\"],\r\n            searchComment: filters[\"comment\"],\r\n        }, this.searchModels);\r\n    }\r\n\r\n    searchAll = () => {\r\n        var filters = {\r\n            'vendor': '',\r\n            'model_number': '',\r\n            'height': ''\r\n        };\r\n\r\n        this.search(filters);\r\n    }\r\n\r\n    openCreateModal = () => {\r\n        this.setState({showCreateModal: true});\r\n    }\r\n\r\n    openImportModal = () => {\r\n        this.setState({showImportModal: true});\r\n    }\r\n\r\n    showDetailedView = (row) => {\r\n        this.setState({\r\n            detailViewLoading: true,\r\n         });\r\n\r\n        var vendor = row['Vendor'];\r\n        var modelNum = row['Model Number'];\r\n\r\n        this.detailViewModel(vendor, modelNum);\r\n    }\r\n\r\n    closeCreateModal = () => {\r\n        this.setState({showCreateModal: false});\r\n    }\r\n\r\n    closeImportModal = () => {\r\n        this.setState({showImportModal: false});\r\n    }\r\n\r\n    closeDetailedView = () => {\r\n        this.setState({ showDetailedView: false })\r\n    }\r\n\r\n    updateModelCreator = (event) => {\r\n        this.state.createdModel[event.target.name] = event.target.value;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateModelColor = (color) => {\r\n        this.state.createdModel['display_color'] = color;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateModelColorDetails = (color) => {\r\n        this.state.detailedValues['display_color'] = color;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    updateSearchText = (event) => {\r\n        this.setState({ searchText: event.target.value})\r\n    }\r\n\r\n    closeShowStatus = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    createStatusClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ createshowStatus: false })\r\n    }\r\n\r\n    detailStatusClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ detailshowStatus: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\">\r\n                            Models\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        {(this.props.privilege.admin || this.props.privilege.model) ?\r\n                        (<div>\r\n                            <CreateModel\r\n                                showStatus={this.state.createshowStatus}\r\n                                statusSeverity={this.state.statusSeverity}\r\n                                statusClose={this.createStatusClose}\r\n                                statusMessage={this.state.statusMessage}\r\n                                showCreateModal={this.state.showCreateModal}\r\n                                closeCreateModal={this.closeCreateModal}\r\n                                createModel={this.createModel}\r\n                                updateModelCreator={this.updateModelCreator}\r\n                                options={this.state.vendorsList}\r\n                                useAutocomplete={true}\r\n                                updateModelColor={this.updateModelColor}\r\n                                sendUploadedFile={this.sendUploadedFile}\r\n                                height=\"420px\"\r\n                            />\r\n                        </div>) : null}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} lg={6}>\r\n                        <FilterModel\r\n                            updateSearchText={this.updateSearchText}\r\n                            search={this.search}\r\n                            filters={columns}\r\n                            options={this.state.vendorsList}\r\n                            useAutocomplete={true}\r\n                            height=\"420px\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                        <ExportModel\r\n                            downloadTable={this.downloadTable}\r\n                            showAll={this.searchAll}\r\n                            height=\"420px\"\r\n                        />\r\n                        <CSVLink\r\n                            data={this.state.csvData}\r\n                            filename={modelDownloadFileName}\r\n                            className=\"hidden\"\r\n                            ref={(r) => this.csvLink = r}\r\n                            target=\"_blank\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <ModelsTable\r\n                            columns={this.props.privilege.admin || this.props.privilege.model ? adminColumns : columns}\r\n                            vals={this.state.rows}\r\n                            privilege={this.props.privilege}\r\n                            token={this.props.token}\r\n                            keys={columns}\r\n                            filters={this.props.privilege.admin || this.props.privilege.model ? adminColumns : columns}\r\n                            updateModelColor={this.updateModelColorDetails}\r\n                            deleteModel={this.deleteModel}\r\n                            editModel={this.editModel}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <StatusDisplay\r\n                    open={this.state.showStatus}\r\n                    severity={this.state.statusSeverity}\r\n                    closeStatus={this.closeShowStatus}\r\n                    message={this.state.statusMessage}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nexport default function PrivilegePicker(props) {\r\n\tconst generalPrivileges=[\r\n\t\t{title:\"Model Management\", value:\"model\"},\r\n\t\t{title:\"Global Asset Management\", value:\"asset\"},\r\n\t\t{title:\"Auditing\", value:\"audit\"},\r\n\t\t{title:\"Power Management\", value:\"power\"},\r\n\t\t{title:\"Administrator\", value:\"admin\"},\r\n\t]\r\n\r\n\tvar defaultPrivs = [];\r\n\tvar defaultDCs = [];\r\n\r\n\tif(props.defaultPrivileges !== undefined) {\r\n\t\tif (props.defaultPrivileges.model) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[0]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.asset) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[1]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.audit) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[2]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.power) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[3]);\r\n\t\t}\r\n\t\tif (props.defaultPrivileges.admin) {\r\n\t\t\tdefaultPrivs.push(generalPrivileges[4]);\r\n\t\t}\r\n\r\n\t\tdefaultDCs = props.defaultPrivileges.datacenters\r\n\t}\r\n\r\n\treturn (\r\n\t\t<span>\r\n\t\t\t<Typography>Privileges</Typography>\r\n\t\t\t<Autocomplete\r\n\t\t\t\tmultiple\r\n\t\t\t\tid=\"tags-standard\"\r\n\t\t\t\tgetOptionLabel={option => option.title}\r\n\t\t\t\toptions={generalPrivileges}\r\n\t\t\t\tonChange={props.updatePrivilege}\r\n\t\t\t\tdefaultValue={defaultPrivs}\r\n\t\t\t\trenderInput={params => (\r\n\t\t\t\t<TextField\r\n\t\t\t\t\t{...params}\r\n\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\tlabel=\"General Privileges\"\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t/>\r\n\t\t\t{props.loading ? <CircularProgress /> :\r\n\t\t\t<Autocomplete\r\n\t\t\t\tmultiple\r\n\t\t\t\tid=\"tags-standard\"\r\n\t\t\t\toptions={props.dcPrivileges}\r\n\t\t\t\tonChange={props.updateDCPrivilege}\r\n\t\t\t\tdefaultValue={defaultDCs}\r\n\t\t\t\trenderInput={params => (\r\n\t\t\t\t<TextField\r\n\t\t\t\t\t{...params}\r\n\t\t\t\t\tvariant=\"standard\"\r\n\t\t\t\t\tlabel=\"Datacenter Asset Privileges\"\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t/>}\r\n\t\t</span>\r\n\t)\r\n\r\n}\r\n","export enum PrivilegeCommand {\r\n    GET_PRIVILEGES = \"getPermissions/\",\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport '../../../stylesheets/Models.css';\r\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nexport default class Filters extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            display_name: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            privilege:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetCreate = (success) => {\r\n        if (success) {\r\n            this.setState({username: \"\", display_name: \"\", password: \"\", email: \"\", privilege:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },});\r\n        }\r\n    }\r\n\r\n    searchUsers = () => {\r\n        this.props.search( { \"filter\":this.state } );\r\n    }\r\n\r\n    updateprivilege = (event, values) => {\r\n        var privs = {\r\n            \"model\":false,\r\n            \"asset\":false,\r\n            \"datacenters\":this.state.privilege[\"datacenters\"],\r\n            \"power\":false,\r\n            \"audit\":false,\r\n            \"admin\":false,\r\n        };\r\n        values.map(priv => { privs[priv.value] = true; });\r\n        this.setState({ privilege: privs });\r\n    }\r\n\r\n    updateDCPrivilege = (event, values) => {\r\n        var privs = this.state.privilege;\r\n        privs[\"datacenters\"] = values;\r\n        this.setState({ privilege: privs });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Card elevation={3} style={{ padding: \"20px\" }}>\r\n            <Typography variant=\"h6\">Search</Typography>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item xs={6}>\r\n                    <TextField type=\"text\" id=\"standard-basic\" variant=\"outlined\" label=\"Username\" name=\"username\" value={this.state.username} onChange={(e) => this.setState({ username: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Display Name\" name=\"display_name\" value={this.state.display_name} onChange={(e) => this.setState({ display_name: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Email\" name=\"email\" type=\"email\" value={this.state.email} onChange={(e) => this.setState({ email: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <PrivilegePicker\r\n                        dcPrivileges={this.props.privileges}\r\n                        loading={this.props.loading}\r\n                        updatePrivilege={this.updateprivilege}\r\n                        updateDCPrivilege={this.updateDCPrivilege}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    item\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    xs={12}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={this.searchUsers}\r\n                        style={{\r\n                            \"width\": \"100%\",\r\n                            \"marginTop\": \"20px\",\r\n                            \"backgroundColor\": \"blue\",\r\n                            \"color\": \"white\"\r\n                        }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport '../../../stylesheets/Models.css';\r\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nexport default class CreateModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            display_name: \"\",\r\n            password: \"\",\r\n            email: \"\",\r\n            selectedPrivileges:{\r\n                \"model\":false,\r\n                \"asset\":false,\r\n                \"datacenters\":[],\r\n                \"power\":false,\r\n                \"audit\":false,\r\n                \"admin\":false,\r\n            },\r\n        };\r\n    }\r\n\r\n    resetCreate = (success) => {\r\n        if (success) {\r\n            this.setState({\r\n                username: \"\",\r\n                display_name: \"\",\r\n                password: \"\",\r\n                email: \"\",\r\n            });\r\n        }\r\n    }\r\n\r\n    createModel = () => {\r\n        this.props.createModel(this.state.username, this.state.password, this.state.display_name, this.state.email, this.state.selectedPrivileges, this.resetCreate);\r\n    }\r\n\r\n    updateSelectedPrivileges = (event, values) => {\r\n        var privs = {\r\n            \"model\":false,\r\n            \"asset\":false,\r\n            \"datacenters\":this.state.selectedPrivileges[\"datacenters\"],\r\n            \"power\":false,\r\n            \"audit\":false,\r\n            \"admin\":false,\r\n        };\r\n        values.map(priv => { privs[priv.value] = true; });\r\n        this.setState({ selectedPrivileges: privs });\r\n    }\r\n\r\n    updateDCPrivilege = (event, values) => {\r\n        var privs = this.state.selectedPrivileges;\r\n        privs[\"datacenters\"] = values;\r\n        this.setState({ selectedPrivileges: privs });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <Card elevation={3} style={{ padding: \"20px\" }}>\r\n            <Typography variant=\"h6\">Create</Typography>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                direction=\"row\"\r\n                justify=\"flex-start\"\r\n                alignItems=\"center\"\r\n            >\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Username\" name=\"username\" value={this.state.username} onChange={(e) => this.setState({ username: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Display Name\" name=\"display_name\" value={this.state.display_name} onChange={(e) => this.setState({ display_name: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Password\" name=\"password\" type=\"password\" value={this.state.password} onChange={(e) => this.setState({ password: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Email\" name=\"email\" type=\"email\" value={this.state.email} onChange={(e) => this.setState({ email: e.target.value })}/>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <PrivilegePicker\r\n                        dcPrivileges={this.props.privileges}\r\n                        loading={this.props.loading}\r\n                        updatePrivilege={this.updateSelectedPrivileges}\r\n                        updateDCPrivilege={this.updateDCPrivilege}\r\n                    />\r\n                </Grid>\r\n                <Grid\r\n                    container\r\n                    item\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    xs={12}\r\n                >\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={this.createModel}\r\n                        style={{\r\n                            \"width\": \"100%\",\r\n                            \"marginTop\": \"20px\",\r\n                            \"backgroundColor\": \"green\",\r\n                            \"color\": \"white\"\r\n                        }}\r\n                    >\r\n                        Create\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Card>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Button from '@material-ui/core/Button';\nimport { Privilege } from '../../enums/privilegeTypes';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport PrivilegePicker from \"./functions/PrivilegePicker\";\n\nconst useStyles = theme => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmodal: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\twidth: \"100%\",\n\t\tmargin: \"0 auto\",\n\t\toverflow: \"scroll\"\n\t},\n\tgrid: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3),\n\t\twidth: \"50%\"\n\t},\n\tprogress: {\n\t\tdisplay: 'flex',\n\t\t'& > * + *': {\n\t\t\tmarginLeft: theme.spacing(2),\n\t\t},\n\t},\n});\n\nclass UsersTable extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcanEdit: false,\n\t\t\tshowDeleteModal: false,\n\t\t\tusername: '',\n\n\t\t\toriginalUsername:\"\",\n\t\t\tusername: \"\",\n\t\t\tdisplay_name: \"\",\n\t\t\tpassword: \"\",\n\t\t\temail: \"\",\n\t\t\tselectedPrivileges:{\n\t\t\t\t\"model\":false,\n\t\t\t\t\"asset\":false,\n\t\t\t\t\"datacenters\":[],\n\t\t\t\t\"power\":false,\n\t\t\t\t\"audit\":false,\n\t\t\t\t\"admin\":false,\n\t\t\t},\n\t\t\tpassword:\"\",\n\t\t};\n\t}\n\n\tshowDetailedView(index) {\n\t\tthis.props.showDetailedView(index);\n\t}\n\n\tbeginEditing = (event, row) => {\n\t\tthis.setState({ canEdit: true });\n\t\tconsole.log(row);\n\t\tthis.setState({\n\t\t\toriginalUsername:row.Username,\n\t\t\tusername:row.Username,\n\t\t\tdisplay_name:row[\"Display Name\"],\n\t\t\temail:row.Email,\n\t\t\tselectedPrivileges:row.Privilege,\n\t\t\tpassword:row.password,\n\t\t});\n\t}\n\n\tendEditing = () => {\n\t\tthis.setState({ canEdit: false });\n\t\tthis.props.save(\n\t\t\tthis.state.originalUsername,\n\t\t\tthis.state.username,\n\t\t\tthis.state.password,\n\t\t\tthis.state.display_name,\n\t\t\tthis.state.email,\n\t\t\tthis.state.selectedPrivileges\n\t\t);\n\t}\n\n\tshowDeleteModal = (row) => {\n\t\tthis.setState({ showDeleteModal: true, username: row[\"Username\"] });\n\t}\n\n\tcloseDeleteModal = () => {\n\t\tthis.setState({ showDeleteModal: false, username: \"\" });\n\t}\n\n\tdelete = () => {\n\t\tthis.props.delete(this.state.username);\n\t\tthis.closeDeleteModal();\n\t}\n\n\tupdateSelectedPrivileges = (event, values) => {\n        var privs = {\n            \"model\":false,\n            \"asset\":false,\n            \"datacenters\":this.state.selectedPrivileges[\"datacenters\"],\n            \"power\":false,\n            \"audit\":false,\n            \"admin\":false,\n        };\n        values.map(priv => { privs[priv.value] = true; });\n        this.setState({ selectedPrivileges: privs });\n    }\n\n    updateDCPrivilege = (event, values) => {\n        var privs = this.state.selectedPrivileges;\n        privs[\"datacenters\"] = values;\n        this.setState({ selectedPrivileges: privs });\n    }\n\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<TableContainer component={Paper}>\n\t\t\t\t\t<Table style={{ minWidth: 1000 }} aria-label=\"simple table\">\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow >\n\t\t\t\t\t\t\t\t{this.props.columns.map(col => {\n\t\t\t\t\t\t\t\t\tif (col === \"Privilege\") {\n\t\t\t\t\t\t\t\t\t\treturn (this.state.canEdit ? <TableCell align=\"center\"><span id={col} style={{ fontWeight: \"bold\" }}>{col}</span></TableCell>:null)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn <TableCell align=\"center\"><span id={col} style={{ fontWeight: \"bold\" }}>{col}</span></TableCell>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{this.props.vals.map((row, index) => (\n\t\t\t\t\t\t\t\t<TableRow id={index}>\n\t\t\t\t\t\t\t\t\t{this.props.privilege.admin ? <TableCell scope=\"row\" align=\"center\">\n\t\t\t\t\t\t\t\t\t\t{row[\"Username\"] !== \"admin\" ? <div><Button>\n\t\t\t\t\t\t\t\t\t\t\t{this.state.canEdit ? <SaveIcon onClick={this.endEditing} /> : <EditIcon onClick={(e) => { this.beginEditing(e, row) }} />}\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t<Button>\n\t\t\t\t\t\t\t\t\t\t\t\t<DeleteIcon onClick={() => this.showDeleteModal(row)} />\n\t\t\t\t\t\t\t\t\t\t\t</Button></div> : null}\n\t\t\t\t\t\t\t\t\t</TableCell> : null}\n\t\t\t\t\t\t\t\t\t{this.props.keys.map(key => {\n\t\t\t\t\t\t\t\t\t\tif (key === \"Privilege\") {\n\t\t\t\t\t\t\t\t\t\t\treturn (this.state.canEdit && row[\"Username\"] !== \"admin\" ? <TableCell scope=\"row\" align=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t\t<PrivilegePicker\n\t\t\t\t\t\t\t\t\t\t\t\t\tdcPrivileges={this.props.privileges}\n\t\t\t\t\t\t\t\t\t\t\t\t\tloading={this.props.loading}\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdatePrivilege={this.updateSelectedPrivileges}\n\t\t\t\t\t\t\t\t\t\t\t\t\tupdateDCPrivilege={this.updateDCPrivilege}\n\t\t\t\t\t\t\t\t\t\t\t\t\tdefaultPrivileges={row.Privilege}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</TableCell> : null);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\treturn (<TableCell scope=\"row\" align=\"center\">{row[key]}</TableCell>)\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\n\t\t\t\t<Modal\n\t\t\t\t\taria-labelledby=\"transition-modal-title\"\n\t\t\t\t\taria-describedby=\"transition-modal-description\"\n\t\t\t\t\tclassName={classes.modal}\n\t\t\t\t\topen={this.state.showDeleteModal}\n\t\t\t\t\tonClose={this.closeDeleteModal}\n\t\t\t\t\tcloseAfterTransition\n\t\t\t\t>\n\t\t\t\t\t<Fade in={this.state.showDeleteModal}>\n\t\t\t\t\t\t<Backdrop\n\t\t\t\t\t\t\topen={this.state.showDeleteModal}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className={classes.grid}>\n\t\t\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\t\t\tcontainer\n\t\t\t\t\t\t\t\t\tspacing={1}\n\t\t\t\t\t\t\t\t\tdirection=\"row\"\n\t\t\t\t\t\t\t\t\tjustify=\"flex-start\"\n\t\t\t\t\t\t\t\t\talignItems=\"center\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"h5\">Are you sure?</Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={12} sm={12} md={6} lg={6}>\n\t\t\t\t\t\t\t\t\t\t<Typography variant=\"body1\">\n\t\t\t\t\t\t\t\t\t\t\tDoing this will remove the user permanently.\n                                </Typography>\n\t\t\t\t\t\t\t\t\t</Grid>\n\n\t\t\t\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.delete}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tYes\n                                </Button>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.closeDeleteModal}\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tNo\n                                </Button>\n\t\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Backdrop>\n\n\t\t\t\t\t</Fade>\n\t\t\t\t</Modal>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withStyles(useStyles)(UsersTable);\n","\r\n\r\nexport const GENERAL_USER_ERROR =  \"There was an error in the backend. Could not perform the given user operation at this time.\";\r\n\r\nexport const USER_SUCCESS_TOKEN = \"success\";\r\nexport const USER_FAILURE_TOKEN = \"error\";\r\n\r\nexport const USER_CREATION_SUCCESS_MESSAGE = \"Successfully created user\";\r\nexport const USER_CREATION_FAILURE_MESSAGE = \"Failed to create user\";\r\n\r\nexport const USER_EDIT_SUCCESS_MESSAGE = \"Successfully updated user\";\r\nexport const USER_EDIT_FAILURE_MESSAGE = \"Failed to update user\";\r\n\r\nexport const USER_DELETE_SUCCESS_MESSAGE = \"Successfully deleted user\";\r\nexport const USER_DELETE_FAILURE_MESSAGE = \"Failed to delete user\";\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Typography,\r\n    Grid,\r\n} from '@material-ui/core';\r\n\r\nimport { UserCommand } from '../enums/UserCommands.ts'\r\nimport FilterUser from '../helpers/FilterUser';\r\nimport CreateUser from '../helpers/CreateUser';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport UsersTable from '../helpers/UsersTable';\r\nimport StatusDisplay from '../../helpers/StatusDisplay';\r\nimport * as UserConstants from \"../UserConstants\";\r\nimport { PrivilegeCommand } from \"../enums/PrivilegeCommands.ts\";\r\nimport * as Constants from \"../../Constants\";\r\nimport makeCreateJSON from \"../helpers/functions/MakeCreateJSON\";\r\nimport makeEditJSON from \"../helpers/functions/MakeEditJSON\";\r\nimport makeDeleteJSON from \"../helpers/functions/MakeDeleteJSON\";\r\nimport makeDetailViewJSON from \"../helpers/functions/MakeDetailViewJSON\";\r\n\r\nconst inputs = [\r\n    'username',\r\n    'email',\r\n    'display_name',\r\n    'privilege',\r\n    'password',\r\n]\r\n\r\nconst columns = [\r\n    'Username',\r\n    'Email',\r\n    'Display Name',\r\n    'Privilege',\r\n]\r\n\r\nconst adminColumns = [\r\n    'Actions',\r\n    'Username',\r\n    'Email',\r\n    'Display Name',\r\n    'Privilege'\r\n]\r\n\r\nconst columnLookup = {\r\n    \"username\": \"Username\",\r\n    \"email\": \"Email\",\r\n    \"display_name\": \"Display Name\",\r\n    'privilege': 'Privilege'\r\n}\r\n\r\nconst blankSearch = {\r\n    \"filter\":\r\n    {\r\n        \"username\": \"\",\r\n        \"display_name\": \"\",\r\n        \"email\": \"\",\r\n        \"privilege\": {\r\n            \"model\": false,\r\n            \"asset\": false,\r\n            \"datacenters\": [],\r\n            \"power\": false,\r\n            \"audit\": false,\r\n            \"admin\": false,\r\n        }\r\n    }\r\n}\r\n\r\nexport default class UsersView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            statusOpen: false,\r\n            statusSeverity: '',\r\n            statusMessage: '',\r\n            searchUsernm: '',\r\n            searchEml: '',\r\n            searchDspNm: '',\r\n            searchPriv: '',\r\n            deleteUsername: '',\r\n            viewUser: '',\r\n            csvData: [],\r\n            showDetailedView: false,\r\n            detailViewLoading: false,\r\n            originalUsername: '',\r\n            allDCPrivileges: [],\r\n            loadingPrivileges: true,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchUsers(blankSearch);\r\n        this.getPrivileges();\r\n    }\r\n\r\n    createUser = (username, password, display_name, email, privileges, completion) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.create),\r\n            makeCreateJSON(username, password, display_name, email, privileges)\r\n        ).then(response => {\r\n            if (response.data.message === UserConstants.USER_SUCCESS_TOKEN) {\r\n                completion(true);\r\n                this.setDisplayStatus(true, UserConstants.USER_CREATION_SUCCESS_MESSAGE, UserConstants.USER_SUCCESS_TOKEN);\r\n                this.searchUsers(blankSearch);\r\n            } else {\r\n                completion(false);\r\n                this.setDisplayStatus(true, response.data.message, UserConstants.USER_FAILURE_TOKEN)\r\n            }\r\n        });\r\n    }\r\n\r\n    editUser = (originalUsername, username, password, display_name, email, privileges, completion) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.edit),\r\n            makeEditJSON(originalUsername, username, password, display_name, email, privileges)\r\n        ).then(response => this.processResponse(response, UserConstants.USER_EDIT_SUCCESS_MESSAGE, UserConstants.USER_EDIT_FAILURE_MESSAGE));\r\n    }\r\n\r\n    deleteUser = (username) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.delete),\r\n            makeDeleteJSON(username)\r\n        ).then(response =>\r\n            this.processResponse(response, UserConstants.USER_DELETE_SUCCESS_MESSAGE, UserConstants.USER_DELETE_FAILURE_MESSAGE)\r\n        );\r\n    }\r\n\r\n    detailViewUser = (username) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.detailView),\r\n            makeDetailViewJSON(username)\r\n        ).then(response => this.setState({ detailedValues: response.data['user'], detailViewLoading: false }));\r\n    }\r\n\r\n    searchUsers = (filters) => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, UserCommand.search),\r\n            filters,\r\n        ).then(response => {\r\n            const models = response.data['users'] === undefined ? [] : response.data['users'];\r\n            var rows = [];\r\n            Object.values(models).forEach(model => {\r\n                var row = {};\r\n                Object.keys(model).forEach(key => {\r\n                    if (key in columnLookup) {\r\n                        row[columnLookup[key]] = model[key];\r\n                    } else {\r\n                        row[key] = model[key];\r\n                    }\r\n                });\r\n                rows.push(row);\r\n            });\r\n\r\n            this.setState({ items: rows });\r\n        });\r\n    }\r\n\r\n    getPrivileges = () => {\r\n        axios.get(getURL(Constants.PERMISSIONS_MAIN_PATH, PrivilegeCommand.GET_PRIVILEGES)).then(\r\n            response => {\r\n                try {\r\n                    this.setState({\r\n                        allDCPrivileges: response.data.datacenters,\r\n                        loadingPrivileges: false,\r\n                    });\r\n                } catch {\r\n                    this.setState({\r\n                        allDCPrivileges: [],\r\n                        loadingPrivileges: false,\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setDisplayStatus = (open, message, severity) => {\r\n        this.setState({ statusOpen: open, statusMessage: message, statusSeverity: severity });\r\n    }\r\n\r\n    showDetailedView = (id) => {\r\n        this.setState({\r\n            showDetailedView: true,\r\n            detailViewLoading: true,\r\n            originalUsername: this.state.items[id]['username'],\r\n        });\r\n\r\n        var username = this.state.items[id]['username'];\r\n\r\n        this.detailViewUser(username);\r\n        //this.setState({ detailedValues: Constants.testUserArray[id], detailViewLoading:false})\r\n    }\r\n\r\n    closeDetailedView = () => {\r\n        this.setState({ showDetailedView: false })\r\n    }\r\n\r\n    updateUserEdited = (event) => {\r\n        const newDetails = this.state.detailedValues;\r\n        newDetails[event.target.name] = event.target.value;\r\n        this.setState({ detailedValues: newDetails });\r\n        this.forceUpdate()\r\n    }\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ statusOpen: false })\r\n    }\r\n\r\n    processResponse = (response, successMessage, failureMessage) => {\r\n        console.log(response);\r\n        if (response.data.message === UserConstants.USER_SUCCESS_TOKEN) {\r\n            this.setDisplayStatus(true, successMessage, UserConstants.USER_SUCCESS_TOKEN);\r\n            this.searchUsers(blankSearch);\r\n        } else {\r\n            this.setDisplayStatus(true, response.data.message, UserConstants.USER_FAILURE_TOKEN);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <StatusDisplay\r\n                    open={this.state.statusOpen}\r\n                    severity={this.state.statusSeverity}\r\n                    closeStatus={this.closeShowStatus}\r\n                    message={this.state.statusMessage}\r\n                />\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{ margin: \"0px\", maxWidth: \"95vw\" }}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h4\">\r\n                            Users\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={6}>\r\n                        {(this.props.privilege.admin) ?\r\n                            (<div>\r\n                                <CreateUser\r\n                                    showCreateModal={this.state.showCreateModal}\r\n                                    closeCreateModal={this.closeCreateModal}\r\n                                    createModel={this.createUser}\r\n                                    updateModelCreator={this.updateUserCreator}\r\n                                    inputs={inputs}\r\n                                    options={[]}\r\n                                    useAutocomplete={false}\r\n                                    loading={this.state.loadingPrivileges}\r\n                                    privileges={this.state.allDCPrivileges}\r\n                                />\r\n                            </div>) : null}\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} lg={6}>\r\n                        <FilterUser\r\n                            updateSearchText={this.updateSearchText}\r\n                            search={this.searchUsers}\r\n                            filters={columns}\r\n                            loading={this.state.loadingPrivileges}\r\n                            privileges={this.state.allDCPrivileges}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <UsersTable\r\n                            columns={this.props.privilege.admin ? adminColumns : columns}\r\n                            vals={this.state.items}\r\n                            keys={columns}\r\n                            privilege={this.props.privilege}\r\n                            showDetailedView={this.showDetailedView}\r\n                            filters={this.props.privilege.admin ? adminColumns : columns}\r\n                            delete={this.deleteUser}\r\n                            save={this.editUser}\r\n                            editUser={this.updateEditUser}\r\n                            loading={this.state.loadingPrivileges}\r\n                            privileges={this.state.allDCPrivileges}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export enum AssetInput {\r\n    MODEL = 'model',\r\n    HOSTNAME = 'hostname',\r\n    RACK = 'rack',\r\n    RACK_U = 'rack_position',\r\n    RACK_ORIGINAL = 'rackOriginal',\r\n    RACK_U_ORIGINAL = 'rack_positionOriginal',\r\n    OWNER = 'owner',\r\n    COMMENT = 'comment',\r\n    DATACENTER = 'datacenter_id',\r\n    TAGS = 'tags',\r\n    MAC_ADDRESS = 'mac_address',\r\n    NETWORK_CONNECTIONS = 'network_connections',\r\n    POWER_CONNECTIONS = 'power_connections',\r\n    ASSET_NUMBER = 'asset_number',\r\n    BLADE_CHASSIS = 'chassis_hostname',\r\n    BLADE_POSITION = 'chassis_slot',\r\n}\r\n","export enum AssetCommand {\r\n    create = 'create/',\r\n    delete = 'delete/',\r\n    edit = 'edit/',\r\n    view = 'view/',\r\n    detailView = 'detailView/',\r\n    search = 'search/',\r\n    GET_ALL_MODELS = 'assistedmodel/',\r\n    GET_ALL_OWNERS = 'assistedowner/',\r\n    GET_ALL_DATACENTERS = 'assisteddatacenter/',\r\n    GET_ALL_HOSTNAME = 'assistedhostname/',\r\n    UPLOAD_FILE = 'import/',\r\n    EXPORT_FILE = 'export/',\r\n    GET_NEXT_ASSET_NUM = 'nextAssetNumber/',\r\n    GET_NETWORK_NEIGHBORHOOD = \"networkNeighborhood/\",\r\n    CHANGE_PLAN_CREATE = 'createplan/',\r\n    CHANGE_PLAN_DELETE = 'deleteplan/',\r\n    CHANGE_PLAN_EDIT = 'editplan/',\r\n    CHANGE_PLAN_EXECUTE = 'execute/',\r\n    CHANGE_PLAN_GET_PLANS = 'getplans/',\r\n    CHANGE_PLAN_CREATE_ACTION = 'createaction/',\r\n    CHANGE_PLAN_EDIT_ACTION = 'editaction/',\r\n    CHANGE_PLAN_DELETE_ACTION = 'deleteaction/',\r\n    CHANGE_PLAN_GET_ACTIONS = 'getactions/',\r\n    GENERATE_LABELS = 'labelgen/',\r\n    DECOMMISSION = \"decommission_asset/\",\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeCreateJSON(username, password, display_name, email, privileges) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t\t'password': password,\r\n\t\t'display_name': display_name,\r\n\t\t'email': email,\r\n\t\t'privilege': privileges,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeEditJSON(originalUsername, username, password, display_name, email, privileges) {\r\n\treturn {\r\n\t\t'username_original':originalUsername,\r\n\t\t'username': username,\r\n\t\t'password': password,\r\n\t\t'display_name': display_name,\r\n\t\t'email': email,\r\n\t\t'privilege': privileges,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeDeleteJSON(username) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t}\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function makeDetailViewJSON(username) {\r\n\treturn {\r\n\t\t'username': username,\r\n\t}\r\n}\r\n","\r\n\r\n\r\nexport const GENERAL_ASSET_ERROR =  \"There was an error in the backend. Could not perform the given asset operation at this time.\";\r\n\r\n\r\nexport const ASSETS_MAIN_PATH = 'instances/';\r\nexport const CHANGE_PLAN_PATH = 'changeplans/';\r\nexport const ASSET_DOWNLOAD_FILE_NAME = 'assets.csv';\r\nexport const SUCCESS_TOKEN = \"success\";\r\nexport const ERROR_TOKEN = \"error\";\r\n","import React from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport axios from \"axios\";\r\n\r\nimport { Typography, Paper } from '@material-ui/core';\r\n\r\nimport { AssetCommand } from \"../enums/AssetCommands.ts\";\r\nimport getURL from \"../../helpers/functions/GetURL\"\r\nimport * as Constants from \"../../Constants\";\r\n\r\n// nodes: [\r\n//     { id: 1, label: \"Node 1\", title: \"node 1 tootip text\" },\r\n//     { id: 2, label: \"Node 2\", title: \"node 2 tootip text\" },\r\n//     { id: 3, label: \"Node 3\", title: \"node 3 tootip text\" },\r\n//     { id: 4, label: \"Node 4\", title: \"node 4 tootip text\" },\r\n//     { id: 5, label: \"Node 5\", title: \"node 5 tootip text\" }\r\n//   ],\r\n//   edges: [\r\n//     { from: 1, to: 2 },\r\n//     { from: 1, to: 3 },\r\n//     { from: 2, to: 4 },\r\n//     { from: 2, to: 5 },\r\n//     { from: 5, to: 2 }\r\n//   ]\r\n//\r\n// vals: {\r\n//      \"host1\": [ \"host2\", \"host4\" ],\r\n//      \"host3\": [\"host5\", \"host7\", \"host9\", \"host11\"]\r\n// }\r\n\r\nconst useStyles = theme => ({\r\n\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n});\r\n\r\nfunction getGraph(primaryHosts, host) {\r\n    if (host === \"\") {\r\n        return {};\r\n    }\r\n\r\n    var hostnameMapping = {};\r\n    const hostID = 0;\r\n\r\n    var nodes = [];\r\n    nodes.push({\r\n        id: hostID,\r\n        label: \"\" + host,\r\n        color: \"#F5F5DC\"\r\n    });\r\n\r\n    hostnameMapping[host] = hostID;\r\n\r\n    var edges = [];\r\n    var primaryHostID = 1;\r\n\r\n    try {\r\n        console.log(\"nodes and edges\");\r\n        console.log(primaryHosts);\r\n        Object.entries(primaryHosts).map(([primaryHost, secondaryHosts]) => {\r\n            if (primaryHost !== \"message\" && primaryHost !== \"\" && primaryHost !== \"metadata\") {\r\n                if (hostnameMapping[primaryHost] !== undefined) {\r\n                    edges.push({ from: hostID, to: hostnameMapping[primaryHost] });\r\n                    edges.push({ from: hostnameMapping[primaryHost], to: hostID });\r\n                } else {\r\n                    nodes.push({\r\n                        id: primaryHostID,\r\n                        label: \"\" + primaryHost,\r\n                        color: \"#F0FFFF\"\r\n                    });\r\n                    edges.push({ from: hostID, to: primaryHostID });\r\n                    edges.push({ from: primaryHostID, to: hostID });\r\n                    hostnameMapping[primaryHost] = primaryHostID;\r\n                }\r\n                console.log(\"nodes and edges\");\r\n                var secondaryHostID = primaryHostID + 1;\r\n                try {\r\n                    secondaryHosts.map(secondaryHost => {\r\n                        if (secondaryHost !== \"\") {\r\n                            if (hostnameMapping[secondaryHost] !== undefined) {\r\n                                edges.push({ from: primaryHostID, to: hostnameMapping[secondaryHost] });\r\n                                edges.push({ to: primaryHostID, from: hostnameMapping[secondaryHost] });\r\n                            } else {\r\n                                nodes.push({\r\n                                    id: secondaryHostID,\r\n                                    label: \"\" + secondaryHost,\r\n                                    color: \"#7FFFD4\"\r\n                                });\r\n                                edges.push({ from: primaryHostID, to: secondaryHostID });\r\n                                edges.push({ to: primaryHostID, from: secondaryHostID });\r\n                                hostnameMapping[secondaryHost] = secondaryHostID;\r\n                                secondaryHostID++;\r\n                            }\r\n                        }\r\n                    });\r\n                } catch {\r\n\r\n                }\r\n\r\n                console.log(\"nodes and edges\");\r\n                primaryHostID = secondaryHostID + 1;\r\n            }\r\n        });\r\n\r\n        console.log(\"nodes and edges\");\r\n        console.log(nodes);\r\n        console.log(edges);\r\n        return { nodes: nodes, edges: edges };\r\n\r\n    } catch (Exception) {\r\n        console.log(\"in here\")\r\n        console.log(Exception);\r\n        return { nodes: [], edges: [] }\r\n    }\r\n}\r\n\r\nclass NetworkGraph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            graph: {\r\n                nodes: [],\r\n                edges: [],\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.GET_NETWORK_NEIGHBORHOOD), {\r\n            \"asset_number\": this.props.assetNum,\r\n        }).then(response => {\r\n            this.setState({ graph: getGraph(response.data, this.props.host) });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const options = {\r\n            layout: {\r\n                hierarchical: false\r\n            },\r\n            edges: {\r\n                color: \"#000000\"\r\n            },\r\n            height: \"500px\",\r\n            interaction: {\r\n                dragNodes: false,\r\n                dragView: false,\r\n            }\r\n        };\r\n\r\n        const events = {\r\n            select: function (event) {\r\n                var { nodes, edges } = event;\r\n            }\r\n        };\r\n\r\n        return (\r\n            <span>\r\n                <Paper elevation={3} style={{\r\n                        width: \"70%\",\r\n                        margin: \"0 auto\",\r\n                        marginTop:\"1%\",\r\n                        padding:\"2%\"\r\n                }}>\r\n                    {this.props.isDecommissioned ?\r\n                        <Graph\r\n                            graph={getGraph(this.props.decomAsset.network_neighborhood, this.props.host)}\r\n                            options={options}\r\n                            events={events}\r\n                            getNetwork={network => {\r\n                                //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n                            }}\r\n                        />\r\n                        :\r\n                        this.state.graph.edges.length === 0 ?\r\n                            <Typography>{this.props.isDecommissioned ? \"This asset was not connected to any other assets\" : \"This asset is not currently connected to any other assets\"}</Typography> :\r\n                            <Graph\r\n                                graph={this.state.graph}\r\n                                options={options}\r\n                                events={events}\r\n                                getNetwork={network => {\r\n                                    //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n                                }}\r\n                            />\r\n                    }\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\n\r\nexport default NetworkGraph;\r\n","/**\r\n * For MAC addresses, the system should accept a six-byte hexadecimal value\r\n * with any byte seperator punctuation (including colon, dash, underscore, and\r\n * no seperator at all). Upon accepting the value, it should be formatted into a\r\n * lower-case colon-delimited canonical form.\r\n *\r\n * @param {string} val\r\n */\r\n\r\nexport default function stringToMac(val) {\r\n    // A  A  :  A  A  :  A  A  :  A  A  :  A  A  :  A  A\r\n    // 0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16\r\n\r\n    var returnVal = \"\";\r\n\r\n    returnVal = val.replace(/[^0-9A-Fa-f]*/g, \"\").toLowerCase();\r\n\r\n    if (returnVal.length > 12) {\r\n        returnVal = returnVal.substring(0, 12);\r\n    }\r\n\r\n    if (returnVal.length === 1 || returnVal.length === 2) {\r\n        return returnVal;\r\n    }\r\n\r\n    if (returnVal.length === 3 || returnVal.length === 4) {\r\n        return returnVal.substring(0, 2) + \":\" + returnVal.substring(2);\r\n    }\r\n\r\n    if (returnVal.length === 5 || returnVal.length === 6) {\r\n        return returnVal.substring(0, 2) + \":\" + returnVal.substring(2, 4) + \":\" + returnVal.substring(4);\r\n    }\r\n\r\n    if (returnVal.length === 7 || returnVal.length === 8) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6);\r\n    }\r\n\r\n    if (returnVal.length === 9 || returnVal.length === 10) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6, 8)\r\n        + \":\" + returnVal.substring(8);\r\n    }\r\n\r\n    if (returnVal.length === 11 || returnVal.length === 12) {\r\n        return returnVal.substring(0, 2)\r\n        + \":\" + returnVal.substring(2, 4)\r\n        + \":\" + returnVal.substring(4, 6)\r\n        + \":\" + returnVal.substring(6, 8)\r\n        + \":\" + returnVal.substring(8, 10)\r\n        + \":\" + returnVal.substring(10,12);\r\n    }\r\n\r\n    return returnVal;\r\n}\r\n","// React\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport { CompactPicker } from 'react-color';\r\n\r\n// Core\r\nimport { TextField, Button, Tooltip, CircularProgress, Grid, List, ListSubheader, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Radio, RadioGroup, FormControl, FormControlLabel, FormHelperText, Paper } from '@material-ui/core';\r\nimport { IconButton, Slide, InputLabel, MenuItem, Select, Modal, Backdrop } from '@material-ui/core';\r\n\r\n// Lab\r\nimport { Autocomplete, Alert } from '@material-ui/lab';\r\n\r\n//Icons\r\nimport PowerIcon from '@material-ui/icons/Power';\r\nimport PowerOffIcon from '@material-ui/icons/PowerOff';\r\nimport LoopIcon from '@material-ui/icons/Loop';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport * as Constants from \"../../Constants\";\r\nimport { Typography } from '@material-ui/core';\r\nimport stringToMac from \"./functions/StringToMacAddress\"\r\nimport stringToRack from \"./functions/StringToRack\";\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst emptySearch = {\r\n    \"filter\": {\r\n        \"vendor\": null,\r\n        \"model_number\": null,\r\n        \"height\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"username\": null,\r\n        \"display_name\": null,\r\n        \"email\": null,\r\n        \"privilege\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"starting_rack_letter\": null,\r\n        \"ending_rack_letter\": null,\r\n        \"starting_rack_number\": null,\r\n        \"ending_rack_number\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null\r\n    },\r\n    \"datacenter_name\": \"\",\r\n}\r\n\r\nconst searchPath = \"search/\";\r\nconst left = \"left\";\r\nconst right = \"right\";\r\nconst off = \"off\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogDiv: {\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    form: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n    buttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass EditAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // next available asset number\r\n            loadingAssetNumber: true,\r\n\r\n            // model information\r\n            loadingModels: true,\r\n            modelList: [],\r\n            networkList: null,\r\n            powerPortList: null,\r\n\r\n            // owner information\r\n            loadingOwners: true,\r\n            ownerList: [],\r\n\r\n            // datacenter information\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n\r\n            // hostname information\r\n            loadingHostnames: true,\r\n            assetNumList: [],\r\n            assetNumToModelList: null,\r\n\r\n            model: \"\",\r\n            hostname: \"\",\r\n            rack: \"\",\r\n            rackU: -1,\r\n            owner: \"\",\r\n            comment: \"\",\r\n            datacenter_name: \"\",\r\n            tags: [],\r\n            network_connections: null,\r\n            power_connections: null,\r\n            asset_number: -1,\r\n            blade_chassis: \"\",\r\n            blade_position: null,\r\n            mount_type: null,\r\n\r\n            chassisList: [],\r\n            allInstances: [],\r\n            filteredChassisList: [],\r\n            mountTypes: null,\r\n\r\n            selectedConnection: null,\r\n\r\n            statusOpen: false,\r\n            statusMessage: \"\",\r\n            statusSeverity: \"\",\r\n\r\n            showModal: false,\r\n\r\n            powerPortState: null,\r\n            leftRight: null,\r\n            availableConnections: false,\r\n            portOptions: [],\r\n\r\n            canSubmit: false,\r\n            updated: false,\r\n            showConfirmationBox: false,\r\n\r\n            inputs: {\r\n                \"model\": createInputs(AssetInput.MODEL, \"Model\", false, \"A reference to an existing model\"),\r\n                \"hostname\": createInputs(AssetInput.HOSTNAME, \"Hostname\", false, \"A short string compliant with RFC 1034’s definition of 'label'\"),\r\n                \"rack\": createInputs(AssetInput.RACK, \"Rack\", false, \"The rack the equipment is installed in, written as a row letter and rack number, e.g. 'B12'\"),\r\n                \"rackU\": createInputs(AssetInput.RACK_U, \"Rack U\", false, \"An integer indicating the vertical location of the bottom of the equipment (e.g. '5')\"),\r\n                \"owner\": createInputs(AssetInput.OWNER, \"Owner\", false, \"A reference to an existing user on the system who owns this equipment\"),\r\n                \"comment\": createInputs(AssetInput.COMMENT, \"Comments\", false, \"Any additional information associated with this asset\"),\r\n                \"datacenter\": createInputs(AssetInput.DATACENTER, \"Datacenter\", false, \"A reference to an existing datacenter\"),\r\n                \"macAddress\": createInputs(AssetInput.MAC_ADDRESS, \"Mac Address\", false, \"A 6-byte hexadecimal string per network port shown canonically in lower case with colon delimiters (e.g., '00:1e:c9:ac:78:aa').\\nA hostname is required to enter in this value\"),\r\n                \"networkConnections\": createInputs(AssetInput.NETWORK_CONNECTIONS, \"Port Name\", false, \"For each network port, a reference to another network port on another piece of gear\"),\r\n                \"powerConnections\": createInputs(AssetInput.POWER_CONNECTIONS, \"Power Connections\", false, \"Choice of PDU port number (0 means not plugged in)\"),\r\n                \"assetNum\": createInputs(AssetInput.ASSET_NUMBER, \"Asset Number\", false, \"A six-digit serial number unique associated with an asset.\"),\r\n                \"bladeChassis\": createInputs(AssetInput.BLADE_CHASSIS, \"Blade Chassis\", false, \"A reference to a blade chassis asset\"),\r\n                \"bladePosition\": createInputs(AssetInput.BLADE_POSITION, \"Blade Position\", false, \"An integer indicating the slot number of a blade\"),\r\n            },\r\n\r\n            // List of blades for a chassis\r\n            bladeList: [],\r\n\r\n            // Dictionary of power states\r\n            powerStates: {},\r\n\r\n            // Dictionary of blades to slots\r\n            bladeSlots: {},\r\n\r\n            // PDU Shit\r\n            savedDatacenter: \"\",\r\n            savedRackLetter: \"\",\r\n            savedRackNumber: null,\r\n            showPDU: false,\r\n            pduStates: {},\r\n            allThePowers: [],\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n        console.log(this.props.defaultValues);\r\n        if ((this.props.defaultValues.model !== this.state.model\r\n            || this.props.defaultValues.hostname !== this.state.hostname\r\n            || this.props.defaultValues.rack !== this.state.rack\r\n            || this.props.defaultValues.rack_position !== this.state.rackU\r\n            || this.props.defaultValues.owner !== this.state.owner\r\n            || this.props.defaultValues.comment !== this.state.comment\r\n            || this.props.defaultValues.datacenter_name !== this.state.datacenter_name\r\n            || this.props.defaultValues.tags !== this.state.tags\r\n            || this.props.defaultValues.network_connections !== this.state.network_connections\r\n            || this.props.defaultValues.power_connections !== this.state.power_connections\r\n            || this.props.defaultValues.asset_number !== this.state.asset_number\r\n            || this.props.isOffline !== this.state.datacenterIsOffline)\r\n            && !this.state.updated\r\n        ) {\r\n            console.log(\"in setting state\");\r\n            this.setState({\r\n                model: this.props.defaultValues.model,\r\n                hostname: this.props.defaultValues.hostname,\r\n                rack: this.props.defaultValues.rack,\r\n                rackU: this.props.defaultValues.rack_position,\r\n                owner: this.props.defaultValues.owner,\r\n                comment: this.props.defaultValues.comment,\r\n                datacenter_name: this.props.defaultValues.datacenter_name,\r\n                tags: this.props.defaultValues.tags,\r\n                network_connections: this.props.defaultValues.network_connections,\r\n                power_connections: this.getPowerPortFromProps(this.props.defaultValues.power_connections),\r\n                asset_number: this.props.defaultValues.asset_number,\r\n                customCPU: this.props.defaultValues.cpu,\r\n                customColor: this.props.defaultValues.display_color,\r\n                customMemory: this.props.defaultValues.memory,\r\n                customStorage: this.props.defaultValues.storage,\r\n                leftRight: this.getPowerFromProps(this.props.defaultValues.power_connections),\r\n                mount_type: this.props.defaultValues.mount_type,\r\n                blade_chassis: this.props.defaultValues.chassis_hostname,\r\n                blade_position: this.props.defaultValues.chassis_slot,\r\n                datacenterIsOffline:this.props.isOffline,\r\n                savedDatacenter: this.props.defaultValues.abbreviation,\r\n                savedRackLetter: this.props.defaultValues.rack[0],\r\n                savedRackNumber: parseInt(this.props.defaultValues.rack.substr(1)),\r\n                allThePowers: this.props.defaultValues.power_connections,\r\n            });\r\n        } else {\r\n            //this.setState({ updated: true, });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLists();\r\n\r\n        if (this.state.mount_type !== \"rackmount\") {\r\n            this.fetchPowerState();\r\n        }\r\n\r\n        if (this.checkForPDUShit()) {\r\n            this.fetchPDUState();\r\n        }\r\n    }\r\n\r\n    checkForPDUShit = () => {\r\n        if (\r\n            this.state.savedDatacenter === \"RTP1\" &&\r\n            this.state.savedRackLetter >= \"A\" &&\r\n            this.state.savedRackLetter <= \"E\" &&\r\n            this.state.savedRackNumber >= 1 &&\r\n            this.state.savedRackNumber <= 19\r\n        ) {\r\n            this.setState({ showPDU: true });\r\n            return true;\r\n        } else {\r\n            this.setState({ showPDU: false });\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getPowerFromProps = (pwrCons) => {\r\n        var pwr = [];\r\n\r\n        if (pwrCons !== undefined) {\r\n            pwrCons.map(pwrCon => {\r\n                if (pwrCon.includes(\"L\")) {\r\n                    pwr.push(\"left\");\r\n                } else if (pwrCon.includes(\"R\")) {\r\n                    pwr.push(\"right\");\r\n                } else {\r\n                    pwr.push(\"off\");\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        return pwr;\r\n    }\r\n\r\n    getPowerPortFromProps = (pwrCons) => {\r\n        var pwrPorts = [];\r\n\r\n        try {\r\n            pwrCons.map(pwrCon => {\r\n                pwrPorts.push(parseInt(pwrCon.substring(1)));\r\n            });\r\n        } catch {\r\n\r\n        }\r\n\r\n        return pwrPorts;\r\n    }\r\n\r\n    getAllBlades = () => {\r\n        var hostname = this.state.mount_type === \"chassis\" ? this.state.hostname : this.state.blade_chassis;\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getbladesbychassis\"),\r\n            {\r\n                \"chassis_hostname\": hostname,\r\n            }\r\n        ).then(\r\n            response => {\r\n                var instances = response.data.instances;\r\n                var instanceNames = [];\r\n                var bladeSlots = {};\r\n\r\n                instances.map(instance => {\r\n                    var identifier = instance.asset_number;\r\n                    instanceNames.push(identifier);\r\n                    bladeSlots[identifier] = instance.chassis_slot;\r\n                });\r\n\r\n                this.setState({ bladeList: instanceNames, bladeSlots: bladeSlots });\r\n            }\r\n        )\r\n    }\r\n\r\n    getLists = () => {\r\n        this.getModelList();\r\n        this.getOwnerList();\r\n        this.getDatacenterList();\r\n        this.getAssetList();\r\n        this.getChassisList();\r\n\r\n        if (this.state.mount_type !== \"rackmount\") {\r\n            this.getAllBlades();\r\n        }\r\n    }\r\n\r\n    getChassisList = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getchassis\")\r\n        ).then(\r\n            response => {\r\n                var instances = response.data.instances;\r\n                var instanceNames = [];\r\n\r\n                instances.map(instance => {\r\n                    instanceNames.push(instance.hostname);\r\n                });\r\n\r\n                var filteredInstances = instances.filter(instance => {\r\n                    return instance.datacenter_name === this.state.datacenter_name;\r\n                });\r\n\r\n                var filteredChassisList = filteredInstances.map(instance => {\r\n                    return instance.hostname;\r\n                });\r\n\r\n                this.setState({ filteredChassisList: filteredChassisList, chassisList: instanceNames, allInstances: instances });\r\n            }\r\n        )\r\n    }\r\n\r\n    getModelList = () => {\r\n        axios.post(\r\n            getURL(Constants.MODELS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var models = response.data.models;\r\n\r\n                    var modelNames = [];\r\n                    var networkNames = {};\r\n                    var powerPortNames = {};\r\n                    var mountType = {};\r\n\r\n                    models.map(model => {\r\n                        var modelKey = model.vendor + \" \" + model.model_number;\r\n                        modelNames.push(modelKey);\r\n                        networkNames[modelKey] = model.ethernet_ports;\r\n                        powerPortNames[modelKey] = parseInt(model.power_ports);\r\n                        mountType[modelKey] = model.mount_type;\r\n                    });\r\n\r\n                    this.setState({ loadingModels: false, modelList: modelNames, networkList: networkNames, powerPortList: powerPortNames, mountTypes: mountType });\r\n                });\r\n    }\r\n\r\n    getOwnerList = () => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, searchPath), {\r\n            \"filter\":\r\n            {\r\n                \"username\": \"\",\r\n                \"display_name\": \"\",\r\n                \"email\": \"\",\r\n                \"privilege\": {\r\n                    \"model\": false,\r\n                    \"asset\": false,\r\n                    \"datacenters\": [],\r\n                    \"power\": false,\r\n                    \"audit\": false,\r\n                    \"admin\": false\r\n                }\r\n            }\r\n        }).then(\r\n            response => {\r\n                try {\r\n                    var users = [];\r\n                    response.data.users.map(user => users.push(user.username + \"/\" + user.display_name));\r\n                    this.setState({ loadingOwners: false, ownerList: users });\r\n                } catch {\r\n                    this.setState({ loadingOwners: false })\r\n                }\r\n\r\n            });\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n                response => {\r\n                    var datacenters = [];\r\n                    response.data.datacenters.map(datacenter => {\r\n                        if (this.props.privilege.datacenters.length > 0) {\r\n                            if (this.props.privilege.datacenters[0] === \"*\" || this.props.privilege.datacenters.includes(datacenter.abbreviation) || this.props.privilege.asset || this.props.privilege.admin) {\r\n                                datacenters.push(datacenter);\r\n                            }\r\n                        }\r\n                    });\r\n                    this.setState({ loadingDatacenters: false, datacenterList: datacenters })\r\n                });\r\n\r\n    }\r\n\r\n    getAssetList = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var instances = response.data.instances;\r\n\r\n                    var hostnames = [];\r\n                    var hostToModel = {};\r\n                    instances.map(instance => {\r\n                        if (instance.hostname !== \"\") {\r\n                            hostnames.push(instance.hostname);\r\n                        }\r\n\r\n                        hostToModel[instance.hostname] = instance.model;\r\n                    })\r\n\r\n                    this.setState({ loadingHostnames: false, assetNumList: hostnames, assetNumToModelList: hostToModel }, this.availableNetworkConnections());\r\n                });\r\n    }\r\n\r\n    editAsset = (event) => {\r\n        event.preventDefault();\r\n        var json = this.createJSON();\r\n        console.log(json);\r\n        var changePlanJSON = {\r\n            \"change_plan_id\": this.props.changePlanID,\r\n            \"step\": this.props.changePlanStep,\r\n            \"action\": \"update\",\r\n            \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n            \"new_record\": json\r\n        };\r\n        var url = this.props.changePlanActive ? getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION) : getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.edit);\r\n        axios.post(\r\n            url,\r\n            this.props.changePlanActive ? changePlanJSON : json\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                    this.props.close();\r\n\r\n                    this.props.incrementChangePlanStep();\r\n                    this.setState({ statusOpen: true, statusMessage: \"Successfully saved edits\", statusSeverity: AssetConstants.SUCCESS_TOKEN });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            });\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        console.log(event.target.value);\r\n        var model = event.target.value;\r\n\r\n        if (model !== \"\") {\r\n            var ports = this.state.networkList[model];\r\n            var networkConns = {};\r\n\r\n            if (ports !== null) {\r\n                ports.map(port => {\r\n                    var defaultNetworkPort = {\r\n                        \"mac_address\": \"\",\r\n                        \"connection_hostname\": \"\",\r\n                        \"connection_port\": \"\",\r\n                    }\r\n                    networkConns[port] = defaultNetworkPort;\r\n                });\r\n            }\r\n\r\n            this.setState({ mount_type: this.state.mountTypes[model] });\r\n        } else {\r\n            var networkConns = {};\r\n        }\r\n\r\n\r\n        this.setState({ model: model, network_connections: networkConns }, () => { });\r\n    }\r\n\r\n    updateBladeChassis = (event) => {\r\n        this.setState({ blade_chassis: event.target.value });\r\n    }\r\n\r\n    updateBladePosition = (event) => {\r\n        this.setState({ blade_position: event.target.value });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value });\r\n    }\r\n\r\n    updateRack = (event) => {\r\n        var rackVal = stringToRack(event.target.value);\r\n        this.setState({ rack: rackVal }, () => { });\r\n    }\r\n\r\n    updateRackU = (event) => {\r\n        this.setState({ rackU: event.target.value }, () => { });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        this.setState({ owner: event.target.value }, () => { });\r\n    }\r\n\r\n    updateComment = (event) => {\r\n        this.setState({ comment: event.target.value }, () => { });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        var isOffline = false;\r\n\r\n        this.state.datacenterList.map(dc => {\r\n            if (dc.name === event.target.value) {\r\n                isOffline = dc.is_offline_storage;\r\n            }\r\n        });\r\n\r\n        var filteredInstances = this.state.allInstances.filter(instance => {\r\n            return instance.datacenter_name === event.target.value;\r\n        });\r\n\r\n        var filteredChassisList = filteredInstances.map(instance => {\r\n            return instance.hostname;\r\n        });\r\n\r\n        this.setState({ filteredChassisList: filteredChassisList, datacenter_name: event.target.value, datacenterIsOffline: isOffline }, () => { });\r\n    }\r\n\r\n    updateTags = (event) => {\r\n        this.setState({ tags: event.target.value }, () => { });\r\n    }\r\n\r\n    changeNetworkMacAddress = (event, port) => {\r\n        var val = stringToMac(event.target.value);\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].mac_address = val;\r\n            return { network_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    changeNetworkHostname = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].connection_hostname = val;\r\n            return { network_connections };\r\n        }, () => { this.getPortOptions(val); });\r\n    }\r\n\r\n    changeNetworkPort = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port] = (network_connections[port] === null) ? {} : network_connections[port];\r\n            network_connections[port].connection_port = val;\r\n            return { network_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    updatePowerPort = (event, port) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let power_connections = Object.assign({}, prevState.power_connections);\r\n            power_connections[port] = val;\r\n            return { power_connections };\r\n        }, () => { });\r\n    }\r\n\r\n    changePowerPortState = (event, portNum) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let leftRight = Object.assign({}, prevState.leftRight);\r\n            leftRight[portNum] = val;\r\n            return { leftRight };\r\n        }, () => { });\r\n    }\r\n\r\n    updateAssetNumber = (event) => {\r\n        this.setState({ asset_number: event.target.value }, () => { });\r\n    }\r\n\r\n    getPowerConnections = () => {\r\n        if (this.state.leftRight === null) {\r\n            return [];\r\n        }\r\n\r\n        var pwrConns = [];\r\n        var defaultValue = 1;\r\n        Object.entries(this.state.leftRight).map(([key, value]) => {\r\n            var num = (this.state.power_connections === null || this.state.power_connections[key] === undefined) ? defaultValue : this.state.power_connections[key];\r\n            switch (value) {\r\n                case left:\r\n                    pwrConns.push(\"L\" + num);\r\n                    break;\r\n                case right:\r\n                    pwrConns.push(\"R\" + num);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return pwrConns;\r\n    }\r\n\r\n    createJSON = () => {\r\n        return {\r\n            \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n            \"model\": this.state.model,\r\n            \"hostname\": this.state.hostname,\r\n            \"rack\": this.state.rack,\r\n            \"rack_position\": this.state.rackU,\r\n            \"owner\": this.state.owner.split(\"/\")[0],\r\n            \"comment\": this.state.comment,\r\n            \"datacenter_name\": this.state.datacenter_name,\r\n            \"tags\": this.state.tags,\r\n            \"network_connections\": ((this.state.network_connections === null) ? {} : this.state.network_connections),\r\n            \"power_connections\": this.getPowerConnections(),\r\n            'asset_number': this.state.asset_number,\r\n            \"chassis_hostname\": this.state.blade_chassis,\r\n            \"chassis_slot\": this.state.blade_position,\r\n            \"display_color\": this.state.customColor,\r\n            \"cpu\": this.state.customCPU,\r\n            \"memory\": this.state.customMemory,\r\n            \"storage\": this.state.customStorage,\r\n        }\r\n    }\r\n\r\n    availableNetworkConnections = () => {\r\n        var availableNetworks = false;\r\n\r\n        var assets = this.state.assetNumList;\r\n        assets.map(asset => {\r\n            if (Object.keys(this.state.networList[this.state.assetNumToModelList[asset]].length).length > 0) {\r\n                availableNetworks = true;\r\n            }\r\n        });\r\n        this.setState({ availableConnections: availableNetworks });\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.props.fetchAllAssets();\r\n    }\r\n\r\n    statusClose = () => {\r\n        this.setState({ statusOpen: false, statusMessage: \"\", statusSeverity: \"\" });\r\n    }\r\n\r\n    getPortOptions = (hostname) => {\r\n        try {\r\n            this.setState({ portOptions: this.state.networkList[this.state.assetNumToModelList[hostname]] });\r\n        } catch {\r\n\r\n        }\r\n    }\r\n\r\n    getModel = () => {\r\n        return this.state.model;\r\n    }\r\n\r\n    displayNetworks = () => {\r\n        var model = this.getModel();\r\n        return (this.state.networkList && this.state.networkList[model] && !this.state.datacenterIsOffline);\r\n    }\r\n\r\n    getNetworkConnections = () => {\r\n        return this.state.network_connections;\r\n    }\r\n\r\n    getMacValue = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].mac_address : \"\"\r\n    }\r\n\r\n    getConnectingHostname = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].connection_hostname : \"\"\r\n    }\r\n\r\n    getConnectionPort = (port) => {\r\n        var netCons = this.getNetworkConnections();\r\n        if (netCons === null) {\r\n            return \"\";\r\n        }\r\n        return netCons[port] ? netCons[port].connection_port : \"\"\r\n    }\r\n\r\n    connectionsDisabled = () => {\r\n        return this.state.hostname === \"\";\r\n    }\r\n\r\n    deleteAsset = () => {\r\n        this.setState({ showConfirmationBox: false })\r\n        axios.post(getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.delete),\r\n            { \"asset_number\": this.props.defaultValues.asset_number, \"datacenter_name\": this.props.defaultValues.datacenter_name }).then(\r\n                response => {\r\n                    if (response.data.message === \"success\") {\r\n                        this.props.close();\r\n                        this.props.fetchAllAssets();\r\n                        this.props.showStatus(true, \"success\", \"Successfully deleted asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                }\r\n            )\r\n    }\r\n\r\n    decommissionAsset = () => {\r\n        if (this.props.changePlanActive) {\r\n            var json = this.createJSON();\r\n            console.log(json);\r\n            var changePlanJSON = {\r\n                \"change_plan_id\": this.props.changePlanID,\r\n                \"step\": this.props.changePlanStep,\r\n                \"action\": \"decommission\",\r\n                \"asset_numberOriginal\": this.props.defaultValues.asset_number,\r\n                \"new_record\": json\r\n            };\r\n            var url = getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION);\r\n            axios.post(\r\n                url,\r\n                changePlanJSON\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                        this.props.incrementChangePlanStep();\r\n                        this.props.showStatus(true, \"success\", \"Successfully decommissioned asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                });\r\n        } else {\r\n            axios.post(getURL(Constants.DECOMMISSIONS_MAIN_PATH, AssetCommand.DECOMMISSION),\r\n                {\r\n                    \"asset_number\": this.props.defaultValues.asset_number,\r\n                    \"datacenter_name\": this.props.defaultValues.datacenter_name,\r\n                    \"decommission_user\": this.props.username,\r\n                }\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === \"success\") {\r\n                        this.props.close();\r\n                        this.props.fetchAllAssets();\r\n                        this.props.showStatus(true, \"success\", \"Successfully decommissioned asset\");\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    openConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: true });\r\n    }\r\n\r\n    closeConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: false })\r\n    }\r\n\r\n    cancelUpgrades = () => {\r\n        this.setState({\r\n            customizeModel: false,\r\n            customColor: this.props.defaultValues.display_colorOriginal,\r\n            customCPU: this.props.defaultValues.cpuOriginal,\r\n            customMemory: this.props.defaultValues.memoryOriginal,\r\n            customStorage: this.props.defaultValues.storageOriginal\r\n        });\r\n    }\r\n\r\n    restoreDefaults = () => {\r\n        this.setState({\r\n            customColor: this.props.defaultValues.display_colorOriginal,\r\n            customCPU: this.props.defaultValues.cpuOriginal,\r\n            customMemory: this.props.defaultValues.memoryOriginal,\r\n            customStorage: this.props.defaultValues.storageOriginal\r\n        });\r\n    }\r\n\r\n    fetchPDUState = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getPDUPowerStates\"),\r\n            {\r\n                \"rack_letter\": this.state.savedRackLetter,\r\n                \"rack_number\": this.state.savedRackNumber,\r\n                \"rack_side\": \"L\",\r\n            }\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === \"Success\") {\r\n                    var states = response.data.states;\r\n                    var currentStates = this.state.pduStates;\r\n                    currentStates[\"L\"] = states;\r\n\r\n                    this.setState({ pduStates: currentStates });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            }\r\n        );\r\n\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getPDUPowerStates\"),\r\n            {\r\n                \"rack_letter\": this.state.savedRackLetter,\r\n                \"rack_number\": this.state.savedRackNumber,\r\n                \"rack_side\": \"R\",\r\n            }\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === \"Success\") {\r\n                    var states = response.data.states;\r\n                    var currentStates = this.state.pduStates;\r\n                    currentStates[\"R\"] = states;\r\n\r\n                    this.setState({ pduStates: currentStates });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    fetchPowerState = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getAllChassisPortStates\"),\r\n            {\r\n                \"chassis\": this.state.hostname,\r\n            }\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === \"Success\") {\r\n                    var states = response.data.power_state;\r\n\r\n                    this.setState({ powerStates: states });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    bmiPowerOn = (port) => {\r\n        var portNum = this.state.mount_type == \"blade\" ? this.state.blade_position : port;\r\n        var hostname = this.state.mount_type == \"blade\" ? this.state.blade_chassis : this.state.hostname;\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"setChassisPortState\"),\r\n            {\r\n                \"chassis\": hostname,\r\n                \"chassis_port_number\": portNum,\r\n                \"power_state\": \"on\",\r\n            }\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === \"Success\") {\r\n                    this.fetchPowerState();\r\n                    this.setState({ statusOpen: true, statusMessage: \"Successfully turned on port\", statusSeverity: AssetConstants.SUCCESS_TOKEN });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    bmiPowerOff = (port) => {\r\n        var portNum = this.state.mount_type == \"blade\" ? this.state.blade_position : port;\r\n        var hostname = this.state.mount_type == \"blade\" ? this.state.blade_chassis : this.state.hostname;\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"setChassisPortState\"),\r\n            {\r\n                \"chassis\": hostname,\r\n                \"chassis_port_number\": portNum,\r\n                \"power_state\": \"off\",\r\n            }\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === \"Success\") {\r\n                    this.fetchPowerState();\r\n                    this.setState({ statusOpen: true, statusMessage: \"Successfully turned off port\", statusSeverity: AssetConstants.SUCCESS_TOKEN });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    bmiPowerCycle = async (port) => {\r\n        function wait(timeout) {\r\n            return new Promise(resolve => {\r\n                setTimeout(resolve, timeout);\r\n            });\r\n        }\r\n        this.bmiPowerOff(port);\r\n        await wait(2000);\r\n        this.bmiPowerOn(port);\r\n    }\r\n\r\n    pduPowerOn = (letter, number) => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"setPDUPowerState\"),\r\n            {\r\n                \"rack_letter\": this.state.savedRackLetter,\r\n                \"rack_number\": this.state.savedRackNumber,\r\n                \"rack_side\": letter,\r\n                \"rack_port\": parseInt(number),\r\n                \"rack_port_state\": \"on\"\r\n            }\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === \"Success\") {\r\n                    this.fetchPDUState();\r\n                    this.setState({ statusOpen: true, statusMessage: \"Successfully turned on port\", statusSeverity: AssetConstants.SUCCESS_TOKEN });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    pduPowerOff = (letter, number) => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"setPDUPowerState\"),\r\n            {\r\n                \"rack_letter\": this.state.savedRackLetter,\r\n                \"rack_number\": this.state.savedRackNumber,\r\n                \"rack_side\": letter,\r\n                \"rack_port\": parseInt(number),\r\n                \"rack_port_state\": \"off\"\r\n            }\r\n        ).then(\r\n            response => {\r\n                if (response.data.message === \"Success\") {\r\n                    this.fetchPDUState();\r\n                    this.setState({ statusOpen: true, statusMessage: \"Successfully turned off port\", statusSeverity: AssetConstants.SUCCESS_TOKEN });\r\n                } else {\r\n                    this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    pduPowerCycle = async (letter, number) => {\r\n        function wait(timeout) {\r\n            return new Promise(resolve => {\r\n                setTimeout(resolve, timeout);\r\n            });\r\n        }\r\n        this.pduPowerOff(letter, number);\r\n        await wait(2000);\r\n        this.pduPowerOn(letter, number);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span className={classes.div}>\r\n                <Paper elevation={3}>\r\n                    {this.props.isDecommissioned ? \"This asset was decommissioned by \" + this.props.defaultValues.decommission_user + \" on \" + this.props.defaultValues.timestamp : \"\"}\r\n                    {(\r\n                        (this.state.loadingDatacenters\r\n                            || this.state.loadingModels\r\n                            || this.state.loadingHostnames\r\n                            || this.state.loadingOwners)\r\n                        //&& false\r\n                    ) ? <div className={classes.progress}><CircularProgress /></div> :\r\n                        <form\r\n                            onSubmit={(event) => { this.editAsset(event) }}\r\n                            className={classes.form}\r\n                        >\r\n                            <div className={classes.dialogDiv}>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.model.Tooltip} title={this.state.inputs.model.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.model.label}\r\n                                            name={this.state.inputs.model.name}\r\n                                            value={this.props.isDecommissioned ? this.props.defaultValues.vendor + \" \" + this.props.defaultValues.model_number : this.state.model}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"select-model\"\r\n                                            options={this.state.modelList}\r\n                                            includeInputInList\r\n                                            value={this.state.model}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.model.label}\r\n                                                    name={this.state.inputs.model.name}\r\n                                                    onChange={this.updateModel}\r\n                                                    onBlur={this.updateModel}\r\n                                                    required\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.owner.Tooltip} title={this.state.inputs.owner.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.owner.label}\r\n                                            name={this.state.inputs.owner.name}\r\n                                            fullWidth\r\n                                            value={this.state.owner}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"select-owner\"\r\n                                            options={this.state.ownerList}\r\n                                            includeInputInList\r\n                                            value={this.state.owner}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.owner.label}\r\n                                                    name={this.state.inputs.owner.name}\r\n                                                    onChange={this.updateOwner}\r\n                                                    onBlur={this.updateOwner}\r\n                                                    fullWidth\r\n                                                    disabled={this.props.disabled}\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip>\r\n\r\n                                { this.state.mount_type == \"blade\" ?\r\n\r\n                                 <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.datacenter.label}\r\n                                            name={this.state.inputs.datacenter.name}\r\n                                            fullWidth\r\n                                            value={this.state.datacenter_name}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"input-datacenter\"\r\n                                            options={this.state.datacenterList.map(dc => dc.name)}\r\n                                            includeInputInList\r\n                                            value={this.state.datacenter_name}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.datacenter.label}\r\n                                                    name={this.state.inputs.datacenter.name}\r\n                                                    onChange={this.updateDatacenter}\r\n                                                    onBlur={this.updateDatacenter}\r\n\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    disabled={this.props.disabled}\r\n\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip> : null }\r\n\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.bladeChassis.Tooltip} title={this.state.inputs.bladeChassis.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-chassis\"\r\n                                        options={this.state.filteredChassisList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        value={this.state.blade_chassis}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.bladeChassis.label}\r\n                                                name={this.state.inputs.bladeChassis.name}\r\n                                                onChange={this.updateBladeChassis}\r\n                                                onBlur={this.updateBladeChassis}\r\n                                                fullWidth\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    </Tooltip> : null}\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <span style={{ display: \"inline-block\" }}>\r\n                                        <InputLabel id=\"select-blade-position-label\">Blade Position</InputLabel>\r\n                                        <Select\r\n                                            labelId=\"select-blade-position-label\"\r\n                                            id=\"select-blade-position\"\r\n                                            value={this.state.blade_position}\r\n                                            required\r\n                                            onChange={this.updateBladePosition}\r\n                                            style={{ width: \"100%\" }}\r\n                                        >\r\n                                            <MenuItem value={1}>1</MenuItem>\r\n                                            <MenuItem value={2}>2</MenuItem>\r\n                                            <MenuItem value={3}>3</MenuItem>\r\n                                            <MenuItem value={4}>4</MenuItem>\r\n                                            <MenuItem value={5}>5</MenuItem>\r\n                                            <MenuItem value={6}>6</MenuItem>\r\n                                            <MenuItem value={7}>7</MenuItem>\r\n                                            <MenuItem value={8}>8</MenuItem>\r\n                                            <MenuItem value={9}>9</MenuItem>\r\n                                            <MenuItem value={10}>10</MenuItem>\r\n                                            <MenuItem value={11}>11</MenuItem>\r\n                                            <MenuItem value={12}>12</MenuItem>\r\n                                            <MenuItem value={13}>13</MenuItem>\r\n                                            <MenuItem value={14}>14</MenuItem>\r\n                                        </Select>\r\n                                    </span> : null}\r\n\r\n                                { this.state.mount_type !== \"blade\" ?\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    {this.props.disabled ?\r\n                                        <TextField\r\n                                            label={this.state.inputs.datacenter.label}\r\n                                            name={this.state.inputs.datacenter.name}\r\n                                            fullWidth\r\n                                            value={this.state.datacenter_name}\r\n                                            disabled\r\n                                            style={{ display: \"inline-block\" }}\r\n                                        /> :\r\n                                        <Autocomplete\r\n                                            id=\"input-datacenter\"\r\n                                            options={this.state.datacenterList.map(dc => dc.name)}\r\n                                            includeInputInList\r\n                                            value={this.state.datacenter_name}\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            renderInput={params => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    label={this.state.inputs.datacenter.label}\r\n                                                    name={this.state.inputs.datacenter.name}\r\n                                                    onChange={this.updateDatacenter}\r\n                                                    onBlur={this.updateDatacenter}\r\n\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    disabled={this.props.disabled}\r\n\r\n                                                />\r\n                                            )}\r\n                                        />}\r\n                                </Tooltip> : null }\r\n\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rack.Tooltip} title={this.state.inputs.rack.description}>\r\n                                        <TextField\r\n                                            id=\"input-rack\"\r\n                                            label={this.state.inputs.rack.label}\r\n                                            name={this.state.inputs.rack.name}\r\n                                            onChange={this.updateRack}\r\n                                            value={this.state.rack}\r\n                                            required\r\n                                            fullWidth\r\n                                            disabled={this.props.disabled}\r\n                                            defaultValue={this.props.defaultValues.rack}\r\n                                        />\r\n                                    </Tooltip>}\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rackU.Tooltip} title={this.state.inputs.rackU.description}>\r\n                                        <TextField\r\n                                            id=\"input-rackU\"\r\n\r\n                                            type=\"number\"\r\n                                            InputProps={{ inputProps: { min: 1, max: 42 } }}\r\n                                            label={this.state.inputs.rackU.label}\r\n                                            name={this.state.inputs.rackU.name}\r\n                                            onChange={this.updateRackU}\r\n                                            required\r\n                                            fullWidth\r\n                                            disabled={this.props.disabled}\r\n                                            value={this.state.rackU}\r\n                                        />\r\n                                    </Tooltip>}\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.assetNum.Tooltip} title={this.state.inputs.assetNum.description}>\r\n                                    <TextField\r\n                                        id=\"input-asset-number\"\r\n\r\n                                        type=\"number\"\r\n                                        InputProps={{ inputProps: { min: 100000, max: 999999 } }}\r\n                                        label={this.state.inputs.assetNum.label}\r\n                                        name={this.state.inputs.assetNum.name}\r\n                                        onChange={this.updateAssetNumber}\r\n                                        value={this.state.asset_number}\r\n                                        required\r\n                                        fullWidth\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.hostname.Tooltip} title={this.state.inputs.hostname.description}>\r\n                                    <TextField\r\n                                        id=\"input-hostname\"\r\n\r\n                                        label={this.state.inputs.hostname.label}\r\n                                        name={this.state.inputs.hostname.name}\r\n                                        onChange={this.updateHostname}\r\n                                        fullWidth\r\n                                        disabled={this.props.disabled}\r\n                                        value={this.state.hostname}\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                <div>\r\n                                    {this.state.customizeModel || this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={\"primary\"}\r\n                                            onClick={() => this.setState({ customizeModel: true })}\r\n                                        >\r\n                                            {\"Customize Model Hardware\"}\r\n                                        </Button>\r\n                                    }\r\n                                    {this.state.customizeModel || this.props.disabled ?\r\n                                        <span>\r\n                                            <CompactPicker\r\n                                                color={this.state.customColor}\r\n                                                onChange={color => { this.setState({ customColor: color.hex }) }}\r\n                                                disabled={this.props.disabled}\r\n                                            />\r\n                                            <TextField disabled={this.props.disabled} label={\"CPU\"} value={this.state.customCPU} onChange={event => { this.setState({ customCPU: event.target.value }) }} />\r\n                                            <TextField disabled={this.props.disabled} type=\"number\" value={this.state.customMemory} label={\"Memory\"} onChange={event => { this.setState({ customMemory: event.target.value }) }} InputProps={{ inputProps: { min: 0 } }} />\r\n                                            <TextField disabled={this.props.disabled} label={\"Storage\"} value={this.state.customStorage} onChange={event => { this.setState({ customStorage: event.target.value }) }} />\r\n                                            {this.props.disabled ? null : <div className={classes.buttons}>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color={\"primary\"}\r\n                                                    onClick={() => this.restoreDefaults()}\r\n                                                >\r\n                                                    Use original Model Values\r\n                                        </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => this.cancelUpgrades()}\r\n                                                >\r\n                                                    Cancel Upgrades\r\n                                        </Button>\r\n                                            </div>}\r\n                                        </span>\r\n                                        : null}\r\n                                </div>\r\n\r\n\r\n                                {this.displayNetworks() ?\r\n                                    <span>\r\n                                        {this.state.networkList[this.getModel()].length === Object.keys(this.state.network_connections).length ?\r\n                                            this.state.networkList[this.getModel()].map(networkPort => (\r\n                                                <div>\r\n                                                    <Typography style={{ display: \"inline-block\", }}>{\"Network Port: \" + networkPort + \": \"}</Typography>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.macAddress.Tooltip} title={this.state.inputs.macAddress.description}>\r\n                                                        <TextField\r\n                                                            id=\"input-mac-address\"\r\n                                                            style={{ display: \"inline-block\" }}\r\n                                                            label={this.state.inputs.macAddress.label}\r\n                                                            name={this.state.inputs.macAddress.name}\r\n                                                            onChange={(event) => { this.changeNetworkMacAddress(event, networkPort) }}\r\n                                                            fullWidth\r\n                                                            value={this.getMacValue(networkPort)}\r\n                                                        />\r\n                                                    </Tooltip>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                        {this.props.disabled ?\r\n                                                            <TextField\r\n                                                                label={\"Connection Hostname\"}\r\n                                                                name={\"Connection Hostname\"}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                fullWidth\r\n                                                                value={this.getConnectingHostname(networkPort)}\r\n                                                                disabled\r\n                                                            /> :\r\n                                                            <Autocomplete\r\n                                                                id=\"input-network-ports-hostname\"\r\n                                                                options={this.state.assetNumList}\r\n                                                                includeInputInList\r\n                                                                onChange={(event, value) => { this.changeNetworkHostname(value, networkPort) }}\r\n                                                                required={this.getNetworkConnections()[networkPort].connection_port !== \"\"}\r\n                                                                value={this.getConnectingHostname(networkPort)}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                renderInput={params => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        label={\"Connection Hostname\"}\r\n                                                                        name={\"Connection Hostname\"}\r\n                                                                        fullWidth\r\n                                                                    />\r\n                                                                )}\r\n                                                            />}\r\n                                                    </Tooltip>\r\n                                                    <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                        {this.props.disabled ?\r\n                                                            <TextField\r\n                                                                label={\"Connection Port\"}\r\n                                                                name={\"Connection Port\"}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                fullWidth\r\n                                                                value={this.getConnectionPort(networkPort)}\r\n                                                                disabled\r\n                                                            /> :\r\n                                                            <Autocomplete\r\n                                                                id=\"input-network-ports-connection-port\"\r\n                                                                options={this.state.portOptions}\r\n                                                                includeInputInList\r\n                                                                onChange={(event, value) => { this.changeNetworkPort(value, networkPort) }}\r\n                                                                required={this.getNetworkConnections()[networkPort].connection_hostname !== \"\"}\r\n                                                                value={this.getConnectionPort(networkPort)}\r\n                                                                disabled={this.connectionsDisabled()}\r\n                                                                style={{ display: \"inline-block\" }}\r\n                                                                renderInput={params => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        label={\"Connection Port\"}\r\n                                                                        name={\"Connection Port\"}\r\n\r\n                                                                        fullWidth\r\n                                                                    />\r\n                                                                )}\r\n                                                            />}\r\n                                                    </Tooltip>\r\n                                                </div>\r\n                                            )) : null}\r\n                                    </span> : null}\r\n\r\n                                {(\r\n                                    !(this.state.powerPortList\r\n                                        && this.state.powerPortList[this.state.model])\r\n                                    || this.state.datacenterIsOffline\r\n                                ) ? null :\r\n                                    Array.from({ length: this.state.powerPortList[this.state.model] }, (_, k) => (\r\n                                        <span>\r\n                                            <Typography>{\"Power Port: \" + k}</Typography>\r\n                                            <FormControl component=\"fieldset\">\r\n                                                <RadioGroup\r\n                                                    id={\"power-port-\" + k}\r\n                                                    aria-label=\"position\"\r\n                                                    name={\"position\" + k}\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    value={(this.state.leftRight === null) ? off : (this.state.leftRight[k] === undefined ? off : this.state.leftRight[k])}\r\n                                                    onChange={(event) => { this.changePowerPortState(event, k) }}\r\n                                                    row\r\n                                                >\r\n                                                    <FormControlLabel\r\n                                                        value={left}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Left\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={right}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Right\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={off}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"No Connection\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                        disabled={this.props.disabled}\r\n                                                    />\r\n                                                </RadioGroup>\r\n                                            </FormControl>\r\n                                            {(this.state.leftRight === null) ? null : (this.state.leftRight[k] === undefined || this.state.leftRight[k] === off ? null :\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    value={(this.state.power_connections === null) ? 1 : (this.state.power_connections[k] === undefined ? 1 : this.state.power_connections[k])}\r\n                                                    InputProps={{ inputProps: { min: 1, max: 24 } }}\r\n                                                    onChange={(event) => { this.updatePowerPort(event, k) }}\r\n                                                    disabled={this.props.disabled}\r\n                                                />\r\n                                            )}\r\n                                        </span>\r\n                                    ))\r\n                                }\r\n                                <div>\r\n                                    <TextField\r\n                                        id=\"input-comment\"\r\n                                        fullWidth\r\n                                        label={this.state.inputs.comment.label}\r\n                                        name={this.state.inputs.comment.name}\r\n                                        onChange={this.updateComment}\r\n                                        multiline={true}\r\n                                        fullWidth\r\n                                        style={{ width: \"50%\" }}\r\n                                        defaultValue={this.props.defaultValues.comment}\r\n                                        disabled={this.props.disabled}\r\n                                    />\r\n                                </div>\r\n\r\n                                { this.state.mount_type !== \"rackmount\" ?\r\n                                    <List\r\n                                        className={classes.root}\r\n                                        subheader={\r\n                                            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                                            Blades\r\n                                            </ListSubheader>\r\n                                        }\r\n                                        style={{\r\n                                            maxHeight: \"30vh\",\r\n                                            overflow: \"auto\"\r\n                                        }}\r\n                                    >\r\n                                    {this.state.bladeList.map(blade => {\r\n                                        const labelId = `list-label-${blade}`;\r\n\r\n                                        return (\r\n                                        <ListItem key={blade} role={undefined} dense button>\r\n                                            <ListItemText id={labelId} primary={\"Slot \" + this.state.bladeSlots[blade] + \": Asset #\" + blade} />\r\n                                        </ListItem>\r\n                                        );\r\n                                    })}\r\n                                    </List>\r\n                                : null }\r\n\r\n                                { (this.state.mount_type === \"blade\" && this.state.blade_chassis !== undefined && this.state.blade_chassis.includes(\"BMI\")) ?\r\n                                <div className={classes.buttons}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<PowerIcon />}\r\n                                        style={{\r\n                                            backgroundColor: \"green\",\r\n                                            color: \"white\",\r\n                                            marginRight: \"5px\"\r\n                                        }}\r\n                                        onClick={this.bmiPowerOn}\r\n                                    >\r\n                                        Power On\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<PowerOffIcon />}\r\n                                        style={{\r\n                                            backgroundColor: \"black\",\r\n                                            color: \"white\",\r\n                                            marginRight: \"5px\"\r\n                                        }}\r\n                                        onClick={this.bmiPowerOff}\r\n                                    >\r\n                                        Power Off\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        startIcon={<LoopIcon />}\r\n                                        color=\"primary\"\r\n                                        onClick={this.bmiPowerCycle}\r\n                                    >\r\n                                        Power Cycle\r\n                                    </Button>\r\n                                </div>\r\n                                : null }\r\n\r\n\r\n                                { this.state.mount_type === \"chassis\" ?\r\n                                    <List\r\n                                        className={classes.root}\r\n                                        subheader={\r\n                                            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                                            Blades\r\n                                            </ListSubheader>\r\n                                        }\r\n                                        style={{\r\n                                            overflow: \"auto\"\r\n                                        }}\r\n                                    >\r\n                                    {Array.from({length: 14}, (x,i) => i).map((_, index) => {\r\n                                        const labelId = `list-label-${index}`;\r\n\r\n                                        return (\r\n                                        <ListItem key={index} role={undefined} dense button>\r\n                                            <ListItemText id={labelId} primary={(index+1).toString() + \" - \" + this.state.powerStates[(index+1).toString()]} />\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                startIcon={<PowerIcon />}\r\n                                                style={{\r\n                                                    backgroundColor: \"green\",\r\n                                                    color: \"white\",\r\n                                                    marginRight: \"5px\"\r\n                                                }}\r\n                                                onClick={() => {this.bmiPowerOn(index+1)}}\r\n                                            >\r\n                                                Power On\r\n                                            </Button>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                startIcon={<PowerOffIcon />}\r\n                                                style={{\r\n                                                    backgroundColor: \"black\",\r\n                                                    color: \"white\",\r\n                                                    marginRight: \"5px\"\r\n                                                }}\r\n                                                onClick={() => {this.bmiPowerOff(index+1)}}\r\n                                            >\r\n                                                Power Off\r\n                                            </Button>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                startIcon={<LoopIcon />}\r\n                                                color=\"primary\"\r\n                                                onClick={() => {this.bmiPowerCycle(index+1)}}\r\n                                            >\r\n                                                Power Cycle\r\n                                            </Button>\r\n                                        </ListItem>\r\n                                        );\r\n                                    })}\r\n                                    </List> : null\r\n\r\n                                }\r\n\r\n\r\n                                { this.state.showPDU ?\r\n                                    <List\r\n                                        className={classes.root}\r\n                                        subheader={\r\n                                            <ListSubheader component=\"div\" id=\"nested-list-subheader-2\">\r\n                                            PDU Ports\r\n                                            </ListSubheader>\r\n                                        }\r\n                                        style={{\r\n                                            overflow: \"auto\"\r\n                                        }}\r\n                                    >\r\n                                    {this.state.allThePowers.map(connection => {\r\n                                        const labelId = `list-label-${connection}`;\r\n\r\n                                        var state = \"\";\r\n                                        var letter = connection[0];\r\n                                        var number = connection.substr(1);\r\n                                        var states = this.state.pduStates[letter];\r\n                                        if (states !== undefined) {\r\n                                            state = states[number];\r\n                                        }\r\n\r\n                                        return (\r\n                                        <ListItem key={connection} role={undefined} dense button>\r\n                                            <ListItemText id={labelId} primary={connection + \" - \" + state} />\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                startIcon={<PowerIcon />}\r\n                                                style={{\r\n                                                    backgroundColor: \"green\",\r\n                                                    color: \"white\",\r\n                                                    marginRight: \"5px\"\r\n                                                }}\r\n                                                onClick={() => {this.pduPowerOn(letter, number)}}\r\n                                            >\r\n                                                Power On\r\n                                            </Button>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                startIcon={<PowerOffIcon />}\r\n                                                style={{\r\n                                                    backgroundColor: \"black\",\r\n                                                    color: \"white\",\r\n                                                    marginRight: \"5px\"\r\n                                                }}\r\n                                                onClick={() => {this.pduPowerOff(letter, number)}}\r\n                                            >\r\n                                                Power Off\r\n                                            </Button>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                startIcon={<LoopIcon />}\r\n                                                color=\"primary\"\r\n                                                onClick={() => {this.pduPowerCycle(letter, number)}}\r\n                                            >\r\n                                                Power Cycle\r\n                                            </Button>\r\n                                        </ListItem>\r\n                                        );\r\n                                    })}\r\n                                    </List> : null\r\n\r\n                                }\r\n\r\n\r\n\r\n                                <div className={classes.buttons}>\r\n                                    {this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={this.props.changePlanActive ? \"\" : \"primary\"}\r\n                                            type=\"submit\"\r\n                                            style={{\r\n                                                backgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\"\r\n                                            }}\r\n                                        >\r\n                                            {this.props.changePlanActive ? \"Save to Change Plan\" : \"Save\"}\r\n                                        </Button>}\r\n                                    {this.props.disabled || this.props.changePlanActive ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            onClick={() => this.openConfirmationBox()}\r\n                                        >\r\n                                            Delete\r\n                                        </Button>}\r\n                                    {this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            onClick={() => this.decommissionAsset()}\r\n                                        >\r\n                                            {this.props.changePlanActive ? \"Decommission in Change Plan\" : \"Decommission\"}\r\n                                        </Button>}\r\n                                </div>\r\n                            </div></form>}\r\n                    {this.state.statusOpen ?\r\n                        <Alert\r\n                            severity={this.state.statusSeverity}\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        this.statusClose()\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {this.state.statusMessage}\r\n                        </Alert> : null}\r\n\r\n                    <Modal\r\n                        aria-labelledby=\"transition-modal-title\"\r\n                        aria-describedby=\"transition-modal-description\"\r\n                        className={classes.modal}\r\n                        open={this.state.showConfirmationBox}\r\n                        onClose={this.closeConfirmationBox}\r\n                        closeAfterTransition\r\n                        BackdropComponent={Backdrop}\r\n                        BackdropProps={{\r\n                            timeout: 500,\r\n                        }}\r\n                    >\r\n                        <div className={classes.paper}>\r\n                            <Grid container spacing={5}>\r\n                                <Grid item xs={12}>\r\n                                    Are you sure you wish to delete?\r\n                                    </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.deleteAsset()}\r\n                                    >\r\n                                        Yes\r\n                                        </Button>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.closeConfirmationBox()}\r\n                                    >\r\n                                        No\r\n                                        </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Modal>\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(EditAsset);\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Button,\r\n    ExpansionPanel,\r\n    ExpansionPanelSummary,\r\n    ExpansionPanelDetails,\r\n    Dialog,\r\n    AppBar,\r\n    Toolbar,\r\n    Slide,\r\n    IconButton,\r\n    Grid,\r\n} from \"@material-ui/core/\"\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { Typography } from '@material-ui/core';\r\nimport NetworkGraph from \"./NetworkGraph\";\r\nimport EditAsset from \"./EditAsset\";\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst useStyles = theme => ({\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    button: {\r\n        marginLeft: theme.spacing(3),\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass DetailAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            networkNodes: null,\r\n            detailsExpanded: true,\r\n        };\r\n    }\r\n\r\n    closeDetailView = () => {\r\n        this.props.close();\r\n        this.props.fetchAllAssets();\r\n    }\r\n\r\n    toggleDetails = () => {\r\n        this.setState({ detailsExpanded: !this.state.detailsExpanded });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span>\r\n                <Dialog fullScreen open={this.props.open} TransitionComponent={Transition} padding={3}>\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={this.closeDetailView} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Asset Details\r\n                        </Typography>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    {this.props.changePlanActive ?\r\n                        <Alert severity=\"info\">\r\n                            <AlertTitle>Change Plan Mode</AlertTitle>\r\n                            <Typography>Current plan: {this.props.changePlanName}</Typography>\r\n\t\t\t\t\t\tYou are currently in change plan mode! Changes made are being logged in the plan and not actually made in the system.\r\n\t\t\t\t\t</Alert> : null}\r\n\r\n                    <EditAsset\r\n                        defaultValues={this.props.asset}\r\n                        disabled={this.props.disabled}\r\n                        close={this.props.close}\r\n                        getAssetList={this.props.getAssetList}\r\n                        privilege={this.props.privilege}\r\n                        changePlanActive={this.props.changePlanActive}\r\n                        changePlanID={this.props.changePlanID}\r\n                        changePlanStep={this.props.changePlanStep}\r\n                        incrementChangePlanStep={this.props.incrementChangePlanStep}\r\n                        username={this.props.username}\r\n                        fetchAllAssets={this.props.fetchAllAssets}\r\n                        isDecommissioned={this.props.isDecommissioned}\r\n                        showStatus={this.props.showStatus}\r\n                        isOffline={this.props.isOffline}\r\n                    />\r\n                    {this.props.asset.hostname !== undefined && this.props.asset.hostname !== \"\" ?\r\n                        <NetworkGraph\r\n                            vals={this.state.networkNodes}\r\n                            host={this.props.asset.hostname}\r\n                            assetNum={this.props.asset.asset_number}\r\n                            isDecommissioned={this.props.isDecommissioned}\r\n                            decomAsset={this.props.asset}\r\n                        /> : null}\r\n                </Dialog>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(DetailAsset);\r\n","import axios from 'axios';\r\n\r\nimport {\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    Grid,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    Switch,\r\n    TextField,\r\n    Typography,\r\n    InputLabel,\r\n} from '@material-ui/core/';\r\nimport React from 'react';\r\nimport * as Constants from '../../Constants';\r\nimport getURL from '../../helpers/functions/GetURL';\r\n\r\n\r\nclass FilterAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            datacenter: \"\",\r\n            model: \"\",\r\n            hostname: \"\",\r\n            startingLetter: \"A\",\r\n            endingLetter: \"Z\",\r\n            startingNum: 1,\r\n            endingNum: 1000,\r\n            startDate: \"\",\r\n            endDate: \"\",\r\n            user: \"\",\r\n            datacenterList:[],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.search();\r\n        this.getDatacenterList();\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n            response => { this.setState({ datacenterList: response.data.datacenters }) });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        this.setState({ datacenter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        this.setState({ model: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartingLetter = (event) => {\r\n        this.setState({ startingLetter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateEndingLetter = (event) => {\r\n        this.setState({ endingLetter: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartingNum = (event) => {\r\n        this.setState({ startingNum: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateEndingNum = (event) => {\r\n        this.setState({ endingNum: event.target.value }, () => { this.search() });\r\n    }\r\n\r\n    updateStartDate = (event) => {\r\n        console.log(event.target);\r\n        this.setState({ startDate: event.target.value }, () => this.search());\r\n    }\r\n\r\n    updateEndDate = (event) => {\r\n        this.setState({ endDate: event.target.value }, () => this.search());\r\n    }\r\n\r\n    updateUser = (event) => {\r\n        this.setState({ user: event.target.value }, () => this.search());\r\n    }\r\n\r\n    clearFilters = () => {\r\n        this.setState({\r\n            datacenter: \"\",\r\n            model: \"\",\r\n            hostname: \"\",\r\n            startingLetter: \"A\",\r\n            endingLetter: \"Z\",\r\n            startingNum: 1,\r\n            endingNum: 1000,\r\n            startDate: \"\",\r\n            endDate: \"\",\r\n            user: \"\",\r\n        })\r\n    }\r\n\r\n    search = () => {\r\n        var items = [];\r\n        try {\r\n            console.log(this.state.endingNum);\r\n            if (this.props.assetType === \"decommissioned\") {\r\n                this.props.decAssets.map(asset => {\r\n                    var startDate = new Date(this.state.startDate === \"\" || parseInt(this.state.startDate) < 2000 ? \"01/01/2001\" : this.state.startDate + \" 00:00:00\");\r\n                    var endDate = new Date(this.state.endDate === \"\" || parseInt(this.state.endDate) < 2000 ? \"12/31/2025\" : this.state.endDate + \" 23:59:59\");\r\n                    var decDate = new Date(asset.timestamp);\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && (asset.vendor + asset.model_number).toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                        && asset.rack >= this.state.startingLetter + \"\" + this.state.startingNum\r\n                        && asset.rack <= this.state.endingLetter + \"\" + this.state.endingNum\r\n                        && asset.decommission_user.toLowerCase().includes(this.state.user.toLowerCase())\r\n                        && decDate >= startDate\r\n                        && decDate <= endDate\r\n                    ) {\r\n\r\n                        items.push(asset);\r\n                    }\r\n                });\r\n            } else if (this.props.assetType == \"active\") {\r\n                console.log(this.props.allAssets);\r\n                this.props.allAssets.map(asset => {\r\n                    console.log(asset);\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && asset.model.toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                        && ((asset.rack >= this.state.startingLetter + \"\" + this.state.startingNum\r\n                        && asset.rack <= this.state.endingLetter + \"\" + this.state.endingNum) || asset.mount_type === \"blade\")\r\n                    ) {\r\n\r\n                        console.log(\"passed\");\r\n                        var offline = false;\r\n                        this.state.datacenterList.map(dc => {\r\n                            if (dc.is_offline_storage && asset.datacenter_name === dc.name) {\r\n                                offline = true;\r\n                            }\r\n                        });\r\n                        if (!offline) {\r\n                            items.push(asset);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            } else if (this.props.assetType === \"offline\") {\r\n                console.log(\"offline storage\");\r\n                this.props.allAssets.map(asset => {\r\n                    console.log(asset);\r\n                    if (\r\n                        (asset.datacenter_name.toLowerCase().includes(this.state.datacenter.toLowerCase()) || asset.abbreviation.toLowerCase().includes(this.state.datacenter.toLowerCase()))\r\n                        && asset.model.toLowerCase().includes(this.state.model.toLowerCase())\r\n                        && asset.hostname.toLowerCase().includes(this.state.hostname.toLowerCase())\r\n                    ) {\r\n                        console.log(\"in if\")\r\n                        var offline = false;\r\n                        this.state.datacenterList.map(dc => {\r\n                            console.log(dc);\r\n                            if (dc.is_offline_storage && asset.datacenter_name === dc.name) {\r\n                                offline = true;\r\n                            }\r\n                        });\r\n                        if (offline) {\r\n                            items.push(asset);\r\n                        }\r\n\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.props.updateItems(items);\r\n        } catch {\r\n            this.props.updateItems([]);\r\n        }\r\n\r\n    }\r\n\r\n    switchAssetType = (event) => {\r\n        console.log(event.target.value);\r\n        this.props.switchAssetType(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{ \"padding\": \"10px\" }}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h5\">Filter</Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"site\"\r\n                                label=\"Site\"\r\n                                name=\"site\"\r\n                                value={this.state.datacenter}\r\n                                onChange={(event) => { this.updateDatacenter(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"model\"\r\n                                label=\"Model\"\r\n                                name=\"model\"\r\n                                value={this.state.model}\r\n                                onChange={(event) => { this.updateModel(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"hostname\"\r\n                                label=\"Hostname\"\r\n                                name=\"hostname\"\r\n                                value={this.state.hostname}\r\n                                onChange={(event) => this.updateHostname(event)}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item item xs={12} sm={6} md={4} lg={3}></Grid>\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n                            <FormControl>\r\n                                <Select\r\n                                    id=\"starting-letter-selector\"\r\n                                    value={this.state.startingLetter}\r\n                                    onChange={this.updateStartingLetter}\r\n                                >\r\n                                    {Constants.RackX.map(val => (<MenuItem value={val}>{val}</MenuItem>))}\r\n                                </Select>\r\n                                <FormHelperText>Starting Letter</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={2}>\r\n                            <FormControl>\r\n                                <Select\r\n                                    id=\"ending-letter-selector\"\r\n                                    value={this.state.endingLetter}\r\n                                    onChange={this.updateEndingLetter}\r\n                                >\r\n                                    {Constants.RackX.map(val => (<MenuItem value={val}>{val}</MenuItem>))}\r\n                                </Select>\r\n                                <FormHelperText>Ending Letter</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    id=\"starting-num-selector\"\r\n                                    type=\"number\"\r\n                                    value={this.state.startingNum}\r\n                                    onChange={this.updateStartingNum}\r\n                                    InputProps={{ inputProps: { min: 1 } }}\r\n                                />\r\n                                <FormHelperText>Starting Number</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        {this.props.assetType === \"offline\" ? null :\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <FormControl>\r\n                                <TextField\r\n                                    id=\"ending-num-selector\"\r\n                                    type=\"number\"\r\n                                    value={this.state.endingNum}\r\n                                    onChange={this.updateEndingNum}\r\n                                    InputProps={{ inputProps: { min: 1 } }}\r\n                                />\r\n                                <FormHelperText>Ending Number</FormHelperText>\r\n                            </FormControl>\r\n                        </Grid>}\r\n                        <Grid item xs={2} sm={6} md={4} lg={3}>\r\n                            <InputLabel id=\"datacenter-select-label\">Asset Type</InputLabel>\r\n                            <Select\r\n                                name='asset-type'\r\n                                id=\"asset-type\"\r\n                                value={this.props.assetType}\r\n                                onChange={event => this.switchAssetType(event)}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                <MenuItem value={\"active\"}>Active</MenuItem>\r\n                                <MenuItem value={\"decommissioned\"}>Decommissioned</MenuItem>\r\n                                <MenuItem value={\"offline\"}>Offline Storage</MenuItem>\r\n                            </Select>\r\n                        </Grid>\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"user\"\r\n                                label=\"User\"\r\n                                name=\"user\"\r\n                                onChange={(event) => { this.updateUser(event) }}\r\n                                style={{ width: \"100%\" }}\r\n                            />\r\n                        </Grid> : null}\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"start-date\"\r\n                                label=\"Start Date\"\r\n                                type=\"date\"\r\n                                onChange={event => this.updateStartDate(event)}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid> : null}\r\n                        {this.props.assetType === \"decommissioned\" ? <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <TextField\r\n                                id=\"end-date\"\r\n                                label=\"End Date\"\r\n                                type=\"date\"\r\n                                onChange={event => this.updateEndDate(event)}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                            />\r\n                        </Grid> : null}\r\n                    </Grid>\r\n                </Paper>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterAsset;\r\n","export default function descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\nimport { CompactPicker } from 'react-color';\r\n\r\nimport {\r\n    TextField,\r\n    Button,\r\n    Tooltip,\r\n    CircularProgress,\r\n    withStyles,\r\n    Radio,\r\n    RadioGroup,\r\n    FormControl,\r\n    FormControlLabel,\r\n    InputLabel,\r\n    Typography,\r\n    Paper,\r\n    IconButton,\r\n    Slide,\r\n    MenuItem,\r\n    Select\r\n} from \"@material-ui/core\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport * as Constants from \"../../Constants\";\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport stringToMac from \"./functions/StringToMacAddress\";\r\nimport stringToRack from \"./functions/StringToRack\";\r\n\r\n\r\nfunction createInputs(name, label, showTooltip, description) {\r\n    return { label, name, showTooltip, description };\r\n}\r\n\r\nconst emptySearch = {\r\n    \"filter\": {\r\n        \"vendor\": null,\r\n        \"model_number\": null,\r\n        \"height\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"username\": null,\r\n        \"display_name\": null,\r\n        \"email\": null,\r\n        \"privilege\": null,\r\n        \"model\": null,\r\n        \"hostname\": null,\r\n        \"starting_rack_letter\": null,\r\n        \"ending_rack_letter\": null,\r\n        \"starting_rack_number\": null,\r\n        \"ending_rack_number\": null,\r\n        \"rack\": null,\r\n        \"rack_position\": null,\r\n        \"chassis_hostname\": null,\r\n        \"chassis_slot\": null,\r\n    },\r\n    \"datacenter_name\": \"\",\r\n}\r\n\r\nconst searchPath = \"search/\";\r\nconst left = \"left\";\r\nconst right = \"right\";\r\nconst off = \"off\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    dialogDiv: {\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        maxWidth: \"80%\",\r\n        margin: \"0 auto\",\r\n        minWidth: \"70%\",\r\n        maxHeight: \"600px\",\r\n        overflow: \"scroll\",\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n    form: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n    div: {\r\n        width: \"70%\",\r\n        margin: \"0 auto\",\r\n    },\r\n    buttons: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nclass CreateAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // next available asset number\r\n            loadingAssetNumber: true,\r\n\r\n            // model information\r\n            loadingModels: true,\r\n            modelList: [],\r\n            networkList: null,\r\n            powerPortList: null,\r\n\r\n            // owner information\r\n            loadingOwners: true,\r\n            ownerList: [],\r\n\r\n            // datacenter information\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n\r\n            // hostname information\r\n            loadingHostnames: true,\r\n            assetNumList: [],\r\n            assetNumToModelList: null,\r\n\r\n            model: \"\",\r\n            hostname: \"\",\r\n            rack: \"\",\r\n            rackU: -1,\r\n            owner: \"\",\r\n            comment: \"\",\r\n            datacenter_name: \"\",\r\n            datacenterIsOffline: false,\r\n            tags: [],\r\n            network_connections: null,\r\n            power_connections: null,\r\n            asset_number: 100000,\r\n            blade_chassis: null,\r\n            blade_position: null,\r\n            mount_type: null,\r\n\r\n            chassisList: [],\r\n            allInstances: [],\r\n            filteredChassisList: [],\r\n            mountTypes: null,\r\n\r\n            selectedConnection: null,\r\n\r\n            statusOpen: false,\r\n            statusMessage: \"\",\r\n            statusSeverity: \"\",\r\n\r\n            showModal: false,\r\n\r\n            powerPortState: null,\r\n            leftRight: null,\r\n            availableConnections: false,\r\n            portOptions: [],\r\n\r\n            canSubmit: false,\r\n\r\n            next_pair: -1,\r\n            free_left: -1,\r\n            free_right: -1,\r\n\r\n            inputs: {\r\n                \"model\": createInputs(AssetInput.MODEL, \"Model\", false, \"A reference to an existing model\"),\r\n                \"hostname\": createInputs(AssetInput.HOSTNAME, \"Hostname\", false, \"A short string compliant with RFC 1034’s definition of 'label'\"),\r\n                \"rack\": createInputs(AssetInput.RACK, \"Rack\", false, \"The rack the equipment is installed in, written as a row letter and rack number, e.g. 'B12'\"),\r\n                \"rackU\": createInputs(AssetInput.RACK_U, \"Rack U\", false, \"An integer indicating the vertical location of the bottom of the equipment (e.g. '5')\"),\r\n                \"owner\": createInputs(AssetInput.OWNER, \"Owner\", false, \"A reference to an existing user on the system who owns this equipment\"),\r\n                \"comment\": createInputs(AssetInput.COMMENT, \"Comment\", false, \"Any additional information associated with this asset\"),\r\n                \"datacenter\": createInputs(AssetInput.DATACENTER, \"Datacenter\", false, \"A reference to an existing datacenter\"),\r\n                \"macAddress\": createInputs(AssetInput.MAC_ADDRESS, \"Mac Address\", false, \"A 6-byte hexadecimal string per network port shown canonically in lower case with colon delimiters (e.g., '00:1e:c9:ac:78:aa').\\nA hostname is required to enter in this value\"),\r\n                \"networkConnections\": createInputs(AssetInput.NETWORK_CONNECTIONS, \"Port Name\", false, \"For each network port, a reference to another network port on another piece of gear\"),\r\n                \"powerConnections\": createInputs(AssetInput.POWER_CONNECTIONS, \"Power Connections\", false, \"Choice of PDU port number (0 means not plugged in)\"),\r\n                \"assetNum\": createInputs(AssetInput.ASSET_NUMBER, \"Asset Number\", false, \"A six-digit serial number unique associated with an asset.\"),\r\n                \"bladeChassis\": createInputs(AssetInput.BLADE_CHASSIS, \"Blade Chassis\", false, \"A reference to a blade chassis asset\"),\r\n                \"bladePosition\": createInputs(AssetInput.BLADE_POSITION, \"Blade Position\", false, \"An integer indicating the slot number of a blade\"),\r\n            },\r\n\r\n            customCPU: \"\",\r\n            customColor: \"\",\r\n            customMemory: \"\",\r\n            customStorage: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLists();\r\n    }\r\n\r\n    getLists = () => {\r\n        this.getModelList();\r\n        this.getOwnerList();\r\n        this.getDatacenterList();\r\n        this.getNextAssetNum();\r\n        this.getAssetList();\r\n        this.getChassisList();\r\n    }\r\n\r\n    getChassisList = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, \"getchassis\")\r\n        ).then(\r\n            response => {\r\n                var instances = response.data.instances;\r\n                var instanceNames = [];\r\n\r\n                instances.map(instance => {\r\n                    instanceNames.push(instance.hostname);\r\n                });\r\n\r\n                this.setState({ chassisList: instanceNames, allInstances: instances });\r\n            }\r\n        )\r\n    }\r\n\r\n    getModelList = () => {\r\n        axios.post(\r\n            getURL(Constants.MODELS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var models = response.data.models;\r\n\r\n                    var modelNames = [];\r\n                    var networkNames = {};\r\n                    var powerPortNames = {};\r\n                    var mountType = {};\r\n\r\n                    models.map(model => {\r\n                        var modelKey = model.vendor + \" \" + model.model_number;\r\n                        modelNames.push(modelKey);\r\n                        networkNames[modelKey] = model.ethernet_ports;\r\n                        powerPortNames[modelKey] = parseInt(model.power_ports);\r\n                        mountType[modelKey] = model.mount_type;\r\n                    });\r\n\r\n                    this.setState({ originalModels: models, loadingModels: false, modelList: modelNames, networkList: networkNames, powerPortList: powerPortNames, mountTypes: mountType });\r\n                });\r\n    }\r\n\r\n    getOwnerList = () => {\r\n        axios.post(\r\n            getURL(Constants.USERS_MAIN_PATH, searchPath), {\r\n            \"filter\":\r\n            {\r\n                \"username\": \"\",\r\n                \"display_name\": \"\",\r\n                \"email\": \"\",\r\n                \"privilege\": {\r\n                    \"model\": false,\r\n                    \"asset\": false,\r\n                    \"datacenters\": [],\r\n                    \"power\": false,\r\n                    \"audit\": false,\r\n                    \"admin\": false,\r\n                }\r\n            }\r\n        }).then(\r\n            response => {\r\n                var users = [];\r\n                response.data.users.map(user => users.push(user.username + \"/\" + user.display_name));\r\n                this.setState({ loadingOwners: false, ownerList: users });\r\n            });\r\n    }\r\n\r\n    getDatacenterList = () => {\r\n        axios.get(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, \"all/\")).then(\r\n                response => {\r\n                    var datacenters = [];\r\n                    response.data.datacenters.map(datacenter => {\r\n                        if (this.props.privilege.datacenters.length > 0) {\r\n                            if (this.props.privilege.datacenters[0] === \"*\" || this.props.privilege.datacenters.includes(datacenter.name)) {\r\n                                datacenters.push(datacenter);\r\n                            }\r\n                        } else if (this.props.privilege.asset || this.props.privilege.admin) {\r\n                            datacenters.push(datacenter);\r\n                        }\r\n                    });\r\n                    this.setState({ loadingDatacenters: false, datacenterList: datacenters })\r\n                });\r\n    }\r\n\r\n    getNextAssetNum = () => {\r\n        axios.get(\r\n            getURL(Constants.ASSETS_MAIN_PATH, AssetCommand.GET_NEXT_ASSET_NUM)).then(\r\n                response => this.setState({ loadingAssetNumber: false, asset_number: response.data.asset_number }));\r\n    }\r\n\r\n    getAssetList = () => {\r\n        axios.post(\r\n            getURL(Constants.ASSETS_MAIN_PATH, searchPath), emptySearch).then(\r\n                response => {\r\n                    var instances = response.data.instances;\r\n\r\n                    var hostnames = [];\r\n                    var hostToModel = {};\r\n                    instances.map(instance => {\r\n                        if (instance.hostname !== \"\") {\r\n                            hostnames.push(instance.hostname);\r\n                        }\r\n\r\n                        hostToModel[instance.hostname] = instance.model;\r\n                    })\r\n\r\n                    this.setState({ loadingHostnames: false, assetNumList: hostnames, assetNumToModelList: hostToModel }, this.availableNetworkConnections());\r\n                });\r\n    }\r\n\r\n    validJSON = (json) => {\r\n        return (\r\n            json.model !== \"\" &&\r\n            json.datacenter_name !== \"\" &&\r\n            (json.rack !== \"\" || this.state.mount_type == \"blade\") &&\r\n            (json.rack_position !== -1 || this.state.mount_type == \"blade\") &&\r\n            json.asset_number >= 100000 &&\r\n            json.asset_number <= 999999\r\n        );\r\n    }\r\n\r\n    createAsset = (event) => {\r\n        event.preventDefault();\r\n\r\n        var json = this.createJSON();\r\n        var changePlanJSON = {\r\n            \"change_plan_id\": this.props.changePlanID,\r\n            \"step\": this.props.changePlanStep,\r\n            \"action\": \"create\",\r\n            \"asset_numberOriginal\": \"\",\r\n            \"new_record\": json\r\n        };\r\n        var url = this.props.changePlanActive ? getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE_ACTION) : getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.create);\r\n\r\n        if (true) {\r\n            axios.post(\r\n                url,\r\n                this.props.changePlanActive ? changePlanJSON : json\r\n            ).then(\r\n                response => {\r\n                    if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n                        this.props.incrementChangePlanStep();\r\n                        this.props.showStatus(true, \"success\", \"Successfully created asset\");\r\n                        this.closeModal();\r\n                    } else {\r\n                        this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    updateModel = (event) => {\r\n        var model = event.target.value;\r\n\r\n        if (model !== \"\") {\r\n            var ports = this.state.networkList[model];\r\n            var networkConns = {};\r\n            if (ports !== null && ports !== undefined) {\r\n                ports.map(port => {\r\n                    var defaultNetworkPort = {\r\n                        \"mac_address\": \"\",\r\n                        \"connection_hostname\": \"\",\r\n                        \"connection_port\": \"\",\r\n                    }\r\n                    networkConns[port] = defaultNetworkPort;\r\n                });\r\n            }\r\n\r\n            this.setState({ mount_type: this.state.mountTypes[model] });\r\n        } else {\r\n            var networkConns = {};\r\n        }\r\n\r\n\r\n        this.setState({ model: model, network_connections: networkConns }, () => { this.validateForm(); this.restoreDefaults() });\r\n    }\r\n\r\n    updateBladeChassis = (event) => {\r\n        this.setState({ blade_chassis: event.target.value });\r\n    }\r\n\r\n    updateBladePosition = (event) => {\r\n        this.setState({ blade_position: event.target.value });\r\n    }\r\n\r\n    updateHostname = (event) => {\r\n        this.setState({ hostname: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateRack = (event) => {\r\n        var rackVal = stringToRack(event.target.value);\r\n        this.setState({ rack: rackVal }, () => { this.validateForm() });\r\n\r\n        if (rackVal.length === 2 && this.state.datacenter_name !== \"\") {\r\n            axios.post(getURL(Constants.RACKS_MAIN_PATH, \"nextPDU/\"), {\r\n                \"rack\": rackVal,\r\n                \"datacenter_name\": this.state.datacenter_name,\r\n            }).then(response => {\r\n                console.log(this.state.power_connections);\r\n                try {\r\n                    var firstFree = response.data.free_left;\r\n                    var pwrLst = [];\r\n\r\n                    this.state.power_connections.map((powerPort, index) => {\r\n                        if (index % 2 === 0 && index < this.state.power_connections.length - 1) {\r\n                            console.log(index);\r\n                            pwrLst[index] = firstFree[index];\r\n                            pwrLst[index + 1] = firstFree[index + 1];\r\n                        } else {\r\n                            console.log(\"passing\");\r\n                        }\r\n                    });\r\n                } catch (exception) {\r\n                    console.log(exception);\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    updateRackU = (event) => {\r\n        this.setState({ rackU: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        this.setState({ owner: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateComment = (event) => {\r\n        this.setState({ comment: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateDatacenter = (event) => {\r\n        var isOffline = false;\r\n\r\n        this.state.datacenterList.map(dc => {\r\n            if (dc.name === event.target.value) {\r\n                isOffline = dc.is_offline_storage;\r\n            }\r\n        });\r\n\r\n        var filteredInstances = this.state.allInstances.filter(instance => {\r\n            return instance.datacenter_name === event.target.value;\r\n        });\r\n\r\n        var filteredChassisList = filteredInstances.map(instance => {\r\n            return instance.hostname;\r\n        });\r\n\r\n        this.setState({ filteredChassisList: filteredChassisList, datacenter_name: event.target.value, datacenterIsOffline: isOffline }, () => { this.validateForm() });\r\n    }\r\n\r\n    changeNetworkMacAddress = (event, port) => {\r\n        var val = stringToMac(event.target.value);\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].mac_address = val;\r\n            return { network_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    changeNetworkHostname = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port].connection_hostname = val;\r\n            return { network_connections };\r\n        }, () => { this.getPortOptions(val); this.validateForm() });\r\n    }\r\n\r\n    changeNetworkPort = (value, port) => {\r\n        var val = value === undefined ? \"\" : value;\r\n\r\n        this.setState(prevState => {\r\n            let network_connections = Object.assign({}, prevState.network_connections);\r\n            network_connections[port] = (network_connections[port] === null) ? {} : network_connections[port];\r\n            network_connections[port].connection_port = val;\r\n            return { network_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    updatePowerPort = (event, port) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let power_connections = Object.assign({}, prevState.power_connections);\r\n            power_connections[port] = val;\r\n            return { power_connections };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    changePowerPortState = (event, portNum) => {\r\n        var val = event.target.value;\r\n\r\n        this.setState(prevState => {\r\n            let leftRight = Object.assign({}, prevState.leftRight);\r\n            leftRight[portNum] = val;\r\n            return { leftRight };\r\n        }, () => { this.validateForm() });\r\n    }\r\n\r\n    updateAssetNumber = (event) => {\r\n        this.setState({ asset_number: event.target.value }, () => { this.validateForm() });\r\n    }\r\n\r\n    getPowerConnections = () => {\r\n        if (this.state.leftRight === null) {\r\n            return [];\r\n        }\r\n\r\n        var pwrConns = [];\r\n        var defaultValue = 1;\r\n        Object.entries(this.state.leftRight).map(([key, value]) => {\r\n            var num = this.state.power_connections === null ? defaultValue : this.state.power_connections[key];\r\n            switch (value) {\r\n                case left:\r\n                    pwrConns.push(\"L\" + num);\r\n                    break;\r\n                case right:\r\n                    pwrConns.push(\"R\" + num);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return pwrConns;\r\n    }\r\n\r\n    createJSON = () => {\r\n        return {\r\n            \"model\": this.state.model,\r\n            \"hostname\": this.state.hostname,\r\n            \"rack\": this.state.rack,\r\n            \"rack_position\": this.state.rackU,\r\n            \"owner\": this.state.owner.split(\"/\")[0],\r\n            \"comment\": this.state.comment,\r\n            \"datacenter_name\": this.state.datacenter_name,\r\n            \"tags\": this.state.tags,\r\n            \"network_connections\": (this.state.network_connections === null) ? {} : this.state.network_connections,\r\n            \"power_connections\": this.getPowerConnections(),\r\n            'asset_number': this.state.asset_number,\r\n            \"chassis_hostname\": this.state.blade_chassis,\r\n            \"chassis_slot\": this.state.blade_position,\r\n            \"cpu\": this.state.customCPU,\r\n            \"display_color\": this.state.customColor,\r\n            \"memory\": this.state.customMemory,\r\n            \"storage\": this.state.customStorage,\r\n        }\r\n    }\r\n\r\n    availableNetworkConnections = () => {\r\n        var availableNetworks = false;\r\n\r\n        var assets = this.state.assetNumList;\r\n        assets.map(asset => {\r\n            if (Object.keys(this.state.networList[this.state.assetNumToModelList[asset]].length).length > 0) {\r\n                availableNetworks = true;\r\n            }\r\n        });\r\n        this.setState({ availableConnections: availableNetworks });\r\n    }\r\n\r\n    showModal = () => {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.props.fetchAllAssets();\r\n        this.props.close();\r\n    }\r\n\r\n    statusClose = () => {\r\n        this.setState({ statusOpen: false, statusMessage: \"\", statusSeverity: \"\" });\r\n    }\r\n\r\n    validateForm = () => {\r\n        this.setState({ canSubmit: this.validJSON(this.createJSON()) });\r\n    }\r\n\r\n    getPortOptions = (hostname) => {\r\n        try {\r\n            this.setState({ portOptions: this.state.networkList[this.state.assetNumToModelList[hostname]] });\r\n        } catch { }\r\n    }\r\n\r\n    cancelUpgrades = () => {\r\n        this.setState({ customizeModel: false }, () => { this.restoreDefaults() });\r\n    }\r\n\r\n    restoreDefaults = () => {\r\n        var currModel = null;\r\n        this.state.originalModels.map(model => {\r\n            if (this.state.model === model.vendor + \" \" + model.model_number) {\r\n                currModel = model;\r\n            }\r\n        });\r\n\r\n        if (currModel !== null && currModel !== undefined) {\r\n            this.setState({\r\n                customColor: currModel.display_color === null ? \"#A52A2A\" : currModel.display_color,\r\n                customCPU: currModel.cpu,\r\n                customMemory: currModel.memory,\r\n                customStorage: currModel.storage,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                customColor: \"#A52A2A\",\r\n                customCPU: \"\",\r\n                customMemory: \"\",\r\n                customStorage: \"\",\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <span className={classes.div}>\r\n                <Paper elevation={3}>\r\n                    {(\r\n                        (this.state.loadingAssetNumber\r\n                            || this.state.loadingDatacenters\r\n                            || this.state.loadingModels\r\n                            || this.state.loadingHostnames\r\n                            || this.state.loadingOwners)\r\n                        //&& false\r\n                    ) ? <div className={classes.progress}><CircularProgress /></div> :\r\n                        <form\r\n                            onSubmit={(event) => { this.createAsset(event) }}\r\n                            className={classes.form}\r\n                        >\r\n                            <div className={classes.dialogDiv}>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.model.Tooltip} title={this.state.inputs.model.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-model\"\r\n                                        options={this.state.modelList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        onSelect={this.updateModel}\r\n                                        onChange={this.updateModel}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.model.label}\r\n                                                name={this.state.inputs.model.name}\r\n                                                onChange={this.updateModel}\r\n                                                onBlur={this.updateModel}\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n                                { this.state.mount_type === \"blade\" ?\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    <Autocomplete\r\n                                        id=\"input-datacenter\"\r\n                                        options={this.state.datacenterList.map(datacenter => datacenter.name)}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.datacenter.label}\r\n                                                name={this.state.inputs.datacenter.name}\r\n                                                onChange={(event) => { this.updateDatacenter(event) }}\r\n                                                onBlur={this.updateDatacenter}\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip> : null }\r\n\r\n                                {this.state.mount_type === \"blade\" ?\r\n                                    <div>\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.bladeChassis.Tooltip} title={this.state.inputs.bladeChassis.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-chassis\"\r\n                                        options={this.state.filteredChassisList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.bladeChassis.label}\r\n                                                name={this.state.inputs.bladeChassis.name}\r\n                                                onChange={this.updateBladeChassis}\r\n                                                onBlur={this.updateBladeChassis}\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    /></Tooltip>\r\n                                    <InputLabel id=\"select-blade-position-label\">Blade Position</InputLabel>\r\n                                        <Tooltip placement=\"top\" open={this.state.inputs.bladePosition.Tooltip} title={this.state.inputs.bladePosition.description}>\r\n                                        <Select\r\n                                            labelId=\"select-blade-position-label\"\r\n                                            id=\"select-blade-position\"\r\n                                            value={this.state.blade_position}\r\n                                            required={true}\r\n                                            onChange={this.updateBladePosition}\r\n                                            style={{ display: \"inline-block\", width: \"20%\" }}\r\n                                        >\r\n                                            <MenuItem value={1}>1</MenuItem>\r\n                                            <MenuItem value={2}>2</MenuItem>\r\n                                            <MenuItem value={3}>3</MenuItem>\r\n                                            <MenuItem value={4}>4</MenuItem>\r\n                                            <MenuItem value={5}>5</MenuItem>\r\n                                            <MenuItem value={6}>6</MenuItem>\r\n                                            <MenuItem value={7}>7</MenuItem>\r\n                                            <MenuItem value={8}>8</MenuItem>\r\n                                            <MenuItem value={9}>9</MenuItem>\r\n                                            <MenuItem value={10}>10</MenuItem>\r\n                                            <MenuItem value={11}>11</MenuItem>\r\n                                            <MenuItem value={12}>12</MenuItem>\r\n                                            <MenuItem value={13}>13</MenuItem>\r\n                                            <MenuItem value={14}>14</MenuItem>\r\n                                        </Select></Tooltip>\r\n                                    </div>\r\n                                    : null}\r\n\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.owner.Tooltip} title={this.state.inputs.owner.description}>\r\n                                    <Autocomplete\r\n                                        id=\"select-owner\"\r\n                                        options={this.state.ownerList}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.owner.label}\r\n                                                name={this.state.inputs.owner.name}\r\n                                                onChange={this.updateOwner}\r\n                                                onBlur={this.updateOwner}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip>\r\n                                { this.state.mount_type !== \"blade\" ?\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.datacenter.Tooltip} title={this.state.inputs.datacenter.description}>\r\n                                    <Autocomplete\r\n                                        id=\"input-datacenter\"\r\n                                        options={this.state.datacenterList.map(datacenter => datacenter.name)}\r\n                                        includeInputInList\r\n                                        style={{ display: \"inline-block\" }}\r\n                                        renderInput={params => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                label={this.state.inputs.datacenter.label}\r\n                                                name={this.state.inputs.datacenter.name}\r\n                                                onChange={(event) => { this.updateDatacenter(event) }}\r\n                                                onBlur={this.updateDatacenter}\r\n                                                required\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Tooltip> : null }\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rack.Tooltip} title={this.state.inputs.rack.description}>\r\n                                        <TextField\r\n                                            id=\"input-rack\"\r\n                                            style={{ display: \"inline-block\" }}\r\n                                            label={this.state.inputs.rack.label}\r\n                                            name={this.state.inputs.rack.name}\r\n                                            onChange={this.updateRack}\r\n                                            value={this.state.rack}\r\n                                            required\r\n\r\n                                        />\r\n                                    </Tooltip>}\r\n                                {(this.state.datacenterIsOffline || this.state.mount_type == \"blade\") ? null :\r\n                                    <Tooltip placement=\"top\" open={this.state.inputs.rackU.Tooltip} title={this.state.inputs.rackU.description}>\r\n                                        <TextField\r\n                                            id=\"input-rackU\"\r\n\r\n                                            type=\"number\"\r\n                                            InputProps={{ inputProps: { min: 1, max: 42 } }}\r\n                                            label={this.state.inputs.rackU.label}\r\n                                            name={this.state.inputs.rackU.name}\r\n                                            onChange={this.updateRackU}\r\n                                            required\r\n\r\n                                        />\r\n                                    </Tooltip>}\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.assetNum.Tooltip} title={this.state.inputs.assetNum.description}>\r\n                                    <TextField\r\n                                        id=\"input-asset-number\"\r\n\r\n                                        type=\"number\"\r\n                                        InputProps={{ inputProps: { min: 100000, max: 999999 } }}\r\n                                        label={this.state.inputs.assetNum.label}\r\n                                        name={this.state.inputs.assetNum.name}\r\n                                        onChange={this.updateAssetNumber}\r\n                                        value={this.state.asset_number}\r\n                                        required\r\n\r\n                                    />\r\n                                </Tooltip>\r\n                                <Tooltip placement=\"top\" open={this.state.inputs.hostname.Tooltip} title={this.state.inputs.hostname.description}>\r\n                                    <TextField\r\n                                        id=\"input-hostname\"\r\n\r\n                                        label={this.state.inputs.hostname.label}\r\n                                        name={this.state.inputs.hostname.name}\r\n                                        onChange={this.updateHostname}\r\n\r\n                                    />\r\n                                </Tooltip>\r\n\r\n                                <div>\r\n                                    {this.state.customizeModel || this.props.disabled ? null :\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color={\"primary\"}\r\n                                            onClick={() => this.setState({ customizeModel: true })}\r\n                                        >\r\n                                            {\"Customize Model Hardware\"}\r\n                                        </Button>\r\n                                    }\r\n                                    {this.state.customizeModel || this.props.disabled ?\r\n                                        <span>\r\n                                            <CompactPicker\r\n                                                color={this.state.customColor}\r\n                                                onChange={color => { try { this.setState({ customColor: color.hex }) } catch { this.setState({ customColor: \"#A52A2A\" }) } }}\r\n                                                disabled={this.props.disabled}\r\n                                            />\r\n                                            <TextField disabled={this.props.disabled} label={\"CPU\"} value={this.state.customCPU} onChange={event => { this.setState({ customCPU: event.target.value }) }} />\r\n                                            <TextField disabled={this.props.disabled} type=\"number\" value={this.state.customMemory} label={\"Memory\"} onChange={event => { this.setState({ customMemory: event.target.value }) }} InputProps={{ inputProps: { min: 0 } }} />\r\n                                            <TextField disabled={this.props.disabled} label={\"Storage\"} value={this.state.customStorage} onChange={event => { this.setState({ customStorage: event.target.value }) }} />\r\n                                            {this.props.disabled ? null : <div className={classes.buttons}>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color={\"primary\"}\r\n                                                    onClick={() => this.restoreDefaults()}\r\n                                                >\r\n                                                    Use original Model Values\r\n                                        </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"secondary\"\r\n                                                    onClick={() => this.cancelUpgrades()}\r\n                                                >\r\n                                                    Cancel Upgrades\r\n                                        </Button>\r\n                                            </div>}\r\n                                        </span>\r\n                                        : null}\r\n                                </div>\r\n\r\n                                {!(this.state.networkList && this.state.networkList[this.state.model]) || this.state.datacenterIsOffline ? null :\r\n                                    this.state.networkList[this.state.model].map(networkPort => (\r\n                                        <div>\r\n                                            <Typography style={{ display: \"inline-block\", }}>{\"Network Port: \" + networkPort + \": \"}</Typography>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.macAddress.Tooltip} title={this.state.inputs.macAddress.description}>\r\n                                                <TextField\r\n                                                    id=\"input-mac-address\"\r\n                                                    label={this.state.inputs.macAddress.label}\r\n                                                    name={this.state.inputs.macAddress.name}\r\n                                                    onChange={(event) => { this.changeNetworkMacAddress(event, networkPort) }}\r\n                                                    value={(this.state.network_connections !== null && this.state.network_connections[networkPort] !== undefined) ? this.state.network_connections[networkPort].mac_address : \"\"}\r\n                                                />\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                <Autocomplete\r\n                                                    id=\"input-network-ports\"\r\n                                                    options={this.state.assetNumList}\r\n                                                    includeInputInList\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    onChange={(event, value) => { this.changeNetworkHostname(value, networkPort) }}\r\n                                                    required={this.state.network_connections[networkPort].connection_port !== \"\"}\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={\"Connection Hostname\"}\r\n                                                            name={\"Connection Hostname\"}\r\n\r\n\r\n                                                            disabled={this.state.hostname === \"\"}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Tooltip>\r\n                                            <Tooltip placement=\"top\" open={this.state.inputs.networkConnections.Tooltip} title={this.state.inputs.networkConnections.description}>\r\n                                                <Autocomplete\r\n                                                    id=\"input-network-ports\"\r\n                                                    options={this.state.portOptions}\r\n                                                    includeInputInList\r\n                                                    style={{ display: \"inline-block\" }}\r\n                                                    onChange={(event, value) => { this.changeNetworkPort(value, networkPort) }}\r\n                                                    renderInput={params => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            label={\"Connection Port\"}\r\n                                                            name={\"Connection Port\"}\r\n                                                            required={this.state.network_connections[networkPort].connection_hostname !== \"\"}\r\n                                                            disabled={this.state.hostname === \"\"}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </Tooltip>\r\n                                        </div>\r\n                                    ))}\r\n\r\n                                {(\r\n                                    !(this.state.powerPortList\r\n                                        && this.state.powerPortList[this.state.model])\r\n                                ) || this.state.datacenterIsOffline\r\n                                    ? null :\r\n                                    Array.from({ length: this.state.powerPortList[this.state.model] }, (_, k) => (\r\n                                        <span>\r\n                                            <Typography>{\"Power Port: \" + k}</Typography>\r\n                                            <FormControl component=\"fieldset\">\r\n                                                <RadioGroup\r\n                                                    id={\"power-port-\" + k}\r\n                                                    aria-label=\"position\"\r\n                                                    name={\"position\" + k}\r\n                                                    value={(this.state.leftRight === null) ? off : (this.state.leftRight[k] === undefined ? off : this.state.leftRight[k])}\r\n                                                    onChange={(event) => { this.changePowerPortState(event, k) }}\r\n                                                    row\r\n                                                >\r\n                                                    <FormControlLabel\r\n                                                        value={left}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Left\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={right}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"Right\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        value={off}\r\n                                                        control={<Radio color=\"primary\" />}\r\n                                                        label=\"No Connection\"\r\n                                                        labelPlacement=\"bottom\"\r\n                                                    />\r\n                                                </RadioGroup>\r\n                                            </FormControl>\r\n                                            {(this.state.leftRight === null) ? null : (this.state.leftRight[k] === undefined || this.state.leftRight[k] === off ? null :\r\n                                                <TextField\r\n                                                    type=\"number\"\r\n                                                    value={(this.state.power_connections === null) ? 1 : (this.state.power_connections[k] === undefined ? 1 : this.state.power_connections[k])}\r\n                                                    InputProps={{ inputProps: { min: 1, max: 24 } }}\r\n                                                    onChange={(event) => { this.updatePowerPort(event, k) }}\r\n                                                />\r\n                                            )}\r\n                                        </span>\r\n                                    ))\r\n                                }\r\n\r\n                                <div>\r\n                                    <TextField\r\n                                        id=\"input-comment\"\r\n                                        style={{ width: \"50%\" }}\r\n                                        label={this.state.inputs.comment.label}\r\n                                        name={this.state.inputs.comment.name}\r\n                                        onChange={this.updateComment}\r\n                                        multiline={true}\r\n\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className={classes.buttons}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        type=\"submit\"\r\n                                        color={this.props.changePlanActive ? \"\" : \"primary\"}\r\n                                        style={{\r\n                                            backgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\"\r\n                                        }}\r\n                                    >\r\n                                        {this.props.changePlanActive ? \"Create in Change Plan\" : \"Create\"}\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={this.closeModal}\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                </div>\r\n\r\n                            </div></form>}\r\n                    {this.state.statusOpen ?\r\n                        <Alert\r\n                            severity={this.state.statusSeverity}\r\n                            action={\r\n                                <IconButton\r\n                                    aria-label=\"close\"\r\n                                    color=\"inherit\"\r\n                                    size=\"small\"\r\n                                    onClick={() => {\r\n                                        this.statusClose()\r\n                                    }}\r\n                                >\r\n                                    <CloseIcon fontSize=\"inherit\" />\r\n                                </IconButton>\r\n                            }\r\n                        >\r\n                            {this.state.statusMessage}\r\n                        </Alert> : null}\r\n                </Paper>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(CreateAsset);\r\n","import React from \"react\";\r\n\r\nimport axios from 'axios';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport {\r\n\tModal,\r\n\tTypography,\r\n\tFade,\r\n\tBackdrop,\r\n\tGrid,\r\n\tButton,\r\n\tPaper,\r\n\twithStyles,\r\n} from \"@material-ui/core/\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport { AssetCommand } from \"../enums/AssetCommands.ts\";\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\"\r\n\r\n\r\nconst useStyles = theme => ({\r\n\tgrid: {\r\n\t\tbackgroundColor: theme.palette.background.paper,\r\n\t\tboxShadow: theme.shadows[5],\r\n\t\tpadding: theme.spacing(2, 4, 3),\r\n\t\twidth: \"50%\"\r\n\t},\r\n})\r\n\r\nclass ImportAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n            importedFile:null,\r\n\r\n            showStatus:false,\r\n            statusSeverity:\"\",\r\n            statusMessage:\"\",\r\n\t\t};\r\n\t}\r\n\r\n\tsetFile = (file) => {\r\n\t\tthis.setState({ importedFile: file });\r\n\t}\r\n\r\n\tchooseFile = (event) => {\r\n        this.setState({ importedFile: event.target.files[0] })\r\n    }\r\n\r\n\tuploadFile = () => {\r\n        const data = new FormData();\r\n        data.append('file', this.state.importedFile);\r\n        this.sendUploadedFile(data);\r\n    }\r\n\r\n\tcloseImport = () => {\r\n\t\tthis.setState({ importedFile: null }, () => { this.props.close() });\r\n\t}\r\n\r\n\tsendUploadedFile = (data) => {\r\n        var baseURL = this.props.connections ? \"networkConnections/\" : AssetConstants.ASSETS_MAIN_PATH;\r\n        axios.post(\r\n            getURL(baseURL, AssetCommand.UPLOAD_FILE), data\r\n        ).then(response => {\r\n            if (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n\t\t\t\tthis.setState({ showStatus: true, statusMessage: response.data.summary, statusSeverity:AssetConstants.SUCCESS_TOKEN, showImport: false,})\r\n\t\t\t\tthis.props.refresh();\r\n                this.props.close();\r\n            } else {\r\n                this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity:AssetConstants.ERROR_TOKEN })\r\n            }\r\n        });\r\n    }\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ showStatus: false, statusMessage:\"\", statusSeverity:\"\" });\r\n    }\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n            <div>\r\n\t\t\t<Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.props.open}\r\n                onClose={this.closeImport}\r\n                closeAfterTransition\r\n            >\r\n                    <Backdrop\r\n                        open={this.props.open}\r\n                    >\r\n                        <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={9}>\r\n                                <Typography variant=\"h5\">Import Assets</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                                <Button\r\n                                    onClick={this.closeImport}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid container item direction=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype='file'\r\n\t\t\t\t\t\t\t\t\taccept=\".csv\"\r\n\t\t\t\t\t\t\t\t\tonChange={this.chooseFile}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n\t\t\t\t\t\t\t\t\tstyle={{width: \"40%\"}}\r\n\t\t\t\t\t\t\t\t\tonClick={() => {this.uploadFile()}}\r\n                                >\r\n                                    Upload File\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Backdrop>\r\n            </Modal>\r\n            <StatusDisplay\r\n            open={this.state.showStatus}\r\n            severity={this.state.statusSeverity}\r\n            closeStatus={this.closeShowStatus}\r\n            message={this.state.statusMessage}\r\n        />\r\n        </div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(ImportAsset);\r\n","import React from \"react\";\r\n\r\nimport {\r\n\tGrid,\r\n\tTypography,\r\n\tButton,\r\n\tPaper,\r\n\tDialog,\r\n\twithStyles,\r\n\tAppBar,\r\n\tToolbar,\r\n\tIconButton,\r\n\tSlide\r\n} from \"@material-ui/core/\";\r\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport CreateAsset from \"./CreateAsset\";\r\nimport ImportAsset from \"./ImportAsset\";\r\n\r\nconst useStyles = theme => ({\r\n\tappBar: {\r\n\t  position: 'relative',\r\n\t},\r\n\ttitle: {\r\n\t  marginLeft: theme.spacing(2),\r\n\t  flex: 1,\r\n\t},\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n  });\r\n\r\nclass AddAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tshowCreate: false,\r\n\t\t\tshowImport: false,\r\n\t\t\tshowConnectionsImport: false,\r\n\t\t};\r\n\t}\r\n\r\n\topenImport = () => {\r\n\t\tthis.setState({ showImport: true });\r\n\t}\r\n\r\n\tcloseImport = () => {\r\n\t\tthis.setState({ showImport: false });\r\n\t}\r\n\r\n\topenConnectionsImport = () => {\r\n\t\tthis.setState({ showConnectionsImport: true });\r\n\t}\r\n\r\n\tcloseConnectionsImport = () => {\r\n\t\tthis.setState({ showConnectionsImport: false });\r\n\t}\r\n\r\n\topenCreate = () => {\r\n\t\tthis.setState({ showCreate: true });\r\n\t}\r\n\r\n\tcloseCreate = () => {\r\n\t\tthis.setState({ showCreate: false });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tcontainer\r\n\t\t\t\t\t\tspacing={2}\r\n\t\t\t\t\t\tdirection=\"row\"\r\n\t\t\t\t\t\tjustify=\"flex-start\"\r\n\t\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\t\tstyle={{\"padding\": \"10px\"}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tvariant=\"h5\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tAdd\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t\t\t\tbackground: \"green\",\r\n\t\t\t\t\t\t\t\t\tcolor: \"white\"\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonClick={this.openCreate}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\tOr\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<CloudUploadIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => {this.openImport()} }\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tImport Assets\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<CloudUploadIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => {this.openConnectionsImport()} }\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tImport Network Connections\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Paper>\r\n\r\n\t\t\t\t<Dialog fullScreen open={this.state.showCreate} onClose={this.closeCreate} TransitionComponent={Transition} padding={3}>\r\n\t\t\t\t\t<AppBar className={classes.appBar}>\r\n\t\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" onClick={this.closeCreate} aria-label=\"close\">\r\n\t\t\t\t\t\t\t\t<CloseIcon />\r\n\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t<Typography variant=\"h6\" className={classes.title}>\r\n\t\t\t\t\t\t\t\tCreate Asset\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t</AppBar>\r\n\t\t\t\t\t<CreateAsset\r\n\t\t\t\t\t\tclose={this.closeCreate}\r\n\t\t\t\t\t\tgetAssetList={this.props.getAssetList}\r\n\t\t\t\t\t\tshowStatus={this.props.showStatus}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\tfetchAllAssets={this.props.fetchAllAssets}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Dialog>\r\n\r\n\t\t\t\t<ImportAsset\r\n\t\t\t\t\topen={this.state.showImport}\r\n\t\t\t\t\tclose={this.closeImport}\r\n\t\t\t\t\trefresh={this.props.fetchAllAssets}\r\n\t\t\t\t\tconnections={false}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<ImportAsset\r\n\t\t\t\t\topen={this.state.showConnectionsImport}\r\n\t\t\t\t\tclose={this.closeConnectionsImport}\r\n\t\t\t\t\trefresh={this.props.fetchAllAssets}\r\n\t\t\t\t\tconnections={true}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(AddAsset);\r\n","// React\r\nimport React from 'react';\r\nimport axios from \"axios\";\r\nimport { CSVLink } from \"react-csv\";\r\n\r\n// Core\r\nimport {\r\n\tButton,\r\n\tPaper,\r\n\tGrid,\r\n    Typography,\r\n    Modal,\r\n    Fade,\r\n    Backdrop,\r\n    withStyles,\r\n    TextField\r\n} from '@material-ui/core/';\r\n\r\n// Icons\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\n\r\n// Helpers\r\nimport { AssetCommand } from '../enums/AssetCommands.ts'\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        width: \"100%\",\r\n      },\r\n      grid: {\r\n          backgroundColor: theme.palette.background.paper,\r\n          boxShadow: theme.shadows[5],\r\n          padding: theme.spacing(2, 4, 3),\r\n          width: \"50%\"\r\n      },\r\n      progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n      },\r\n});\r\n\r\nclass ExportAsset extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            csvData: \"\",\r\n            changePlanModal: false,\r\n            changeDescriptionModal: false,\r\n            canCreateChangePlans: false,\r\n\t\t};\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ canCreateChangePlans: (this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) });\r\n    }\r\n\r\n\tdownloadTable = () => {\r\n        axios.post(\r\n            getURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.EXPORT_FILE),\r\n            {\r\n                'filter':{},\r\n                \"datacenter_name\":\"\",\r\n            }\r\n            ).then(response => {\r\n                console.log(response);\r\n                this.setState({ csvData: response.data.csvData });\r\n                this.csvLink.link.click();\r\n            });\r\n    }\r\n\r\n    openChangePlanModal = () => {\r\n        this.setState({ changePlanModal: true });\r\n    }\r\n\r\n    closeChangePlanModal = () => {\r\n        this.setState({ changePlanModal: false });\r\n    }\r\n\r\n    updatePlanName = (event) => {\r\n        this.setState({ changePlanName: event.target.value });\r\n    }\r\n\r\n    beginChangePlan = () => {\r\n        this.closeChangePlanModal();\r\n        this.setState({ changeDescriptionModal: true });\r\n\r\n        axios.post(\r\n            getURL(AssetConstants.CHANGE_PLAN_PATH, AssetCommand.CHANGE_PLAN_CREATE),\r\n            {\r\n                'owner': this.props.username,\r\n                'name': this.state.changePlanName,\r\n            }\r\n            ).then(response => {\r\n                this.props.updateChangePlan(true, response.data.change_plan, 1, this.state.changePlanName);\r\n                this.setState({ changePlanName: \"\" });\r\n        });\r\n    }\r\n\r\n    closeDescriptionModal = () => {\r\n        this.setState({ changeDescriptionModal: false });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Paper elevation={3} style={{ minHeight: this.props.height }}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    direction=\"row\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    style={{\"padding\": \"10px\"}}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h6\">Export</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography>Download what is currently shown in the table.</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Button\r\n                            onClick={() => {this.downloadTable()}}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<CloudDownloadIcon />}\r\n                            style={{\r\n                                width: \"100%\"\r\n                            }}\r\n                        >\r\n                            Export All Data\r\n                        </Button>\r\n                    </Grid>\r\n                    { !this.props.changePlanActive && this.state.canCreateChangePlans ?\r\n                    <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t\t<Typography color=\"textSecondary\">\r\n\t\t\t\t\t\t\t\tOr\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<hr style={{width: \"5vw\"}} />\r\n\t\t\t\t\t\t</Grid> : null }\r\n                    { !this.props.changePlanActive && this.state.canCreateChangePlans ?\r\n\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"default\"\r\n\t\t\t\t\t\t\t\tstyle={{width: \"100%\"}}\r\n\t\t\t\t\t\t\t\tstartIcon={<TrackChangesIcon />}\r\n\t\t\t\t\t\t\t\tonClick={this.openChangePlanModal}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tCreate Change Plan\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Grid> : null }\r\n                </Grid>\r\n            </Paper>\r\n\r\n\t\t\t<CSVLink\r\n                data={this.state.csvData}\r\n\t\t\t\tfilename={AssetConstants.ASSET_DOWNLOAD_FILE_NAME}\r\n\t\t\t\tclassName=\"hidden\"\r\n\t\t\t\tref={(r) => this.csvLink = r}\r\n\t\t\t\ttarget=\"_blank\"\r\n\t\t\t/>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.changePlanModal}\r\n                onClose={this.closeChangePlanModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.changePlanModal}>\r\n                    <Backdrop\r\n                        open={this.state.changePlanModal}\r\n                    >\r\n                    <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={3}>\r\n                                <Typography>\r\n                                    Enter plan name:\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={this.beginChangePlan}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Begin\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={this.closeChangePlanModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.state.changeDescriptionModal}\r\n                onClose={this.closeDescriptionModal}\r\n                closeAfterTransition\r\n            >\r\n                <Fade in={this.state.changeDescriptionModal}>\r\n                    <Backdrop\r\n                        open={this.state.changeDescriptionModal}\r\n                    >\r\n                    <div className={classes.grid}>\r\n                        <Grid\r\n                            container\r\n                            spacing={1}\r\n                            direction=\"row\"\r\n                            justify=\"flex-start\"\r\n                            alignItems=\"center\"\r\n                        >\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Typography>\r\n                                    You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={this.closeDescriptionModal}\r\n                                    style={{width: \"100%\"}}\r\n                                >\r\n                                    Ok\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item xs={3}>\r\n                            </Grid>\r\n                        </Grid>\r\n                        </div>\r\n                </Backdrop>\r\n                </Fade>\r\n            </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(ExportAsset);\r\n","// React\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\n// Core\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid, Paper, Button } from '@material-ui/core';\r\nimport { Checkbox, Toolbar, Typography, IconButton, Tooltip, TableSortLabel } from '@material-ui/core';\r\n\r\n// Lab\r\nimport { SpeedDial, SpeedDialAction, SpeedDialIcon, Alert, AlertTitle } from '@material-ui/lab';\r\n\r\n// Icons\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport TrackChangesIcon from '@material-ui/icons/TrackChanges';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\n\r\n// Helpers\r\nimport { AssetInput } from '../enums/AssetInputs.ts';\r\nimport { AssetCommand } from '../enums/AssetCommands.ts';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as AssetConstants from \"../AssetConstants\";\r\nimport DetailAsset from \"./DetailsAsset\";\r\nimport FilterAsset from './FilterAsset';\r\nimport stableSort from \"../../helpers/functions/StableSort\";\r\nimport getComparator from \"../../helpers/functions/GetComparator\";\r\nimport { Privilege } from \"../../enums/privilegeTypes.ts\";\r\nimport AddAsset from \"./AddAsset\";\r\nimport ExportAsset from \"./ExportAsset\";\r\nimport * as Constants from '../../Constants';\r\nimport StatusDisplay from \"../../helpers/StatusDisplay\";\r\n\r\n\r\nconst useStyles = theme => ({\r\n\troot: {\r\n\t\tpaddingLeft: theme.spacing(2),\r\n\t\tpaddingRight: theme.spacing(1),\r\n\t},\r\n\tstyledTableRow: {\r\n\t},\r\n\ttableCellHead: {\r\n\t},\r\n\tstyledTableCell: {\r\n\t\tfontSize: 14,\r\n\t},\r\n\ttable: {\r\n\t\tminWidth: 700,\r\n\t},\r\n\tpaper: {\r\n\t\twidth: '100%',\r\n\t\tmarginBottom: theme.spacing(2),\r\n\t},\r\n\tvisuallyHidden: {\r\n\t\tborder: 0,\r\n\t\tclip: 'rect(0 0 0 0)',\r\n\t\theight: 1,\r\n\t\tmargin: -1,\r\n\t\toverflow: 'hidden',\r\n\t\tpadding: 0,\r\n\t\tposition: 'absolute',\r\n\t\ttop: 20,\r\n\t\twidth: 1,\r\n\t},\r\n\ttitle: {\r\n\t\tflex: '1 1 100%',\r\n\t},\r\n});\r\n\r\nconst decomType = \"decommissioned\";\r\n\r\nconst emptySearch = {\r\n\t\"filter\": {\r\n\t\t\"vendor\": null,\r\n\t\t\"model_number\": null,\r\n\t\t\"height\": null,\r\n\t\t\"model\": null,\r\n\t\t\"hostname\": null,\r\n\t\t\"rack\": null,\r\n\t\t\"rack_position\": null,\r\n\t\t\"username\": null,\r\n\t\t\"display_name\": null,\r\n\t\t\"email\": null,\r\n\t\t\"privilege\": null,\r\n\t\t\"model\": null,\r\n\t\t\"hostname\": null,\r\n\t\t\"starting_rack_letter\": null,\r\n\t\t\"ending_rack_letter\": null,\r\n\t\t\"starting_rack_number\": null,\r\n\t\t\"ending_rack_number\": null,\r\n\t\t\"rack\": null,\r\n\t\t\"rack_position\": null\r\n\t},\r\n\t\"datacenter_name\": \"\",\r\n}\r\n\r\nfunction createData(model, hostname, datacenter_name, rack, owner, asset_number) {\r\n\treturn { model, hostname, datacenter_name, rack, owner, asset_number };\r\n}\r\n\r\nfunction createDecData(model, hostname, datacenter_name, rack, owner, asset_number, decommission_user, timestamp) {\r\n\treturn { model, hostname, datacenter_name, rack, owner, asset_number, decommission_user, timestamp };\r\n}\r\n\r\nconst headCells = [\r\n\t{ id: 'hostname', numeric: false, label: \"Hostname\", align: \"left\" },\r\n\t{ id: 'datacenter_name', numeric: false, label: \"Datacenter\", align: \"left\" },\r\n\t{ id: 'model', numeric: false, label: \"Model\", align: \"left\" },\r\n\t{ id: 'rack', numeric: false, label: \"Rack\", align: \"left\" },\r\n\t{ id: 'owner', numeric: false, label: \"Owner\", align: \"left\" },\r\n\t{ id: 'asset_number', numeric: false, label: \"Asset Number\", align: \"right\" },\r\n];\r\n\r\nconst decommissionHeadCells = [\r\n\t{ id: 'decommission_user', numeric: false, label: \"User\", align: \"right\" },\r\n\t{ id: 'timestamp', numeric: false, label: \"Timestamp\", align: \"right\" },\r\n];\r\n\r\nclass TableAsset extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tallAssets: [],\r\n\t\t\ttableItems: [],\r\n\t\t\tselectedItems: [],\r\n\t\t\tallSelected: false,\r\n\t\t\tdecAssets: [],\r\n\t\t\tofflineAssets: [],\r\n\r\n\t\t\tdetailStatusOpen: false,\r\n\t\t\tdetailStatusSeverity: '',\r\n\t\t\tdetailStatusMessage: '',\r\n\r\n\t\t\tdeleteAssetRack: '',\r\n\t\t\tdeleteAssetrack_position: '',\r\n\r\n\t\t\tshowDetailedView: false,\r\n\t\t\tdetailViewLoading: false,\r\n\t\t\tdetailAsset: -1,\r\n\t\t\tdetailHostname: \"\",\r\n\t\t\toriginalRack: '',\r\n\t\t\toriginalrack_position: '',\r\n\r\n\t\t\torder: \"asc\",\r\n\t\t\torderBy: \"datacenter\",\r\n\r\n\t\t\tshowStatus: false,\r\n\t\t\tstatusSeverity: \"\",\r\n\t\t\tstatusMessage: \"\",\r\n\r\n\t\t\t// Change plan\r\n\t\t\tspeedDialOpen: false,\r\n\t\t\tassetType: \"active\",\r\n\r\n\t\t\trowOwner: \"\",\r\n\t\t};\r\n\r\n\t\tthis.filter = React.createRef();\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchAllAssets();\r\n\r\n\t}\r\n\r\n\t// Fetch all assets for the table\r\n\tfetchAllAssets = () => {\r\n\t\tif (this.props.changePlanActive) {\r\n\t\t\taxios.post(\r\n\t\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\t\tresponse => {\r\n\t\t\t\t\t\tvar items = [];\r\n\t\t\t\t\t\tvar instances = response.data.instances;\r\n\r\n\t\t\t\t\t\taxios.post(\r\n\t\t\t\t\t\t\tgetURL(\"changeplans/\", AssetCommand.CHANGE_PLAN_GET_ACTIONS), {\r\n\t\t\t\t\t\t\t'change_plan_id': this.props.changePlanID,\r\n\t\t\t\t\t\t\t'owner': this.props.username,\r\n\t\t\t\t\t\t}).then(response => {\r\n\t\t\t\t\t\t\tvar actions = response.data.change_plan_actions;\r\n\r\n\t\t\t\t\t\t\tvar assetNums = [];\r\n\t\t\t\t\t\t\tactions.forEach(action => {\r\n\t\t\t\t\t\t\t\tvar assetNum = action.asset_numberOriginal;\r\n\t\t\t\t\t\t\t\tassetNums.push(assetNum);\r\n\t\t\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\t\t\tvar newInstances = instances.filter(instance => {\r\n\t\t\t\t\t\t\t\treturn !assetNums.includes(instance.asset_number);\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tactions.forEach(action => {\r\n\t\t\t\t\t\t\t\tif (action.action !== \"decommission\") {\r\n\t\t\t\t\t\t\t\t\tnewInstances.push(action.new_record);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tnewInstances.map(asset => {\r\n\t\t\t\t\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tthis.setState({ allAssets: newInstances, tableItems: items }, () => this.filter.current.search());\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\tthis.getDecommissionedAssets();\r\n\t\t} else {\r\n\t\t\taxios.post(\r\n\t\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\t\tresponse => {\r\n\t\t\t\t\t\tvar items = [];\r\n\t\t\t\t\t\tconsole.log(\"instances\");\r\n\t\t\t\t\t\tconsole.log(response.data.instances);\r\n\t\t\t\t\t\tresponse.data.instances.map(asset => {\r\n\t\t\t\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis.setState({ allAssets: response.data.instances, tableItems: items }, () => this.filter.current.search());\r\n\t\t\t\t\t});\r\n\t\t\tthis.getDecommissionedAssets();\r\n\t\t}\r\n\t}\r\n\r\n\tdeleteAsset = () => {\r\n\t\tvar body = {};\r\n\t\tbody[AssetInput.RACK] = this.state.originalRack;\r\n\t\tbody[AssetInput.RACK_U] = this.state.originalrack_position;\r\n\r\n\t\taxios.post(\r\n\t\t\tgetURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.delete), body\r\n\t\t).then(response => {\r\n\t\t\tif (response.data.message === AssetConstants.SUCCESS_TOKEN) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowStatus: true,\r\n\t\t\t\t\tstatusMessage: \"Successfully deleted asset\",\r\n\t\t\t\t\tstatusSeverity: AssetConstants.SUCCESS_TOKEN,\r\n\t\t\t\t\toriginalRack: '',\r\n\t\t\t\t\toriginalrack_position: '',\r\n\t\t\t\t\tshowDetailedView: false\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: AssetConstants.ERROR_TOKEN })\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgenerateLabels = () => {\r\n\t\tvar body = {};\r\n\t\tbody[AssetInput.ASSET_NUMBER] = this.state.selectedItems;\r\n\r\n\t\taxios.post(\r\n\t\t\tgetURL(AssetConstants.ASSETS_MAIN_PATH, AssetCommand.GENERATE_LABELS), body,\r\n\t\t\t{\r\n\t\t\t\tresponseType: 'arraybuffer',\r\n\t\t\t}\r\n\t\t).then(response => {\r\n\t\t\ttry {\r\n\t\t\t\tvar blob = new Blob([response.data], { type: \"application/pdf\" });\r\n\t\t\t\tvar link = document.createElement('a');\r\n\t\t\t\tlink.href = window.URL.createObjectURL(blob);\r\n\t\t\t\tlink.download = \"AssetLabels_\" + new Date() + \".pdf\";\r\n\t\t\t\tlink.click();\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tshowStatus: true,\r\n\t\t\t\t\tstatusMessage: \"Successfully generated asset label(s)\",\r\n\t\t\t\t\tstatusSeverity: AssetConstants.SUCCESS_TOKEN,\r\n\t\t\t\t});\r\n\t\t\t} catch {\r\n\t\t\t\tthis.setState({ showStatus: true, statusMessage: \"Could not generate asset labels\", statusSeverity: AssetConstants.ERROR_TOKEN })\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcloseDetailedView = () => {\r\n\t\tthis.setState({ showDetailedView: false, assetType: \"active\" });\r\n\t\tthis.fetchAllAssets();\r\n\t\tthis.filter.current.clearFilters();\r\n\t}\r\n\r\n\tcloseShowStatus = () => {\r\n\t\tthis.setState({ showStatus: false })\r\n\t}\r\n\r\n\tcreateSortHandler = (event, property) => {\r\n\t\tconst isAsc = this.state.orderBy === property && this.state.order === 'asc';\r\n\t\tthis.setState({ order: isAsc ? 'desc' : 'asc', orderBy: property });\r\n\t}\r\n\r\n\topenDetailedView = (event, asset) => {\r\n\t\tconsole.log(\"opening detail view\");\r\n\t\tconsole.log(asset)\r\n\t\tvar dAsset = {};\r\n\t\tvar assets = [];\r\n\t\tif (this.state.assetType === \"active\" || this.state.assetType === \"offline\") {\r\n\t\t\tassets = this.state.allAssets;\r\n\t\t} else if (this.state.assetType === decomType) {\r\n\t\t\tassets = this.state.decAssets;\r\n\t\t}\r\n\t\tassets.map(currAsset => {\r\n\t\t\tif (currAsset.asset_number === asset.asset_number) {\r\n\t\t\t\tObject.assign(dAsset, currAsset);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconsole.log(dAsset);\r\n\t\tthis.setState({ detailAsset: dAsset, showDetailedView: true, rowOwner: asset.owner });\r\n\t}\r\n\r\n\tgetRack = (asset) => {\r\n\t\tvar result = asset.rack;\r\n\t\tif (asset.mount_type !== \"blade\") {\r\n\t\t\tresult += \" U\" + asset.rack_position;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tupdateItems = (assets) => {\r\n\t\tvar items = [];\r\n\r\n\t\tif (this.state.assetType === \"active\") {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t});\r\n\t\t} else if (this.state.assetType === decomType) {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createDecData(asset.vendor + \" \" + asset.model_number, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number, asset.decommission_user, asset.timestamp));\r\n\t\t\t});\r\n\t\t} else if (this.state.assetType === \"offline\") {\r\n\t\t\tassets.map(asset => {\r\n\t\t\t\titems.push(createData(asset.model, asset.hostname, asset.datacenter_name, this.getRack(asset), asset.owner, asset.asset_number));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\r\n\t\tthis.setState({ tableItems: items });\r\n\t}\r\n\r\n\tgetAssetList = () => {\r\n\t\taxios.post(\r\n\t\t\tgetURL(Constants.ASSETS_MAIN_PATH, AssetCommand.search), emptySearch).then(\r\n\t\t\t\tresponse => { console.log(response.data.instances); this.setState({ allAssets: response.data.instances }); });\r\n\t}\r\n\r\n\tgetDecommissionedAssets = () => {\r\n\t\taxios.post(\r\n\t\t\tgetURL(Constants.DECOMMISSIONS_MAIN_PATH, AssetCommand.search), {\r\n\t\t\t\"filter\": {\r\n\t\t\t\t\"decommission_user\": \"\",\r\n\t\t\t\t\"start_date\": \"\",\r\n\t\t\t\t\"end_date\": \"\",\r\n\t\t\t}\r\n\t\t}).then(\r\n\t\t\tresponse => {\r\n\t\t\t\tthis.setState({ decAssets: response.data.decommissions })\r\n\t\t\t});\r\n\t}\r\n\r\n\tshowStatusBar = (status, severity, message) => {\r\n\t\tthis.setState({ showStatus: status, statusSeverity: severity, statusMessage: message });\r\n\t}\r\n\r\n\tcloseShowStatus = () => {\r\n\t\tthis.setState({ showStatus: false, statusSeverity: \"\", statusMessage: \"\" });\r\n\t}\r\n\r\n\tonSelectAllClick = (event) => {\r\n\t\tvar newSelected = this.state.selectedItems;\r\n\t\tthis.state.tableItems.map(n => {\r\n\t\t\tconst selectedIndex = newSelected.indexOf(n.asset_number);\r\n\t\t\tif (selectedIndex === -1) {\r\n\t\t\t\tnewSelected = newSelected.concat(n.asset_number);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ selectedItems: newSelected });\r\n\t\tthis.forceUpdate();\r\n\r\n\t}\r\n\r\n\tdeselectAllClick = () => {\r\n\t\tvar newSelected = this.state.selectedItems;\r\n\t\tthis.state.tableItems.map(n => {\r\n\t\t\tconst selectedIndex = newSelected.indexOf(n.asset_number);\r\n\r\n\t\t\tif (selectedIndex === 0) {\r\n\t\t\t\tnewSelected = newSelected.slice(1);\r\n\t\t\t} else if (selectedIndex === newSelected - 1) {\r\n\t\t\t\tnewSelected = newSelected.slice(0, -1);\r\n\t\t\t} else if (selectedIndex > 0) {\r\n\t\t\t\tnewSelected = newSelected.slice(0, selectedIndex).concat(newSelected.slice(selectedIndex + 1));\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ selectedItems: newSelected });\r\n\t\tthis.forceUpdate();\r\n\t}\r\n\r\n\taddCheckedItem = (event, assetNum) => {\r\n\t\tif (!(this.state.assetType === decomType)) {\r\n\t\t\tif (event.target.getAttribute(\"class\") !== \"MuiButton-label\") {\r\n\t\t\t\tconst selectedIndex = this.state.selectedItems.indexOf(assetNum);\r\n\t\t\t\tlet newSelected = [];\r\n\r\n\t\t\t\tif (selectedIndex === -1) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems, assetNum);\r\n\t\t\t\t} else if (selectedIndex === 0) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems.slice(1));\r\n\t\t\t\t} else if (selectedIndex === this.state.selectedItems.length - 1) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(this.state.selectedItems.slice(0, -1));\r\n\t\t\t\t} else if (selectedIndex > 0) {\r\n\t\t\t\t\tnewSelected = newSelected.concat(\r\n\t\t\t\t\t\tthis.state.selectedItems.slice(0, selectedIndex),\r\n\t\t\t\t\t\tthis.state.selectedItems.slice(selectedIndex + 1),\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({ selectedItems: newSelected });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\topenSpeedDial = () => {\r\n\t\tthis.setState({ speedDialOpen: true });\r\n\t}\r\n\r\n\tcloseSpeedDial = () => {\r\n\t\tthis.setState({ speedDialOpen: false });\r\n\t}\r\n\r\n\texitChangePlan = () => {\r\n\t\tthis.props.updateChangePlan(false, null, null, \"\");\r\n\t\tthis.fetchAllAssets();\r\n\t}\r\n\r\n\tswitchAssetType = (assetType) => {\r\n\t\tthis.setState({ assetType: assetType }, () => this.filter.current.search());\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\t\tvar allSelected = true;\r\n\t\tthis.state.tableItems.map(elem => {\r\n\t\t\tallSelected = allSelected && this.state.selectedItems.indexOf(elem.asset_number) !== -1;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Grid container spacing={3}>\r\n\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t{this.props.changePlanActive ?\r\n\t\t\t\t\t\t\t<Alert severity=\"info\">\r\n\t\t\t\t\t\t\t\t<AlertTitle>Change Plan Mode</AlertTitle>\r\n\t\t\t\t\t\t\t\t<Typography>Current plan: {this.props.changePlanName}</Typography>\r\n\t\t\t\t\t\tYou are currently in change plan mode! Changes made are being logged in the plan and not actually made in the system.\r\n\t\t\t\t\t</Alert> : null}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={3}>\r\n\t\t\t\t\t\t{(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) ?\r\n\t\t\t\t\t\t\t<AddAsset\r\n\t\t\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t\t\t\tgetAssetList={this.getAssetList}\r\n\t\t\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\t\t\tfetchAllAssets={this.fetchAllAssets}\r\n\t\t\t\t\t\t\t\theight=\"300px\"\r\n\t\t\t\t\t\t\t/> : null}\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={6}>\r\n\t\t\t\t\t\t<FilterAsset\r\n\t\t\t\t\t\t\tupdateItems={this.updateItems}\r\n\t\t\t\t\t\t\tgetAssetList={this.getAssetList}\r\n\t\t\t\t\t\t\tallAssets={this.state.allAssets}\r\n\t\t\t\t\t\t\tdecAssets={this.state.decAssets}\r\n\t\t\t\t\t\t\tofflineAssets={this.state.offlineAssets}\r\n\t\t\t\t\t\t\tswitchAssetType={this.switchAssetType}\r\n\t\t\t\t\t\t\tassetType={this.state.assetType}\r\n\t\t\t\t\t\t\tref={this.filter}\r\n\t\t\t\t\t\t\theight=\"300px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={12} sm={6} md={4} lg={3}>\r\n\t\t\t\t\t\t<ExportAsset\r\n\t\t\t\t\t\t\titems={this.state.tableItems}\r\n\t\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\t\tupdateChangePlan={this.props.updateChangePlan}\r\n\t\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\t\theight=\"300px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs={12} style={{ marginTop: \"20px\" }}>\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t{this.state.selectedItems.length > 0 ? (\r\n\t\t\t\t\t\t\t<Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n\t\t\t\t\t\t\t\t{this.state.selectedItems.length} {this.state.selectedItems.length === 1 ? \"label\" : \"labels\"} ready to be generated\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t) :\r\n\t\t\t\t\t\t\t<Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\">\r\n\t\t\t\t\t\t\t\tClick asset rows to prepare them for label generation\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\t<Tooltip title=\"Generate Labels\">\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\tstartIcon={<NoteAddIcon />}\r\n\t\t\t\t\t\t\t\tonClick={() => this.generateLabels()}\r\n\t\t\t\t\t\t\t\tdisabled={this.state.selectedItems.length < 1}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tGenerate Labels\r\n      \t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t\t\t<Table className={classes.table} aria-label=\"customized table\" style={{\r\n\t\t\t\t\t\t\tbackgroundColor: this.props.changePlanActive ? \"#64b5f6\" : \"\",\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t<TableRow className={classes.styledTableRow}>\r\n\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? null :\r\n\t\t\t\t\t\t\t\t\t\t<TableCell padding=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Select All\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"select-all\" onClick={() => this.onSelectAllClick()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CheckIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t\t<Tooltip title=\"Deselect All\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IconButton aria-label=\"deselect-all\" onClick={() => this.deselectAllClick()}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ClearIcon />\r\n\t\t\t\t\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t\t\t\t\t</Tooltip>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>}\r\n\t\t\t\t\t\t\t\t\t{headCells.map(headCell => (\r\n\t\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.tableCellHead}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\talign={headCell.align}\r\n\t\t\t\t\t\t\t\t\t\t\tsortDirection={this.state.orderBy === headCell.id ? this.state.order : false}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\t\t\t\t\t\tactive={this.state.orderBy === headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\tdirection={this.state.orderBy === headCell.id ? this.state.order : 'asc'}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.createSortHandler(event, headCell.id) }}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ fontWeight: \"bold\" }}>{headCell.label}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.orderBy === headCell.id ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ?\r\n\t\t\t\t\t\t\t\t\t\tdecommissionHeadCells.map(headCell => (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableCell\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={classes.tableCellHead}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\talign={headCell.align}\r\n\t\t\t\t\t\t\t\t\t\t\t\tsortDirection={this.state.orderBy === headCell.id ? this.state.order : false}\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableSortLabel\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tactive={this.state.orderBy === headCell.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tdirection={this.state.orderBy === headCell.id ? this.state.order : 'asc'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.createSortHandler(event, headCell.id) }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{ fontWeight: \"bold\" }}>{headCell.label}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.orderBy === headCell.id ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span className={classes.visuallyHidden}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{this.state.order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableSortLabel>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableCell>)) : null}\r\n\t\t\t\t\t\t\t\t\t<TableCell align=\"left\" className={classes.tableCellHead}>{\"\"}</TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t{stableSort(this.state.tableItems, getComparator(this.state.order, this.state.orderBy))\r\n\t\t\t\t\t\t\t\t\t.map((row, index) => {\r\n\t\t\t\t\t\t\t\t\t\tconst labelId = `enhanced-table-checkbox-${index}`;\r\n\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\t\t\t\t\t\t\thover\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={event => this.addCheckedItem(event, row.asset_number)}\r\n\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\t\taria-checked={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\tselected={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey={row.assetNum}\r\n\t\t\t\t\t\t\t\t\t\t\t\trole=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? null : <TableCell padding=\"checkbox\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.state.selectedItems.indexOf(row.asset_number) !== -1}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tinputProps={{ 'aria-labelledby': labelId }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.hostname}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell component=\"th\" id={labelId} scope=\"row\">{row.datacenter_name}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.model}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{this.state.assetType===\"offline\" ? \"N/A\" : row.rack}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"left\">{row.owner}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"right\">{row.asset_number}</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? <TableCell align=\"right\">{row.decommission_user}</TableCell> : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t{this.state.assetType === decomType ? <TableCell align=\"right\">{row.timestamp}</TableCell> : null}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell align=\"center\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={(event) => { this.openDetailedView(event, row); }}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMore Details\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t</TableContainer>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t{this.state.showDetailedView ?\r\n\t\t\t\t\t<DetailAsset\r\n\t\t\t\t\t\topen={this.state.showDetailedView}\r\n\t\t\t\t\t\tclose={this.closeDetailedView}\r\n\t\t\t\t\t\tasset={this.state.detailAsset}\r\n\t\t\t\t\t\tsearch={this.getAssetList}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tchangePlanActive={this.props.changePlanActive}\r\n\t\t\t\t\t\tchangePlanID={this.props.changePlanID}\r\n\t\t\t\t\t\tchangePlanStep={this.props.changePlanStep}\r\n\t\t\t\t\t\tincrementChangePlanStep={this.props.incrementChangePlanStep}\r\n\t\t\t\t\t\tdisabled={(!(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.includes(this.state.detailAsset.datacenter_name)) || this.state.assetType === decomType)}\r\n\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\tfetchAllAssets={this.fetchAllAssets}\r\n\t\t\t\t\t\tchangePlanName={this.props.changePlanName}\r\n\t\t\t\t\t\tshowDecommissioned={this.state.assetType === decomType}\r\n\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t\tisOffline={this.state.assetType === \"offline\"}\r\n\t\t\t\t\t/> : null}\r\n\t\t\t\t<SpeedDial\r\n\t\t\t\t\tariaLabel=\"SpeedDial openIcon example\"\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tposition: 'fixed',\r\n\t\t\t\t\t\tbottom: '30px',\r\n\t\t\t\t\t\tright: '30px',\r\n\t\t\t\t\t}}\r\n\t\t\t\t\thidden={!this.props.changePlanActive}\r\n\t\t\t\t\ticon={<TrackChangesIcon />}\r\n\t\t\t\t\tonClose={this.closeSpeedDial}\r\n\t\t\t\t\tonOpen={this.openSpeedDial}\r\n\t\t\t\t\topen={this.state.speedDialOpen}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SpeedDialAction\r\n\t\t\t\t\t\tkey=\"exit\"\r\n\t\t\t\t\t\ticon={<ExitToAppIcon />}\r\n\t\t\t\t\t\ttooltipTitle=\"Exit Change Plan\"\r\n\t\t\t\t\t\tonClick={this.exitChangePlan}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</SpeedDial>\r\n\t\t\t\t<StatusDisplay\r\n\t\t\t\t\topen={this.state.showStatus}\r\n\t\t\t\t\tseverity={this.state.statusSeverity}\r\n\t\t\t\t\tcloseStatus={this.closeShowStatus}\r\n\t\t\t\t\tmessage={this.state.statusMessage}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(TableAsset);\r\n","export enum DatacenterCommand {\r\n    GET_ALL_DATACENTERS = \"all/\",\r\n    CREATE = \"create/\",\r\n    EDIT = \"edit/\",\r\n    DELETE = \"delete/\",\r\n}\r\n","import descendingComparator from \"./DescendingComparator\";\r\n\r\nexport default function getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n      ? (a, b) => descendingComparator(a, b, orderBy)\r\n      : (a, b) => -descendingComparator(a, b, orderBy);\r\n  }\r\n","export default function stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n  }\r\n","import React from 'react';\r\n\r\nexport default class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return \"An unforseen error occurred. Please refresh the page and try again later.\";\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n      // You can also log the error to an error reporting service\r\n      //logErrorToMyService(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n\r\n      return this.props.children;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n    Grid,\r\n    Typography,\r\n } from '@material-ui/core/';\r\n\r\nimport { Privilege } from '../../enums/privilegeTypes.ts'\r\nimport TableAsset from '../helpers/TableAssets';\r\nimport ErrorBoundary from '../../errors/ErrorBoundry';\r\n\r\nexport default class AssetsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            statusSeverity:'',\r\n            statusMessage:'',\r\n            showStatus:false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ErrorBoundary>\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Assets\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TableAsset\r\n                                privilege={this.props.privilege}\r\n                                username={this.props.username}\r\n                                changePlanActive={this.props.changePlanActive}\r\n                                updateChangePlan={this.props.updateChangePlan}\r\n                                changePlanID={this.props.changePlanID}\r\n                                changePlanStep={this.props.changePlanStep}\r\n                                incrementChangePlanStep={this.props.incrementChangePlanStep}\r\n                                changePlanName={this.props.changePlanName}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\n\nimport axios from \"axios\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport { Button, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Alert from '@material-ui/lab/Alert';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\n\nimport * as Constants from \"../../Constants\";\nimport { DatacenterCommand } from \"../enums/DatacenterCommands\";\nimport getURL from \"../../helpers/functions/GetURL\";\n\n\nconst offlineStorageVal = \"offlineStorage\";\nconst datacenterVal = \"datacenter\";\n\nconst useStyles = theme => ({\n\troot: {\n\t\twidth: '100%',\n\t},\n\tmodal: {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tpaper: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tborder: '2px solid #000',\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3),\n\t},\n});\n\nclass CreateDatacenter extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tshowCreate: false,\n\t\t\tdatacenterName: \"\",\n\t\t\tdatacenterAbbreviation: \"\",\n\t\t\tshowStatus: false,\n\t\t\tstatusSeverity: \"\",\n\t\t\tstatusMessage: \"\",\n\t\t\tsiteType: datacenterVal,\n\t\t};\n\t}\n\n\tgenerateCreateJSON = () => {\n\t\treturn {\n\t\t\t\"abbreviation\": this.state.datacenterAbbreviation,\n\t\t\t\"datacenter_name\": this.state.datacenterName,\n\t\t\t\"is_offline_storage\": this.state.siteType === offlineStorageVal,\n\t\t}\n\t}\n\n\tcreateDatacenter = () => {\n\t\taxios.post(\n\t\t\tgetURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.CREATE), this.generateCreateJSON()).then(\n\t\t\t\tresponse => {\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t\tif (response.data.message === \"success\") {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowCreate: false,\n\t\t\t\t\t\t\tdatacenterName: \"\",\n\t\t\t\t\t\t\tdatacenterAbbreviation: \"\",\n\t\t\t\t\t\t}, () => this.props.search());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tshowStatus: true,\n\t\t\t\t\t\t\tstatusSeverity: \"error\",\n\t\t\t\t\t\t\tstatusMessage: response.data.message,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tupdateDatacenterName = (event) => {\n\t\tthis.setState({ datacenterName: event.target.value });\n\t}\n\n\tupdateDatacenterAbbrevation = (event) => {\n\t\tthis.setState({ datacenterAbbreviation: this.getAbbreviation(event.target.value) });\n\t}\n\n\tgetAbbreviation = (val) => {\n\t\tif (val.length > 6) {\n\t\t\treturn val.substring(0, 7);\n\t\t}\n\n\t\treturn val;\n\t}\n\n\tshowCreate = () => {\n\t\tthis.setState({ showCreate: true });\n\t}\n\n\tcloseCreate = () => {\n\t\tthis.setState({\n\t\t\tshowCreate: false,\n\t\t\tdatacenterName: \"\",\n\t\t\tdatacenterAbbreviation: \"\",\n\t\t});\n\t}\n\n\tcloseStatus = () => {\n\t\tthis.setState({ showStatus: false, statusSeverity: \"\", statusMessage: \"\", });\n\t}\n\n\tselectSiteType = (event) => {\n\t\tthis.setState({ siteType: event.target.value });\n\t}\n\n\trender() {\n\t\tconst { classes } = this.props;\n\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t{this.props.datacenterList.length > 0 ? <InputLabel id=\"datacenter-select-label\">Select Site</InputLabel> : null}\n\t\t\t\t\t{this.props.datacenterList.length > 0 ? <Select\n\t\t\t\t\t\tname='datacenter_name'\n\t\t\t\t\t\tid=\"datacenter-select\"\n\t\t\t\t\t\tvalue={this.props.dc}\n\t\t\t\t\t\tonChange={this.props.selectDatacenter}\n\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.props.datacenterList.map(value => {\n\t\t\t\t\t\t\treturn (<MenuItem value={value}>{value[\"name\"]}</MenuItem>);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Select> : null}\n\t\t\t\t</Grid>\n\t\t\t\t{this.props.disabled ? null :\n\t\t\t\t\t<Grid item xs={3}>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tonClick={() => { this.showCreate() }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tCreate New Site\n            \t\t\t</Button>\n\t\t\t\t\t</Grid>\n\t\t\t\t}\n\n\n\t\t\t\t<Modal\n\t\t\t\t\taria-labelledby=\"transition-modal-title\"\n\t\t\t\t\taria-describedby=\"transition-modal-description\"\n\t\t\t\t\tclassName={classes.modal}\n\t\t\t\t\topen={this.state.showCreate}\n\t\t\t\t\tonClose={this.closeCreate}\n\t\t\t\t\tcloseAfterTransition\n\t\t\t\t\tBackdropComponent={Backdrop}\n\t\t\t\t\tscroll=\"body\"\n\t\t\t\t\tBackdropProps={{\n\t\t\t\t\t\ttimeout: 500,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Fade in={this.state.showCreate}>\n\t\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t\t<Grid container spacing={3}>\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t\t\t\t\t<Typography>Site Name:</Typography>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\tid=\"input-rack\"\n\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\tlabel={\"datacenter-name\"}\n\t\t\t\t\t\t\t\t\t\tname={\"datacenter-name\"}\n\t\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterName}\n\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={2}>\n\t\t\t\t\t\t\t\t\t<Typography>Site Abbreviation:</Typography>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<Tooltip placement=\"top\" title={\"Max 6 characters\"}>\n\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\t\tid=\"input-rack\"\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\t\t\t\t\tlabel={\"datacenter-abbreviation\"}\n\t\t\t\t\t\t\t\t\t\t\tname={\"datacenter-abbreviation\"}\n\t\t\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterAbbrevation}\n\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterAbbreviation}\n\t\t\t\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={9}>\n\t\t\t\t\t\t\t\t\t<FormControl component=\"fieldset\">\n\t\t\t\t\t\t\t\t\t\t<RadioGroup column aria-label=\"position\" name=\"position\" defaultValue=\"start\" value={this.state.siteType} onChange={(event) => this.selectSiteType(event)}>\n\t\t\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Datacenter\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={datacenterVal}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\t\t\t\t\t\tcontrol={<Radio color=\"primary\" />}\n\t\t\t\t\t\t\t\t\t\t\t\tlabel=\"Offline Storage\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={offlineStorageVal}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</RadioGroup>\n\t\t\t\t\t\t\t\t\t</FormControl>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t\t\tdisabled={!(this.state.datacenterAbbreviation && this.state.datacenterName)}\n\t\t\t\t\t\t\t\t\t\tonClick={() => { this.createDatacenter() }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tCreate Site\n                            </Button>\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t\t\t{this.state.showStatus ? <Alert severity=\"error\" onClose={() => { this.closeStatus() }}>{this.state.statusMessage}</Alert> : null}\n\t\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fade>\n\t\t\t\t</Modal>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default withStyles(useStyles)(CreateDatacenter);\n","import React from \"react\";\r\n\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../enums/DatacenterCommands\";\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n  });\r\n\r\nclass EditDatacenter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            datacenterName:props.dcName,\r\n            datacenterAbbreviation:props.dcAbbrev,\r\n\t\t};\r\n\r\n\t}\r\n\r\n    generateEditJSON = () => {\r\n\t\tconsole.log(\"generating edit\")\r\n\t\tconsole.log(this.props.dcName);\r\n        return {\r\n\t\t\t\"nameOriginal\": this.props.dcName,\r\n            \"abbreviation\" : this.state.datacenterAbbreviation||this.props.dcAbbrev,\r\n            \"datacenter_name\": this.state.datacenterName||this.props.dcName,\r\n            \"is_offline_storage\":this.props.is_offline_storage,\r\n        }\r\n    }\r\n\r\n    editDatacenter = () => {\r\n\t\tconsole.log(\"sending\");\r\n\t\tconsole.log(this.state.datacenterName);\r\n        axios.post(\r\n            getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.EDIT), this.generateEditJSON()).then(\r\n            response => {\r\n                console.log(response);\r\n                if (response.status === Constants.HTTPS_STATUS_OK) {\r\n                    this.setState({\r\n                        datacenterName:\"\",\r\n                        datacenterAbbreviation:\"\",\r\n                    }, () => {this.props.search(); this.props.close() } );\r\n                } else {\r\n                    this.setState({\r\n                    })\r\n                }\r\n            });\r\n    }\r\n\r\n    updateDatacenterName = (event) => {\r\n        this.setState({ datacenterName: event.target.value });\r\n    }\r\n\r\n    updateDatacenterAbbrevation = (event) => {\r\n        this.setState({ datacenterAbbreviation: this.getAbbreviation(event.target.value) });\r\n    }\r\n\r\n    getAbbreviation = (val) => {\r\n        if (val.length > 6) {\r\n            return val.substring(0,7);\r\n        }\r\n\r\n        return val;\r\n\t}\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={this.props.show}\r\n                onClose={this.props.close}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                scroll=\"body\"\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={this.props.show}>\r\n                    <div className={classes.paper}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={2}>\r\n                                <Typography>Datcenter Name:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <TextField\r\n                                    id=\"input-rack\"\r\n                                    variant=\"outlined\"\r\n                                    label={\"datacenter-name\"}\r\n                                    name={\"datacenter-name\"}\r\n\t\t\t\t\t\t\t\t\tonChange={this.updateDatacenterName}\r\n\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterName||this.props.dcName}\r\n                                    required\r\n\t\t\t\t\t\t\t\t\tfullWidth\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={2}>\r\n                                <Typography>Datcenter Abbreviation:</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={9}>\r\n                                <Tooltip placement=\"top\" title={\"Max 6 characters\"}>\r\n                                    <TextField\r\n                                        id=\"input-rack\"\r\n                                        variant=\"outlined\"\r\n                                        label={\"datacenter-abbreviation\"}\r\n                                        name={\"datacenter-abbreviation\"}\r\n                                        onChange={this.updateDatacenterAbbrevation}\r\n\t\t\t\t\t\t\t\t\t\tvalue={this.state.datacenterAbbreviation||this.props.dcAbbrev}\r\n                                        required\r\n\t\t\t\t\t\t\t\t\t\tfullWidth\r\n                                    />\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tonClick={() => { this.editDatacenter() }}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tSave Edits\r\n\t\t\t\t\t\t\t\t</Button>\r\n                            </Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={12}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\t\t\tonClick={this.props.close}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tCancel\r\n\t\t\t\t\t\t\t\t</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(EditDatacenter);\r\n","import React from 'react';\r\n\r\nimport { fade, withStyles, SvgIcon, Collapse, Grid, Typography } from '@material-ui/core';\r\nimport { TreeView, TreeItem } from '@material-ui/lab';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport \"../stylesheets/RackStyles.css\";\r\n\r\nimport ErrorBoundray from '../../errors/ErrorBoundry';\r\nimport { useSpring, animated } from 'react-spring/web.cjs';\r\n\r\nfunction MinusSquare(props) {\r\n    return (\r\n      <SvgIcon fontSize=\"inherit\" {...props}>\r\n        {/* tslint:disable-next-line: max-line-length */}\r\n        <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 11.023h-11.826q-.375 0-.669.281t-.294.682v0q0 .401.294 .682t.669.281h11.826q.375 0 .669-.281t.294-.682v0q0-.401-.294-.682t-.669-.281z\" />\r\n      </SvgIcon>\r\n    );\r\n  }\r\n\r\nfunction PlusSquare(props) {\r\n  return (\r\n    <SvgIcon fontSize=\"inherit\" {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0zM17.873 12.977h-4.923v4.896q0 .401-.281.682t-.682.281v0q-.375 0-.669-.281t-.294-.682v-4.896h-4.923q-.401 0-.682-.294t-.281-.669v0q0-.401.281-.682t.682-.281h4.923v-4.896q0-.401.294-.682t.669-.281v0q.401 0 .682.281t.281.682v4.896h4.923q.401 0 .682.281t.281.682v0q0 .375-.281.669t-.682.294z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction CloseSquare(props) {\r\n  return (\r\n    <SvgIcon className=\"close\" fontSize=\"inherit\" {...props}>\r\n      {/* tslint:disable-next-line: max-line-length */}\r\n      <path d=\"M17.485 17.512q-.281.281-.682.281t-.696-.268l-4.12-4.147-4.12 4.147q-.294.268-.696.268t-.682-.281-.281-.682.294-.669l4.12-4.147-4.12-4.147q-.294-.268-.294-.669t.281-.682.682-.281.696 .268l4.12 4.147 4.12-4.147q.294-.268.696-.268t.682.281 .281.669-.294.682l-4.12 4.147 4.12 4.147q.294.268 .294.669t-.281.682zM22.047 22.074v0 0-20.147 0h-20.12v0 20.147 0h20.12zM22.047 24h-20.12q-.803 0-1.365-.562t-.562-1.365v-20.147q0-.776.562-1.351t1.365-.575h20.147q.776 0 1.351.575t.575 1.351v20.147q0 .803-.575 1.365t-1.378.562v0z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nfunction TransitionComponent(props) {\r\n  const style = useSpring({\r\n    from: { opacity: 0, transform: 'translate3d(20px,0,0)' },\r\n    to: { opacity: props.in ? 1 : 0, transform: `translate3d(${props.in ? 0 : 20}px,0,0)` },\r\n  });\r\n\r\n  return (\r\n    <animated.div style={style}>\r\n      <Collapse {...props} />\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nTransitionComponent.propTypes = {\r\n  /**\r\n   * Show the component; triggers the enter or exit states\r\n   */\r\n  in: PropTypes.bool,\r\n};\r\n\r\nconst StyledTreeItem = withStyles(theme => ({\r\n    iconContainer: {\r\n      '& .close': {\r\n        opacity: 0.3,\r\n      },\r\n    },\r\n    group: {\r\n      marginLeft: 12,\r\n      paddingLeft: 12,\r\n      borderLeft: `1px dashed ${fade(theme.palette.text.primary, 0.4)}`,\r\n    },\r\n  }))(props => <TreeItem {...props} TransitionComponent={TransitionComponent} />);\r\n\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n      },\r\n  });\r\n\r\nclass RacksView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [],\r\n            firstRack: 'A1',\r\n            secondRack: 'A1',\r\n\r\n            showStatus: false,\r\n            statusMessage: '',\r\n            statusSeverity: 'info',\r\n\r\n            showConfirmationBox: false,\r\n\r\n            racksList: [],\r\n            racks: {}\r\n        };\r\n    }\r\n\r\n    handleFormat = (event, newFormats) => {\r\n        if (newFormats.length) {\r\n            this.setState({formats: newFormats});\r\n        }\r\n    };\r\n\r\n    closeShowStatus = () => {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    closeConfirmationBox = () => {\r\n        this.setState({ showConfirmationBox: false });\r\n    }\r\n\r\n    sortRacks = (rack1, rack2) => {\r\n      var num1 = parseInt(rack1.substr(1));\r\n      var num2 = parseInt(rack2.substr(1));\r\n\r\n      return num1 > num2;\r\n    }\r\n\r\n    deleteRack = (value) => {\r\n      console.log(value);\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <ErrorBoundray>\r\n                <Grid\r\n                    container\r\n                    spacing={5}\r\n                    direction=\"row\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"f\r\n                    style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                >\r\n\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"h5\">Racks</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TreeView\r\n                            className={classes.root}\r\n                            defaultExpanded={['1']}\r\n                            defaultCollapseIcon={<MinusSquare />}\r\n                            defaultExpandIcon={<PlusSquare />}\r\n                        >\r\n                            {Object.keys(this.props.racks).sort().map(key => {\r\n                                return (<StyledTreeItem nodeId={key} label={key}>\r\n                                        {this.props.racks[key].sort(this.sortRacks).map(value => {\r\n                                            return (<StyledTreeItem nodeId={value} label={value} />);\r\n                                        })}\r\n                                    </StyledTreeItem>);\r\n                            })}\r\n                        </TreeView>\r\n                    </Grid>\r\n                </Grid>\r\n            </ErrorBoundray>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(RacksView);\r\n","export enum RackCommand {\r\n    GET_ALL_RACKS = \"all\",\r\n    CREATE_RACKS = \"create\",\r\n    DELETE_RACKS = \"delete\",\r\n    GET_RACK_DETAILS = \"details\"\r\n}\r\n","import React from \"react\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Grid, Paper, TextField, Modal, Backdrop, Fade } from '@material-ui/core';\r\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\r\n\r\nimport { RackCommand } from \"../../enums/RackCommands.ts\";\r\n\r\n\r\n\r\nexport default function ShowDatacenters(props) {\r\n    const [rackType, setRackType] = React.useState('single');\r\n    const [rack1, setRack1] = React.useState('A1');\r\n    const [rack2, setRack2] = React.useState('A1');\r\n\r\n    const handleRackType = (event, newType) => {\r\n        setRackType(newType);\r\n      };\r\n\r\n      const updateRack = (event) => {\r\n        setRack1(event.target.value);\r\n        setRack2(event.target.value);\r\n      }\r\n\r\n      const updateStart = (event) => {\r\n        setRack1(event.target.value);\r\n      }\r\n\r\n      const updateEnd = (event) => {\r\n        setRack2(event.target.value);\r\n      }\r\n\r\n    const createRacks = () => {\r\n        props.updateRacks(RackCommand.CREATE_RACKS, rack1, rack2);\r\n    }\r\n\r\n    const deleteRacks = () => {\r\n        props.updateRacks(RackCommand.DELETE_RACKS, rack1, rack2);\r\n    }\r\n\r\n    const viewRacks = () => {\r\n        props.updateRacks(RackCommand.GET_RACK_DETAILS, rack1, rack2);\r\n    }\r\n\r\n    try {\r\n        if (props.datacentersList.length == 0) {\r\n            return <Typography>There are currently no datacenters being managed.</Typography>\r\n        } else {\r\n            return (<div>{\r\n                <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                    <Paper elevation={3}>\r\n                    {!(props.privilege.admin || props.privilege.asset) ? null :\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{\"padding\": \"10px\"}}\r\n                    >\r\n\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Manage\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={(event) => {props.editDatacenter(event, props.dc.name, props.dc.abbreviation)} }\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid container item direciton=\"row\" justify=\"center\" alignItems=\"center\" xs={12}>\r\n                            <hr style={{width: \"5vw\"}} />\r\n                            <Typography color=\"textSecondary\">\r\n                                Or\r\n                            </Typography>\r\n                            <hr style={{width: \"5vw\"}} />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={(event) => {props.openConfirmationBox(event, props.selectedDatacenter)} }\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>}\r\n                    </Paper>\r\n                </Grid>\r\n\r\n                {props.isOfflineStorage ? null :\r\n                <Grid item xs={3}>\r\n                <Paper elevation={3}>\r\n                    <Grid\r\n                        container\r\n                        spacing={2}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{\"padding\": \"10px\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h6\">\r\n                                Racks\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid container item direction=\"row\" justify=\"center\" xs={12}>\r\n                            <ToggleButtonGroup\r\n                                value={rackType}\r\n                                exclusive\r\n                                onChange={handleRackType}\r\n                                aria-label=\"rack type\"\r\n                            >\r\n                                <ToggleButton value=\"single\" aria-label=\"single-rack\">\r\n                                    Single\r\n                                </ToggleButton>\r\n                                <ToggleButton value=\"range\" aria-label=\"range-rack\">\r\n                                    Range\r\n                                </ToggleButton>\r\n                            </ToggleButtonGroup>\r\n                        </Grid>\r\n\r\n                        {rackType === \"single\" ? <Grid item xs={12}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Rack\" name=\"rack1\" onChange={updateRack}/>\r\n                        </Grid> : <Grid container item spacing={3} direciton=\"row\" justify=\"center\"><Grid item xs={6}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"Start Rack (e.g. A1)\" name=\"rack1\" onChange={updateStart}/>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField id=\"standard-basic\" variant=\"outlined\" label=\"End Rack (e.g. B10)\" name=\"rack2\" onChange={updateEnd}/>\r\n                        </Grid></Grid> }\r\n                        {!(props.privilege.admin || props.privilege.asset || props.privilege.datacenters.includes(props.selectedDatacenter)) ? null :\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                style={{ width: \"100%\", backgroundColor: \"green\", color: \"white\" }}\r\n                                onClick={createRacks}\r\n                            >\r\n                                Create\r\n                            </Button>\r\n                        </Grid>}\r\n                        {!(props.privilege.admin || props.privilege.asset || props.privilege.datacenters.includes(props.selectedDatacenter)) ? null :\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                style={{ width: \"100%\" }}\r\n                                onClick={deleteRacks}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>}\r\n                    </Grid>\r\n\r\n                    </Paper>\r\n                </Grid>}\r\n            </Grid>\r\n            }\r\n            </div>\r\n            );\r\n        }\r\n    } catch (exception) {\r\n        console.log(exception);\r\n        return <Typography>Could not load any datacenters at this time</Typography>\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../enums/DatacenterCommands.ts\";\r\nimport RacksView from \"../pages/RacksView\";\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\nimport CreateDatacenter from \"./CreateDatacenter\";\r\nimport { Privilege } from '../../enums/privilegeTypes.ts';\r\nimport EditDatacenter from \"./EditDatacenter\";\r\nimport ShowDatacenters from \"./functions/ShowDatacenters\";\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    progress: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n          marginLeft: theme.spacing(2),\r\n        },\r\n        justify:\"center\",\r\n        alignItems:\"center\",\r\n      },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n  });\r\n\r\nclass ConfirmDeteleDC extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<Modal\r\n                    aria-labelledby=\"transition-modal-title\"\r\n                    aria-describedby=\"transition-modal-description\"\r\n                    className={classes.modal}\r\n                    open={this.props.showConfirmationBox}\r\n                    onClose={this.props.closeConfirmationBox}\r\n                    closeAfterTransition\r\n                    BackdropComponent={Backdrop}\r\n                    BackdropProps={{\r\n                    timeout: 500,\r\n                    }}\r\n                >\r\n                    <Fade in={this.props.showConfirmationBox}>\r\n                        <div className={classes.paper}>\r\n                            <Grid container spacing={5}>\r\n                                <Grid item xs={12}>\r\n                                    Are you sure you wish to delete?\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={this.props.deleteDatacenter}\r\n                                    >\r\n                                        Yes\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item xs={1}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => this.props.closeConfirmationBox()}\r\n                                    >\r\n                                        No\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </div>\r\n                    </Fade>\r\n                </Modal>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withStyles(useStyles)(ConfirmDeteleDC);\r\n","import React, { Component } from 'react'\r\n\r\nimport axios from \"axios\";\r\n\r\nimport {\r\n\twithStyles,\r\n\tTypography,\r\n\tCircularProgress,\r\n\tPaper,\r\n} from \"@material-ui/core\";\r\n\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport DetailAsset from \"../../assets/helpers/DetailsAsset\";\r\n\r\nconst decomType = \"decommissioned\";\r\n\r\nconst useStyles = theme => ({\r\n\troot: {\r\n\t\talign: \"center\",\r\n\t},\r\n\tindex: {\r\n\t\tbackgroundColor: \"#000000\",\r\n\t\tcolor: \"#FFFFFF\",\r\n\t\twidth: \"15%\",\r\n\t\tdisplay: \"inline-block\",\r\n\t\tpaddingLeft: \"5%\",\r\n\t},\r\n\tasset: {\r\n\t\twidth: \"70%\",\r\n\t\tdisplay: \"inline-block\"\r\n\t},\r\n\ttitle: {\r\n\t\tbackgroundColor: \"#A9A9A9\",\r\n\t\twidth: \"100%\",\r\n\t\talign: \"center\",\r\n\t\tpaddingLeft: \"45%\",\r\n\t},\r\n\tfooter: {\r\n\t\tbackgroundColor: \"#A9A9A9\",\r\n\t\tcolor:\"#A9A9A9\",\r\n\t\twidth: \"100%\",\r\n\t\talign: \"center\",\r\n\t\tpaddingLeft: \"45%\",\r\n\t},\r\n\track: {\r\n\t\tdisplay: \"inline-block\",\r\n\t\twidth: \"20%\",\r\n\t\tmargin: \"2%\",\r\n\t}\r\n\r\n});\r\n\r\nclass RackDiagrams extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tshowDetailedView: false,\r\n\t\t\tdetailAsset: null,\r\n\r\n\t\t};\r\n\t}\r\n\r\n\topenAssetDetails = (assetNum) => {\r\n\t\tif (assetNum > 10000) {\r\n\t\t\taxios.post(getURL(Constants.ASSETS_MAIN_PATH, \"detailView/\"),\r\n\t\t\t\t{\r\n\t\t\t\t\t\"asset_number\": assetNum\r\n\t\t\t\t}\r\n\t\t\t).then(response => {\r\n\t\t\t\tthis.setState({ detailAsset: response.data.instances[0], showDetailedView: true });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tcloseDetailedView = () => {\r\n\t\tthis.setState({ showDetailedView: false });\r\n\t}\r\n\r\n\tgetAssetList = () => {\r\n\r\n\t}\r\n\r\n\tshowStatusBar = (status, severity, message) => {\r\n\t\tthis.setState({ showStatus: status, statusSeverity: severity, statusMessage: message });\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tconst { classes } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className={classes.root}>\r\n\t\t\t\t{this.props.racks.length > 0 ?\r\n\t\t\t\t\tthis.props.racks.map((rack, index) => (\r\n\t\t\t\t\t\t<span className={classes.rack}>\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tclassName={classes.title}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{rack.rackTitle}\r\n\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t{rack.racks.map(rack => (\r\n\t\t\t\t\t\t\t\t<div onClick={() => this.openAssetDetails(rack.assetNum)}>\r\n\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.index}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{rack.index + \" \"}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t{rack.title !== \"\" ?\r\n\t\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ background: rack.color, display: \"inline-block\", width: \"70%\", color: rack.textColor, paddingLeft:\"3%\" }}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{rack.title}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\r\n\t\t\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\t\tstyle={{ background: rack.color, display: \"inline-block\", width: \"70%\", color: rack.color, }}\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t{\".\"}\r\n\t\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.index}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{\" \" + rack.index}\r\n\t\t\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t))}\r\n\r\n\t\t\t\t\t\t\t<Typography\r\n\t\t\t\t\t\t\t\tclassName={classes.footer}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{\".\"}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t))\r\n\t\t\t\t\t: null}\r\n\r\n\r\n\t\t\t\t{this.state.showDetailedView ?\r\n\t\t\t\t\t<DetailAsset\r\n\t\t\t\t\t\tclose={this.closeDetailedView}\r\n\t\t\t\t\t\tshowStatus={this.showStatusBar}\r\n\t\t\t\t\t\tsearch={this.props.getRacks}\r\n\t\t\t\t\t\tfetchAllAssets={this.props.getRacks}\r\n\t\t\t\t\t\topen={this.state.showDetailedView}\r\n\t\t\t\t\t\tprivilege={this.props.privilege}\r\n\t\t\t\t\t\tusername={this.props.username}\r\n\t\t\t\t\t\tasset={this.state.detailAsset}\r\n\t\t\t\t\t\tdisabled={(!(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.includes(this.state.detailAsset.datacenter_name)) || this.state.assetType === decomType)}\r\n\t\t\t\t\t\tchangePlanActive={false}\r\n\t\t\t\t\t\tchangePlanID={\"\"}\r\n\t\t\t\t\t\tchangePlanStep={-1}\r\n\t\t\t\t\t\tincrementChangePlanStep={null}\r\n\t\t\t\t\t\tchangePlanName={\"\"}\r\n\t\t\t\t\t\tshowDecommissioned={false}\r\n\t\t\t\t\t/> : null}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(RackDiagrams);\r\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport { Grid, CircularProgress, Typography, withStyles, Paper } from '@material-ui/core/';\nimport getURL from \"../../helpers/functions/GetURL\";\nimport * as Constants from \"../../Constants\";\nimport { DatacenterCommand } from \"../enums/DatacenterCommands.ts\";\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\nimport CreateDatacenter from \"../helpers/CreateDatacenter\";\nimport { Privilege } from '../../enums/privilegeTypes.ts';\nimport EditDatacenter from \"../helpers/EditDatacenter\";\nimport ConfirmDeteleDC from \"../helpers/ConfirmDeleteDC\";\nimport ShowDatacenters from \"../helpers/functions/ShowDatacenters\";\nimport RacksView from './RacksView';\nimport { RackCommand } from \"../enums/RackCommands.ts\";\nimport StatusDisplay from '../../helpers/StatusDisplay';\nimport RackDiagrams from \"../helpers/RackDiagrams\";\n\n\nconst racksMainPath = 'racks/';\n\nfunction createRackElem(color, title, index, assetNum, textColor) {\n    return { color, title, index, assetNum, textColor };\n}\n\nfunction createRack(rackTitle, racks) {\n    return { rackTitle, racks }\n}\n\nfunction sort(a, b) {\n    if (a.rackTitle > b.rackTitle) return 1;\n    if (a.rackTitle < b.rackTitle) return -1;\n    return 0;\n}\n\nfunction sortRack(a, b) {\n    if (a.index > b.index) return -1;\n    if (a.index < b.index) return 1;\n    return 0;\n}\n\nfunction sortAssets(a, b) {\n    if (a.rack_position > b.rack_position) return 1;\n    if (a.rack_position < b.rack_position) return -1;\n    return 0;\n}\n\nconst useStyles = theme => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    progress: {\n        display: 'flex',\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n        justify: \"center\",\n        alignItems: \"center\",\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    paper: {\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n});\n\n\nclass DatacenterView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            datacentersList: [],\n            loadingDCList: true,\n            showConfirmationBox: false,\n            currentDatacenter: \"\",\n            showEditDC: false,\n            editDCName: \"\",\n            editDCAbbr: \"\",\n            selectedDatacenter: \"\",\n            abbreviation: \"\",\n            fullDatacenter: {},\n            racks: {},\n            is_offline_storage:false,\n        };\n    }\n\n    componentDidMount() {\n        this.getDatacenters();\n    }\n\n    getDatacenters = () => {\n        this.setState({ loadingDCList: true });\n        axios.get(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.GET_ALL_DATACENTERS)).then(\n            response => {\n                console.log(response.data.datacenters);\n                var datacenter = response.data.datacenters[0];\n                console.log(datacenter);\n                var name = datacenter === undefined ? \"\" : datacenter.name;\n                var abbreviation = datacenter === undefined ? \"\" : datacenter.abbreviation;\n                console.log(name);\n                this.setState({ datacentersList: response.data.datacenters, loadingDCList: false, selectedDatacenter: name, fullDatacenter: datacenter, abbreviation: abbreviation }, () => this.getRacks());\n            }\n        );\n    }\n\n    deleteDatacenter = () => {\n        console.log(this.state.currentDatacenter);\n        axios.post(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.DELETE),\n            {\n                \"datacenter_name\": this.state.currentDatacenter\n            }\n        ).then(\n            response => {\n                console.log(\"Deleteting\");\n                console.log(response);\n                if (response.data.message === \"success\") {\n                    this.setState({\n                        showConfirmationBox: false,\n                        showStatus: true,\n                        statusMessage: \"Successfully deleted site\",\n                        statusSeverity: \"success\",\n                    });\n                    this.getDatacenters();\n                } else {\n                    this.setState({\n                        showConfirmationBox: false,\n                        showStatus: true,\n                        statusMessage: response.data.message,\n                        statusSeverity: \"error\",\n                    });\n                }\n\n            }\n        );\n    }\n\n    openConfirmationBox = (event, datacenter) => {\n        this.setState({ showConfirmationBox: true, currentDatacenter: datacenter });\n    }\n\n    closeConfirmationBox = () => {\n        this.setState({ showConfirmationBox: false });\n    }\n\n    openEditDatacenter = (event, datacenterName, datacenterAbbrev) => {\n        this.setState({ editDCName: datacenterName, editDCAbbr: datacenterAbbrev }, () => this.setState({ showEditDC: true, }));\n    }\n\n    closeEditDatacenter = () => {\n        this.setState({\n            showEditDC: false,\n            editDCName: \"\",\n            editDCAbbr: \"\",\n            showStatus: false,\n            statusMessage: '',\n            statusSeverity: 'info',\n            isOfflineStorage: false,\n            selectedDatacenter: \"\",\n            fullDatacenter: \"\",\n\n            racks: [],\n        });\n    }\n\n    closeShowStatus = () => {\n        this.setState({ showStatus: false });\n    }\n\n    updateRacks = (command, rack1, rack2) => {\n        axios.post(\n            getURL(racksMainPath, command),\n            {\n                'start_letter': rack1[0],\n                'stop_letter': rack2[0],\n                'start_number': rack1.substring(1),\n                'stop_number': rack2.substring(1),\n                \"datacenter_name\": this.state.selectedDatacenter,\n            }\n        ).then(response => {\n            if (response.data.message === 'success') {\n                this.setState({ showStatus: true, statusMessage: \"Success\", statusSeverity: \"success\", showConfirmationBox: false }, () => this.getRacks());\n                if (command === RackCommand.GET_RACK_DETAILS) {\n                    const win = window.open(response.data.link, '_blank');\n                    if (win != null) {\n                        win.focus();\n                    }\n                }\n            } else {\n                this.setState({ showStatus: true, statusMessage: response.data.message, statusSeverity: \"error\" })\n            }\n        });\n    }\n\n    updateDatacenter = (event) => {\n        console.log(event.target.value);\n        this.setState({is_offline_storage:event.target.value.is_offline_storage, selectedDatacenter: event.target.value.name, abbreviation:event.target.value.abbreviation, fullDatacenter: event.target.value, isOfflineStorage: event.target.value.is_offline_storage }, () => this.getRacks());\n    }\n\n\n    getChassisData = (rackTitle, rack) => {\n        axios.post(getURL(Constants.ASSETS_MAIN_PATH, \"getbladesbychassis/\"),\n            {\n                \"blade_chassis\": \"\",\n            }\n        ).then(response => {\n            var blades = response.data.instances;\n\n        })\n    }\n\n\n    createDiagram = (startL, stopL, startN, stopN) => {\n        axios.post(getURL(Constants.RACKS_MAIN_PATH, \"details/\"),\n            {\n                \"start_letter\": startL,\n                \"stop_letter\": stopL,\n                \"start_number\": startN,\n                \"stop_number\": stopN,\n                \"datacenter_name\": this.state.selectedDatacenter,\n            }\n        ).then(\n            response => {\n                var assets = response.data.racks[0][startL + startN];\n                assets.sort(sortAssets);\n                var rack = [];\n\n                var numChassis = 0;\n                var index = 0;\n                for (let rackPos = 1; rackPos <= 42; rackPos++) {\n                    if (assets.length > 0 && index < assets.length) {\n                        var asset = assets[index];\n                        if (asset.rack_position === rackPos) {\n                            for (let assetHeight = 0; assetHeight < asset.height; assetHeight++) {\n                                var title = asset.model + \",  \";\n                                title += ((asset.hostname === \"\") ? \"#\" + asset.asset_number : asset.hostname);\n                                if (asset.mount_type === \"chassis\") {\n                                    //numChassis++;\n                                }\n                                title = (assetHeight === Math.floor(asset.height / 2)) ? title : \"\";\n\n                                try {\n                                    var r = parseInt(\"0x\" + asset.display_color.substring(1, 3));\n                                    var g = parseInt(\"0x\" + asset.display_color.substring(3, 5));\n                                    var b = parseInt(\"0x\" + asset.display_color.substring(5));\n\n                                    var textColor = (r + g + b < 300 ? \"#FFFFFF\" : \"#000000\")\n                                } catch {\n                                    var textColor = \"#000000\"\n                                }\n                                rack.push(createRackElem(asset.display_color, title, rackPos + assetHeight, asset.asset_number, textColor));\n\n\n                            }\n                            rackPos += (asset.height - 1);\n                            index++;\n                        } else {\n                            rack.push(createRackElem(\"#FFFFFF\", \"\", rackPos));\n                        }\n\n\n                    } else {\n                        rack.push(createRackElem(\"#FFFFFF\", \"\", rackPos));\n                    }\n                }\n\n                var rackTitle = startL + (startN > 9 ? startN : \" \" + startN);\n                if (numChassis > 0) {\n                    this.getChassisData(rackTitle, rack);\n                } else {\n                    rack.sort(sortRack);\n                    this.state.racks.push(createRack(rackTitle, rack));\n                    this.state.racks.sort(sort)\n                    this.forceUpdate();\n                }\n\n\n            });\n    }\n\n    getRacks = () => {\n        this.state.racks = [];\n        this.forceUpdate();\n        axios.post(getURL(Constants.RACKS_MAIN_PATH, \"all/\"),\n            {\n                \"datacenter_name\": this.state.selectedDatacenter,\n            }\n        ).then(\n            response => {\n                var racks = [];\n                response.data.racks.map(rack => {\n                    racks.push(rack.label);\n                })\n                racks.map(rack => {\n                    var startL = rack.substring(0, 1);\n                    var startN = parseInt(rack.substring(1));\n                    this.createDiagram(startL, startL, startN, startN);\n                });\n            });\n    }\n\n\n\n\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <React.Fragment>\n                <ErrorBoundary>\n                    <Grid\n                        container\n                        spacing={5}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                    >\n                        <Grid item xs={12}>\n                            <Typography variant=\"h4\">\n                                Sites\n                            </Typography>\n                        </Grid>\n                        <CreateDatacenter\n                            disabled={!(this.props.privilege.admin || this.props.privilege.asset)}\n                            search={this.getDatacenters}\n                            selectedDatacenter={this.state.selectedDatacenter}\n                            dc={this.state.fullDatacenter}\n                            selectDatacenter={this.updateDatacenter}\n                            datacenterList={this.state.datacentersList}\n                        />\n\n                        {this.state.loadingDCList ?\n                            <div className={classes.progress}><CircularProgress /></div> :\n\n                            <Grid item xs={12}>\n                                <ShowDatacenters\n                                    classes={classes}\n                                    datacentersList={this.state.datacentersList}\n                                    privilege={this.props.privilege}\n                                    openConfirmationBox={this.openConfirmationBox}\n                                    editDatacenter={this.openEditDatacenter}\n                                    selectedDatacenter={this.state.selectedDatacenter}\n                                    updateRacks={this.updateRacks}\n                                    privilege={this.props.privilege}\n                                    dc={this.state.fullDatacenter}\n                                    isOfflineStorage={this.state.isOfflineStorage}\n                                />\n                            </Grid>}\n                        <Grid item xs={6}>\n                            <EditDatacenter\n                                show={this.state.showEditDC}\n                                close={this.closeEditDatacenter}\n                                dcName={this.state.editDCName}\n                                dcAbbrev={this.state.editDCAbbr}\n                                search={this.getDatacenters}\n                                is_offline_storage={this.state.is_offline_storage}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <ConfirmDeteleDC\n                                showConfirmationBox={this.state.showConfirmationBox}\n                                closeConfirmationBox={this.closeConfirmationBox}\n                                deleteDatacenter={this.deleteDatacenter}\n                                close={this.closeEditDatacneter}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <Paper elevation={1}>\n                        <Typography variant=\"h5\" style={{ padding: \"1%\" }}>Datacenter Name: {this.state.selectedDatacenter}</Typography>\n                        <Typography variant=\"h5\" style={{ padding: \"1%\" }}>Datacenter Abbreviation: {this.state.abbreviation}</Typography>\n                    </Paper>\n                    {this.state.isOfflineStorage ? null :\n                        <RackDiagrams\n                            privilege={this.props.privilege}\n                            username={this.props.username}\n                            getRacks={this.getRacks}\n                            racks={this.state.racks}\n                        />\n                    }\n                    <StatusDisplay\n                        open={this.state.showStatus}\n                        severity={this.state.statusSeverity}\n                        closeStatus={this.closeShowStatus}\n                        message={this.state.statusMessage}\n                    />\n                </ErrorBoundary>\n            </React.Fragment>\n        );\n    }\n}\n\n\nexport default withStyles(useStyles)(DatacenterView);\n","export enum StatsCommand {\r\n    GENERATE_REPORT = \"generate-report\",\r\n    TEST = \"test\",\r\n}\r\n","import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\nimport DatacenterView from \"./DatacentersView\";\r\nimport { Privilege } from '../../enums/privilegeTypes';\r\n\r\nconst useStyles = theme => ({\r\n\r\n  });\r\n\r\nclass DatacenterManagerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorBoundary>\r\n                    <DatacenterView privilege={this.props.privilege} username={this.props.uesername} />\r\n                </ErrorBoundary>\r\n            </React.Fragment>\r\n        );\r\n}\r\n  }\r\n\r\n\r\n  export default withStyles(useStyles)(DatacenterManagerView);\r\n","export default function jsonToArr(incomingJSON) {\r\n    var json = {};\r\n    try {\r\n        json = JSON.parse(incomingJSON);\r\n    } catch (e) {\r\n        json = incomingJSON;\r\n    }\r\n\r\n    if (Object.entries(json).length === 0 && json.constructor === Object) {\r\n        return [];\r\n    }\r\n\r\n    const items = [];\r\n\r\n    Object.keys(json).map((key) => {\r\n        const row = [];\r\n        row.push(key);\r\n        row.push(json[key]);\r\n        items.push(row);\r\n\r\n        return key;\r\n    });\r\n    return items;\r\n}\r\n","export enum LogCommand {\r\n    TEST = \"test/\",\r\n    GET_LOGS = \"getlogs/\",\r\n}\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport getURL from '../../helpers/functions/GetURL';\r\nimport * as Constants from \"../../Constants\";\r\nimport { DatacenterCommand } from \"../../racks/enums/DatacenterCommands.ts\";\r\nimport { StatsCommand } from \"../enums/StatsCommands.ts\";\r\nimport JSONtoArr from \"../../helpers/functions/JSONtoArr\";\r\nimport StatusDisplay from '../../helpers/StatusDisplay';\r\nimport ErrorBoundray from '../../errors/ErrorBoundry';\r\nimport { Select, MenuItem, InputLabel, Grid, Paper, Typography, Button } from '@material-ui/core';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails, CircularProgress } from '@material-ui/core';\r\n\r\nconst statsMainPath = 'stats/';\r\nconst tables = {\r\n    \"totalUsage\": \"Total Usage\",\r\n    \"spaceUsage\": \"Space Usage\",\r\n    \"vendorUsage\": \"Vendor Usage\",\r\n    \"modelUsage\": \"Model Usage\",\r\n    \"ownerUsage\": \"Owner Usage\",\r\n}\r\n\r\nconst tableCols = {\r\n    \"totalUsage\": [\"Total\", \"Usage\"],\r\n    \"spaceUsage\": [\"Rack\", \"Usage\"],\r\n    \"vendorUsage\": [\"Vendor\", \"Usage\"],\r\n    \"modelUsage\": [\"Model\", \"Usage\"],\r\n    \"ownerUsage\": [\"Ownder\", \"Usage\"],\r\n}\r\n\r\nexport default class StatisticsView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loadingDatacenters: true,\r\n            datacenterList: [],\r\n            selectedDatacenter: 'All Datacenters',\r\n            tableValues: {\r\n                \"totalUsage\": [],\r\n                \"spaceUsage\": [],\r\n                \"vendorUsage\": [],\r\n                \"modelUsage\": [],\r\n                \"ownerUsage\": [],\r\n            },\r\n            totalUsage: [],\r\n            spaceUsage: [],\r\n            vendorUsage: [],\r\n            modelUsage: [],\r\n            ownerUsage: [],\r\n\r\n            showStatus: false,\r\n            statusMessage: '',\r\n            statusSeverity: '',\r\n        };\r\n\r\n        this.closeShowStatus = this.closeShowStatus.bind(this);\r\n\r\n        axios.defaults.headers.common['token'] = this.props.token;\r\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDatacenters();\r\n\r\n        var event = {\r\n            target: {\r\n                value:\"All Datacenters\",\r\n            }\r\n        }\r\n        this.generateReport(event);\r\n    }\r\n\r\n    getDatacenters = () => {\r\n        axios.get(getURL(Constants.DATACENTERS_MAIN_PATH, DatacenterCommand.GET_ALL_DATACENTERS)).then(\r\n            response => {\r\n                console.log(response);\r\n                this.setState({ datacenterList: response.data.datacenters, loadingDatacenters: false });\r\n            }\r\n        );\r\n    }\r\n\r\n    generateReport = (event) => {\r\n        var dc = event.target.value;\r\n        this.setState({ selectedDatacenter: dc, generatingReport: true });\r\n        axios.post(getURL(statsMainPath, StatsCommand.GENERATE_REPORT), {\r\n            'datacenter_name': dc.name === \"All Datacenters\" ? \"\" : dc.name,\r\n        }).then(response => {\r\n            try {\r\n                var data = response.data;\r\n                var totalUsage = [];\r\n                var totalUsageRow = [\"Total Usage\"];\r\n                totalUsageRow.push(data[\"totalUsage\"]);\r\n                totalUsage.push(totalUsageRow);\r\n\r\n                var spaceUsage = JSONtoArr(data[\"spaceUsage\"]);\r\n                if (spaceUsage.length === 0) {\r\n                    spaceUsage.push([\"No space is currently being used\", []])\r\n                }\r\n                var vendorUsage = JSONtoArr(data[\"vendorUsage\"]);\r\n                if (vendorUsage.length === 0) {\r\n                    vendorUsage.push([\"No vendors currently using space\", []])\r\n                }\r\n                var modelUsage = JSONtoArr(data[\"modelUsage\"]);\r\n                if (modelUsage.length === 0) {\r\n                    modelUsage.push([\"No models currently using space\", []])\r\n                }\r\n                var ownerUsage = JSONtoArr(data[\"ownerUsage\"]);\r\n                if (ownerUsage.length === 0) {\r\n                    ownerUsage.push([\"No owners currently using space\", []])\r\n                }\r\n\r\n                this.setState({\r\n                    showStatus: true,\r\n                    statusSeverity: \"success\",\r\n                    statusMessage: \"Successfully generated Report\",\r\n                    tableValues: {\r\n                        \"totalUsage\": totalUsage,\r\n                        \"spaceUsage\": spaceUsage,\r\n                        \"vendorUsage\": vendorUsage,\r\n                        \"modelUsage\": modelUsage,\r\n                        \"ownerUsage\": ownerUsage,\r\n                    },\r\n                })\r\n            } catch {\r\n                this.setState({ showStatus: true, statusMessage: \"Failed to generate Report\", statusSeverity: \"error\" })\r\n            }\r\n\r\n            this.setState({ generatingReport: false })\r\n        });\r\n    }\r\n\r\n    closeShowStatus() {\r\n        this.setState({ showStatus: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ErrorBoundray >\r\n                    <StatusDisplay\r\n                        open={this.state.showStatus}\r\n                        severity={this.state.statusSeverity}\r\n                        closeStatus={this.closeShowStatus}\r\n                        message={this.state.statusMessage}\r\n                    />\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Reports\r\n                        </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            {this.state.loadingDatacenters || this.state.generatingReport ?\r\n                                <CircularProgress /> :\r\n                                <span>\r\n                                    <InputLabel id=\"datacenter-select-label\">Select Datacenter</InputLabel>\r\n                                    <Select\r\n                                        name='datacenter_name'\r\n                                        id=\"datacenter-select\"\r\n                                        value={this.state.selectedDatacenter}\r\n                                        onChange={(event) => this.generateReport(event)}\r\n                                        style={{ width: \"100%\" }}\r\n                                    >\r\n                                        <MenuItem value=\"All Datacenters\">All Datacenters</MenuItem>\r\n                                        {this.state.datacenterList.map(value => {\r\n                                            if (!value.is_offline_storage) {\r\n                                                return (<MenuItem value={value}>{value[\"name\"]}</MenuItem>);\r\n                                            }\r\n                                        })}\r\n                                    </Select>\r\n                                </span>\r\n                            }\r\n                        </Grid>\r\n                    </Grid>\r\n                    <div>\r\n\r\n                    </div>\r\n                    {Object.keys(tables).map(key => (\r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                            >\r\n                                <Typography>{tables[key]}</Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n                                <TableContainer component={Paper}>\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow >\r\n                                                {tableCols[key].map(column => (<TableCell><span id={column}>{column}</span></TableCell>))}\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {this.state.tableValues[key].map(row => (\r\n                                                <TableRow>\r\n                                                    {row.map(column => (<TableCell><span id={column}>{column + (isNaN(column) ? \"\" : \"%\")}</span></TableCell>))}\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n                    ))}\r\n                </ErrorBoundray>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\"\r\n\r\nimport axios from 'axios';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core/\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport { TextField } from '@material-ui/core';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport { LogCommand } from \"../enums/LogCommands.ts\";\r\nimport getURL from \"../../helpers/functions/GetURL\";\r\nimport * as Constants from \"../../Constants\";\r\nimport ErrorBoundary from \"../../errors/ErrorBoundry\";\r\n\r\nconst useStyles = {\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    searchbar: {\r\n        minWidth: \"200px\",\r\n        flexGrow: 1,\r\n    },\r\n  };\r\n\r\nfunction makeTableData(index, timestamp, type, message) {\r\n    return { index, timestamp, type, message };\r\n}\r\n\r\nconst typeKey = \"type\";\r\nconst timestampKey = \"timestamp\";\r\nconst USER_KEY = \"user\";\r\nconst ASSET_KEY = \"assets\";\r\n\r\nclass LogsView extends React.Component  {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            logItems:[],\r\n            filteredLogs:[],\r\n            allLogs:null,\r\n            filterUser:\"\",\r\n            filterAsset:\"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getLogs();\r\n    }\r\n\r\n    getLogs = () => {\r\n        axios.get(getURL(Constants.LOGS_MAIN_PATH, LogCommand.GET_LOGS)).then(response => {\r\n            this.parseLog(response.data.log);\r\n            this.filter();\r\n        });\r\n    }\r\n\r\n    parseLog = (logs) => {\r\n        var items = [];\r\n        logs.map((log, index) => {\r\n            var message = \"\";\r\n            Object.entries(log).map(([key, value]) => {\r\n                if (key === typeKey || key === timestampKey) {\r\n                    return;\r\n                }\r\n                message += value + \"\\n\";\r\n            });\r\n            items.push(makeTableData(index, log[timestampKey], log[typeKey], message));\r\n        });\r\n\r\n        this.setState({ logItems: items, filteredLogs:items, allLogs:logs });\r\n    }\r\n\r\n    filter = () => {\r\n        var user = this.state.filterUser;\r\n        var asset = this.state.filterAsset;\r\n        var filteredItems = [];\r\n\r\n        this.state.allLogs.map(entry => {\r\n            console.log(entry);\r\n            var hasAsset = false;\r\n            var hasUser = false;\r\n\r\n            try {\r\n                if (entry.message.match(/\\[.+\\]/)[0].includes(user)) {\r\n                    hasUser = true;\r\n                }\r\n            } catch {\r\n                hasUser = false;\r\n            }\r\n\r\n\r\n            try {\r\n                if (asset !== \"\") {\r\n                    var assetNum = \"\" + entry.request.asset_number\r\n                    if (assetNum.includes(asset)) {\r\n                        hasAsset = true;\r\n                    }\r\n                } else {\r\n                    hasAsset = true;\r\n                }\r\n            } catch {\r\n                hasAsset = false;\r\n            }\r\n\r\n            if (hasAsset && hasUser) {\r\n                filteredItems.push(entry);\r\n            }\r\n        });\r\n\r\n        filteredItems.sort(function(a, b) {\r\n            if (a.timestamp > b.timestamp) return -1;\r\n            if (a.timestamp < b.timestamp) return 1;\r\n            return 0;\r\n        })\r\n\r\n        this.setState({ filteredLogs:filteredItems });\r\n    }\r\n\r\n    updateFilterUser = (event) => {\r\n        this.setState({ filterUser: event.target.value }, () => { this.filter() });\r\n    }\r\n\r\n    updateFilterAsset = (event) => {\r\n        this.setState({ filterAsset: event.target.value }, () => { this.filter() });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorBoundary>\r\n                    <Grid\r\n                        container\r\n                        spacing={5}\r\n                        direction=\"row\"\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                        style={{margin: \"0px\", maxWidth: \"95vw\"}}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <Typography variant=\"h4\">\r\n                                Logs\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={this.getLogs}\r\n                            >\r\n                                Refresh Logs\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                className={classes.searchbar}\r\n                                name={\"filter-users\"}\r\n                                placeholder=\"Search users\"\r\n                                fullWidth\r\n                                onChange={this.updateFilterUser}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <TextField\r\n                                className={classes.searchbar}\r\n                                name={\"filter-assets\"}\r\n                                placeholder=\"Search assets\"\r\n                                fullWidth\r\n                                onChange={this.updateFilterAsset}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TableContainer component={Paper}>\r\n                                <Table className={classes.table} aria-label=\"simple table\">\r\n                                    <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"left\"><span id={\"timestamp\"} style={{fontWeight: \"bold\"}}>Timestamp</span></TableCell>\r\n                                        <TableCell align=\"left\"><span id={\"type\"} style={{fontWeight: \"bold\"}}>type</span></TableCell>\r\n                                        <TableCell align=\"left\"><span id={\"message\"} style={{fontWeight: \"bold\"}}>Message</span></TableCell>\r\n                                    </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                    {this.state.filteredLogs.map(logItem => (\r\n                                        <TableRow key={logItem.timestamp}>\r\n                                            <TableCell aligh=\"left\">{logItem.timestamp}</TableCell>\r\n                                            <TableCell align=\"left\">{logItem.type}</TableCell>\r\n                                            <TableCell align=\"left\">{logItem.message}</TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Grid>\r\n                    </Grid>\r\n                </ErrorBoundary>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(LogsView);\r\n","// React\nimport React from 'react';\nimport axios from 'axios';\n\n// Helpers\nimport getURL from '../../helpers/functions/GetURL';\nimport StatusDisplay from '../../helpers/StatusDisplay';\nimport ErrorBoundray from '../../errors/ErrorBoundry';\nimport { AssetCommand } from '../../assets/enums/AssetCommands.ts';\n\n// Material UI Core\nimport { Grid, Paper, Typography, Button, withStyles } from '@material-ui/core';\nimport { Modal, Fade, Backdrop, TextField, Chip, IconButton } from '@material-ui/core';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails } from '@material-ui/core';\n\n// Icons\nimport EditIcon from '@material-ui/icons/Edit';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CheckIcon from '@material-ui/icons/Check';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n// Path prefix for change plan routes\nconst changePlanPath = \"changeplans/\";\n\n// CSS styles\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: \"100%\",\n    },\n    grid: {\n        backgroundColor: theme.palette.background.paper,\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n        width: \"50%\"\n    },\n    progress: {\n        display: 'flex',\n        '& > * + *': {\n            marginLeft: theme.spacing(2),\n        },\n    },\n});\n\n// A view to display a user's change plans\nclass ChangePlansView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // Status snackbar\n            statusOpen: false,\n            statusMessage: '',\n            statusSeverity: '',\n\n            // Change plans\n            changePlans: [],\n\n            // Change plan actions\n            changePlanDetails: {},\n\n            // Dialog to rename a change plan\n            renameDialog: false,\n\n            // Name to rename a change plan\n            planName: \"\",\n\n            // Id of change plan to rename\n            planId: null,\n\n            // Dialog to execute a change plan\n            executeDialog: false,\n\n            // Id of change plan to execute\n            executeId: null,\n\n            // Dialog to delete a change plan\n            deleteDialog: false,\n\n            // Id of change plan to delete\n            deleteId: null,\n\n            // Modal to inform user of change plan mode\n            changeDescriptionModal: false,\n\n            // Id of plan to edit\n            editId: null,\n\n            // Step of plan to edit\n            editStep: null,\n\n            // Name of plan to edit\n            editName: \"\",\n\n            // Conflicts\n            conflicts: null,\n\n            // Create change plan modal\n            changePlanModal: false,\n\n            // Name of change plan to create\n            changePlanName: null,\n\n            // Create plan description modal\n            descriptionModal: false,\n        };\n\n        // Axios network request headers\n        axios.defaults.headers.common['token'] = this.props.token;\n        axios.defaults.headers.common['privilege'] = this.props.privilege;\n    }\n\n    // When component appears on screen\n    componentDidMount() {\n        this.fetchAllChangePlans();\n    }\n\n    // Get all change plans for the user\n    fetchAllChangePlans = () => {\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_GET_PLANS), {\n            'owner': this.props.username,\n        }).then(response => {\n            var change_plans = response.data.change_plans;\n            if (change_plans !== null) {\n                this.setState({ changePlans: change_plans });\n\n                // For each change plan, grab details/actions\n                change_plans.forEach(plan => {\n                    axios.post(\n                        getURL(changePlanPath, AssetCommand.CHANGE_PLAN_GET_ACTIONS), {\n                        'change_plan_id': plan.identifier,\n                        'owner': this.props.username,\n                    }).then(response => {\n                        var details = this.state.changePlanDetails;\n                        details[plan.identifier] = response.data.change_plan_actions;\n\n                        this.setState({ changePlanDetails: details });\n                    });\n                });\n            }\n        }\n        );\n    }\n\n    closeShowStatus = () => {\n        this.setState({ showStatus: false })\n    }\n\n    // Enter change plan mode for the given change plan unique id\n    startEditing = () => {\n        this.closeDescriptionModal();\n        this.props.updateChangePlan(true, this.state.editId, this.state.editStep, this.state.editName);\n    }\n\n    // Saves the plan name\n    updatePlanName = (event) => {\n        this.setState({ planName: event.target.value });\n    }\n\n    // Change the name of the change plan with the given unique id\n    renameChangePlan = () => {\n        this.closeRenameDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_EDIT), {\n            'change_plan_id': this.state.planId,\n            'name': this.state.planName,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ planId: null, planName: \"\" });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the dialog to rename the change plan for the given unique id\n    openRenameDialog = (identifier) => {\n        this.setState({ renameDialog: true, planId: identifier });\n    }\n\n    // Close the dialog to rename the change plan\n    closeRenameDialog = () => {\n        this.setState({ renameDialog: false });\n    }\n\n    // Open the dialog to execute the change plan for the given unique id\n    openExecuteDialog = (identifier) => {\n        this.setState({ executeDialog: true, executeId: identifier });\n    }\n\n    // Close the dialog to execute the change plan\n    closeExecuteDialog = () => {\n        this.setState({ executeDialog: false });\n    }\n\n    // Execute the change plan\n    executeChangePlan = () => {\n        this.closeExecuteDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_EXECUTE), {\n            'change_plan_id': this.state.executeId,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ executeId: null });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.props.updateChangePlan(false, null, null, \"\");\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the dialog to delete the change plan for the given unique id\n    openDeleteDialog = (identifier) => {\n        this.setState({ deleteDialog: true, deleteId: identifier });\n    }\n\n    // Close the dialog to delete the change plan\n    closeDeleteDialog = () => {\n        this.setState({ deleteDialog: false });\n    }\n\n    // Delete the change plan\n    deleteChangePlan = () => {\n        this.closeDeleteDialog();\n\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_DELETE), {\n            'change_plan_id': this.state.deleteId,\n            'owner': this.props.username,\n        }).then(response => {\n            this.setState({ deleteId: null });\n            this.fetchAllChangePlans();\n\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Open the description modal\n    openDescriptionModal = (identifier, currentStep, name) => {\n        console.log(currentStep);\n        this.setState({ editId: identifier, editStep: currentStep, editName: name, changeDescriptionModal: true });\n    }\n\n    // Close the description modal\n    closeDescriptionModal = () => {\n        this.setState({ changeDescriptionModal: false });\n    }\n\n    // Close the create description modal\n    closeDescription = () => {\n        this.setState({ descriptionModal: false });\n    }\n\n    // Concatenate network port summaries\n    reducePorts = (portList) => {\n        var result = \"\"\n\n        portList.forEach(port => {\n            if (port.connection_hostname.length > 0) {\n                result += \"Host: \" + port.connection_hostname + \" \";\n            }\n\n            if (port.connection_port.length > 0) {\n                result += \"Port: \" + port.connection_port + \" \";\n            }\n\n            if (port.mac_address.length > 0) {\n                result += \"Mac: \" + port.mac_address + \" \";\n            }\n        });\n\n        return result;\n    }\n\n    // Validate a change plan for conflicts\n    validate = (identifier) => {\n        axios.post(\n            getURL(changePlanPath, \"validateplan/\"), {\n            'change_plan_id': identifier,\n        }).then(response => {\n            console.log(response);\n            var conflicts = response.data.conflicts;\n            if (Object.keys(conflicts).length === 0) {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.conflicts[Object.keys(conflicts)[0]], statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Delete a change plan action\n    deleteAction = (identifier, step) => {\n        axios.post(\n            getURL(changePlanPath, AssetCommand.CHANGE_PLAN_DELETE_ACTION), {\n            'change_plan_id': identifier,\n            'step': step,\n        }).then(response => {\n            this.fetchAllChangePlans();\n            if (response.data.message === \"success\") {\n                this.setState({ statusOpen: true, statusMessage: \"Success\", statusSeverity: \"success\" });\n            } else {\n                this.setState({ statusOpen: true, statusMessage: response.data.message, statusSeverity: \"error\" });\n            }\n        }\n        );\n    }\n\n    // Convert keys from backend to user friendly display names\n    lookup = (key) => {\n        return {\n            \"asset_numberOriginal\": \"Asset Number\",\n            \"model\": \"Model\",\n            \"hostname\": \"Hostname\",\n            \"rack\": \"Rack\",\n            \"rack_position\": \"Rack Position\",\n            \"owner\": \"Owner\",\n            \"comment\": \"Comment\",\n            \"datacenter_name\": \"Datacenter\",\n            \"tags\": \"Tags\",\n            \"network_connections\": \"Network Connections\",\n            \"power_connections\": \"Power Connections\",\n            'asset_number': \"Asset Number\",\n        }[key];\n    }\n\n    // Close snackbar\n    closeShowStatus = () => {\n        this.setState({ statusOpen: false });\n    }\n\n    // Create a new change plan\n    createChangePlan = () => {\n        this.setState({ changePlanModal: true });\n    }\n\n    // Close new change plan modal\n    closeChangePlanModal = () => {\n        this.setState({ changePlanModal: false });\n    }\n\n    // Update new change plan name\n    updatePlanName = (event) => {\n        this.setState({ changePlanName: event.target.value });\n    }\n\n    // Start the new change plan\n    beginChangePlan = () => {\n        this.closeChangePlanModal();\n        this.setState({ descriptionModal: true });\n\n        axios.post(\n            getURL(\"changeplans/\", \"createplan\"),\n            {\n                'owner': this.props.username,\n                'name': this.state.changePlanName,\n            }\n        ).then(response => {\n            this.props.updateChangePlan(true, response.data.change_plan, 1, this.state.changePlanName);\n            this.setState({ changePlanName: null });\n            this.fetchAllChangePlans();\n        });\n    }\nß\n    // Generate the work order pdf\n    generateWorkOrder = (event, id) => {\n        axios.post(getURL(changePlanPath, \"workorder/\"), { \"change_plan_id\": id }, { responseType: 'arraybuffer' }).then(response => {\n            try {\n                var blob = new Blob([response.data], { type: \"application/pdf\" });\n                var link = document.createElement('a');\n                link.href = window.URL.createObjectURL(blob);\n                link.download = \"WorkOrder_\" + new Date() + \".pdf\";\n                link.click();\n            } catch { }\n        })\n    }\n\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <div>\n                <ErrorBoundray >\n                    <StatusDisplay\n                        open={this.state.statusOpen}\n                        severity={this.state.statusSeverity}\n                        closeStatus={this.closeShowStatus}\n                        message={this.state.statusMessage}\n                    />\n                    <Grid\n                        container\n                        spacing={5}\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                    >\n                        <Grid item xs={12}>\n                            <Typography variant=\"h4\">\n                                Change Plans\n                        </Typography>\n                        </Grid>\n                        <Grid item xs={5}></Grid>\n                        <Grid item xs={2}>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                style={{ width: \"100%\" }}\n                                startIcon={<AddCircleIcon />}\n                                onClick={this.createChangePlan}\n                            >\n                                Create Change Plan\n                            </Button>\n                        </Grid>\n                        <Grid item xs={5}></Grid>\n                        <Grid item xs={2}></Grid>\n                        <Grid item xs={8}>\n                            {this.state.changePlans.map(plan => {\n                                const executed = plan.executed === \"True\";\n                                const details = this.state.changePlanDetails[plan.identifier];\n                                var step = 1;\n                                if (details !== undefined) {\n                                    details.forEach(s => {\n                                        step = Math.max(step, s.step);\n                                    });\n\n                                    step = step + 1;\n                                }\n\n                                return (<ExpansionPanel key={plan.identifier}>\n                                    <ExpansionPanelSummary\n                                        expandIcon={<ExpandMoreIcon />}\n                                    >\n                                        <Typography>{plan.name}</Typography>\n                                        {executed ? <Chip size=\"small\" icon={<DoneIcon />} color=\"primary\" label={\"Executed at \" + plan.timestamp} style={{\n                                            marginLeft: \"15px\"\n                                        }} /> : null}\n                                    </ExpansionPanelSummary>\n                                    <ExpansionPanelDetails>\n                                        <Grid\n                                            container\n                                            spacing={3}\n                                            direction=\"row\"\n                                            justify=\"center\"\n                                            alignItems=\"center\"\n                                            style={{ margin: \"0px\", maxWidth: \"95vw\" }}\n                                        >\n                                            <Grid item xs={3}>\n                                                <Button\n                                                    variant=\"contained\"\n                                                    color={\"primary\"}\n                                                    style={{ width: \"100%\" }}\n                                                    onClick={(event) => this.generateWorkOrder(event, plan.identifier)}\n                                                >\n                                                    Generate work order\n                                                </Button>\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ?\n                                                    <Button\n                                                        variant=\"contained\"\n                                                        color=\"primary\"\n                                                        style={{ width: \"100%\" }}\n                                                        startIcon={<ReplayIcon />}\n                                                        onClick={() => { this.openRenameDialog(plan.identifier) }}\n                                                    >\n                                                        Rename\n                                                    </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"default\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<EditIcon />}\n                                                    onClick={() => { this.openDescriptionModal(plan.identifier, step, plan.name) }}\n                                                >\n                                                    Edit\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={12}>\n                                                {this.state.changePlanDetails[plan.identifier] !== undefined ?\n                                                    this.state.changePlanDetails[plan.identifier].map(detail => {\n                                                        var diff = detail.diff;\n\n                                                        if (Object.keys(diff).length == 0) {\n                                                            return null;\n                                                        }\n\n                                                        var isCreate = detail.action === \"create\" || detail.action === \"decommission\";\n                                                        return (<div><TableContainer component={Paper}>\n                                                            <Typography style={{ margin: \"10px\" }}>\n                                                                {detail.action.charAt(0).toUpperCase() + detail.action.slice(1)} Asset Number: {\n                                                                    detail.new_record.asset_numberOriginal === undefined ?\n                                                                        detail.new_record.asset_number : detail.new_record.asset_numberOriginal\n                                                                }\n                                                                {(!executed && detail.action !== \"collateral\") ?\n                                                                    <IconButton\n                                                                        style={{\n                                                                            marginLeft: \"20px\",\n                                                                        }}\n                                                                        onClick={() => { this.deleteAction(plan.identifier, detail.step) }}\n                                                                    >\n                                                                        <DeleteIcon />\n                                                                    </IconButton> : null}\n\n                                                            </Typography>\n\n                                                            <Table>\n                                                                <TableHead>\n                                                                    <TableRow >\n                                                                        <TableCell>Field</TableCell>\n                                                                        {isCreate ? <TableCell>Value</TableCell> : <TableCell>Current</TableCell>}\n                                                                        {isCreate ? null : <TableCell>New</TableCell>}\n                                                                    </TableRow>\n                                                                </TableHead>\n                                                                <TableBody>\n                                                                    {Object.keys(diff).map(key => {\n                                                                        if (key === \"tags\") {\n                                                                            return null;\n                                                                        }\n\n                                                                        return isCreate ?\n                                                                            (\n                                                                                <TableRow>\n                                                                                    <TableCell>{this.lookup(key)}</TableCell>\n                                                                                    <TableCell>\n                                                                                        {(key !== \"power_connections\") ? (key === \"network_connections\" ? Object.keys(diff[key]).length : diff[key]) : diff[key].length}\n                                                                                    </TableCell>\n                                                                                </TableRow>\n                                                                            ) :\n                                                                            (\n                                                                                <TableRow>\n                                                                                    <TableCell>{this.lookup(key)}</TableCell>\n                                                                                    <TableCell>{key !== \"network_connections\" ? diff[key][0] : this.reducePorts(diff[key][0])}</TableCell>\n                                                                                    <TableCell>{key !== \"network_connections\" ? diff[key][1] : this.reducePorts(diff[key][1])}</TableCell>\n                                                                                </TableRow>\n                                                                            )\n                                                                    }\n                                                                    )}\n                                                                </TableBody>\n                                                            </Table>\n                                                        </TableContainer><br /></div>);\n                                                    })\n                                                    : \"This change plan has made no changes!\"}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"default\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<CheckIcon />}\n                                                    onClick={() => { this.validate(plan.identifier) }}\n                                                >\n                                                    Validate\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"primary\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<PlayArrowIcon />}\n                                                    onClick={() => { this.openExecuteDialog(plan.identifier) }}\n                                                >\n                                                    Execute\n                                                </Button> : null}\n                                            </Grid>\n                                            <Grid item xs={3}>\n                                                {!executed ? <Button\n                                                    variant=\"contained\"\n                                                    color=\"secondary\"\n                                                    style={{ width: \"100%\" }}\n                                                    startIcon={<DeleteIcon />}\n                                                    onClick={() => { this.openDeleteDialog(plan.identifier) }}\n                                                >\n                                                    Delete\n                                                </Button> : null}\n                                            </Grid>\n                                        </Grid>\n\n                                    </ExpansionPanelDetails>\n                                </ExpansionPanel>);\n                            })\n                            }\n                        </Grid>\n                        <Grid item xs={2}></Grid>\n                    </Grid>\n\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.renameDialog}\n                        onClose={this.closeRenameDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.renameDialog}>\n                            <Backdrop\n                                open={this.state.renameDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                New plan name:\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}>\n                                            <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.renameChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Save\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeRenameDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.executeDialog}\n                        onClose={this.closeExecuteDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.executeDialog}>\n                            <Backdrop\n                                open={this.state.executeDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                Are you sure you want to execute this change plan?\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}></Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.executeChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Yes\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeExecuteDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.deleteDialog}\n                        onClose={this.closeDeleteDialog}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.deleteDialog}>\n                            <Backdrop\n                                open={this.state.deleteDialog}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                            <Typography>\n                                                Are you sure you want to delete this change plan?\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={9}></Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.deleteChangePlan}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Yes\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"secondary\"\n                                                onClick={this.closeDeleteDialog}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Cancel\n                                </Button>\n                                        </Grid>\n\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.changeDescriptionModal}\n                        onClose={this.closeDescriptionModal}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.changeDescriptionModal}>\n                            <Backdrop\n                                open={this.state.changeDescriptionModal}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>\n                                                You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.startEditing}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Ok\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.changePlanModal}\n                        onClose={this.closeChangePlanModal}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.changePlanModal}>\n                            <Backdrop\n                                open={this.state.changePlanModal}\n                            >\n                            <div className={classes.grid}>\n                                <Grid\n                                    container\n                                    spacing={1}\n                                    direction=\"row\"\n                                    justify=\"flex-start\"\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item xs={3}>\n                                        <Typography>\n                                            Enter plan name:\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item xs={9}>\n                                        <TextField type=\"text\" id=\"change-plan-name\" variant=\"outlined\" label=\"Change Plan Name\" name=\"change-plan-name\" onChange={this.updatePlanName} style={{ width: \"100%\" }} />\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            onClick={this.beginChangePlan}\n                                            style={{width: \"100%\"}}\n                                        >\n                                            Begin\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={this.closeChangePlanModal}\n                                            style={{width: \"100%\"}}\n                                        >\n                                            Cancel\n                                        </Button>\n                                    </Grid>\n\n                                </Grid>\n                                </div>\n                        </Backdrop>\n                        </Fade>\n                    </Modal>\n\n                    <Modal\n                        aria-labelledby=\"transition-modal-title\"\n                        aria-describedby=\"transition-modal-description\"\n                        className={classes.modal}\n                        open={this.state.descriptionModal}\n                        onClose={this.closeDescription}\n                        closeAfterTransition\n                    >\n                        <Fade in={this.state.descriptionModal}>\n                            <Backdrop\n                                open={this.state.descriptionModal}\n                            >\n                                <div className={classes.grid}>\n                                    <Grid\n                                        container\n                                        spacing={1}\n                                        direction=\"row\"\n                                        justify=\"flex-start\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Typography>\n                                                You are now in change plan mode. All changes made will be logged to the change plan and will not actually be made in the system. Use the icon in the bottom right corner to exit change plan mode!\n                                </Typography>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                        <Grid item xs={6}>\n                                            <Button\n                                                variant=\"contained\"\n                                                color=\"primary\"\n                                                onClick={this.closeDescription}\n                                                style={{ width: \"100%\" }}\n                                            >\n                                                Ok\n                                </Button>\n                                        </Grid>\n                                        <Grid item xs={3}>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Backdrop>\n                        </Fade>\n                    </Modal>\n\n\n                </ErrorBoundray>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(useStyles)(ChangePlansView);\n","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nimport ModelsView from './models/pages/ModelsView';\r\nimport UsersView from './users/pages/UsersView';\r\nimport AssetsView from './assets/pages/AssetsView';\r\nimport DatacenterManagerView from './racks/pages/DatacenterManagerView';\r\nimport StatisticsView from './statistics/pages/StatisticsView';\r\nimport LogsView from \"./logs/pages/LogsView\";\r\nimport ChangePlansView from \"./changeplans/pages/ChangePlans\";\r\n\r\nimport ErrorBoundry from './errors/ErrorBoundry';\r\n\r\nimport '../stylesheets/TabStyles.css';\r\n\r\nconst useStyles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    tab: {\r\n        flexGrow: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        maxWidth: \"100%\",\r\n        width: \"100%\",\r\n        margin: \"0 auto\",\r\n    }\r\n});\r\n\r\nconst currentTab = \"currentTab\";\r\n\r\nclass TabViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentTabID:0,\r\n            anchorEl: null,\r\n            isMenuOpen:false,\r\n\r\n            // If change plan mode is on\r\n            changePlanActive: false,\r\n\r\n            // Unique id of current change plan\r\n            changePlanID: null,\r\n\r\n            // Current step in change plan\r\n            changePlanStep: null,\r\n\r\n            // Name of current change plan\r\n            changePlanName: \"\",\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        console.log(sessionStorage.getItem(currentTab));\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(sessionStorage.getItem(currentTab));\r\n        if (sessionStorage.getItem(currentTab) !== null) {\r\n            var tab =   parseInt(sessionStorage.getItem(currentTab));\r\n            this.setState({ currentTabID:tab });\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        sessionStorage.removeItem(currentTab);\r\n    }\r\n\r\n    handleChange(event, newValue) {\r\n        this.setState({ currentTabID: newValue });\r\n        sessionStorage.setItem(currentTab, newValue);\r\n    }\r\n\r\n    handleProfileMenuOpen = (event) => {\r\n        this.setState({ anchorEl: event.currentTarget, isMenuOpen: true });\r\n    }\r\n\r\n    handleMenuClose = () => {\r\n        this.setState({ anchorEl: null, isMenuOpen: false });\r\n    }\r\n\r\n    updateChangePlan = (status, id, step, name) => {\r\n        console.log(status, id, step, name);\r\n        this.setState({ changePlanActive: status, changePlanID: id,  changePlanStep: step, changePlanName: name });\r\n\r\n        if (status === false) {\r\n            this.setState({ changePlanStep: null, changePlanName: \"\" });\r\n        }\r\n    }\r\n\r\n    incrementChangePlanStep = () => {\r\n        const currentStep = this.state.changePlanStep;\r\n\r\n        this.setState({ changePlanStep: currentStep + 1 });\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <ErrorBoundry>\r\n                    <AppBar position=\"static\">\r\n                        <Toolbar>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Hyposoft Server Management\r\n                    </Typography>\r\n                            <div>\r\n                                <IconButton\r\n                                    aria-label=\"account of current user\"\r\n                                    aria-controls=\"menu-appbar\"\r\n                                    aria-haspopup=\"true\"\r\n                                    color=\"inherit\"\r\n                                    onClick={this.handleProfileMenuOpen}\r\n                                >\r\n                                    <AccountCircle />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    anchorEl={this.state.anchorEl}\r\n                                    anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                                    id='primary-search-account-menu'\r\n                                    keepMounted\r\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                                    open={this.state.isMenuOpen}\r\n                                    onClose={this.handleMenuClose}\r\n                                >\r\n                                    <MenuItem>{\"Username: \" + this.props.username}</MenuItem>\r\n                                    <MenuItem onClick={this.props.logout} >LOGOUT</MenuItem>\r\n                                </Menu>\r\n                            </div>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n            <Tabs value={this.state.currentTabID} onChange={this.handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                centered\r\n            >\r\n                <Tab value={0} style={{flexGrow: 1,}} label=\"Models\"> </Tab>\r\n                <Tab value={1} style={{flexGrow: 1,}} label=\"Assets\" ></Tab>\r\n                { (this.props.privilege.asset || this.props.privilege.admin || this.props.privilege.datacenters.length > 0) ? <Tab value={6} style={{flexGrow: 1,}} label=\"Change Plans\" ></Tab> : null }\r\n                {(this.props.privilege.admin) ? <Tab value={2} style={{flexGrow: 1,}} label=\"Users\"></Tab> : null}\r\n                {(this.props.privilege.admin || this.props.privilege.asset || this.props.privilege.datacenters.length > 0) ? <Tab value={3} style={{flexGrow: 1,}} label=\"Sites\" /> : null}\r\n                <Tab value={4} style={{flexGrow: 1,}} label=\"Statistics\" />\r\n                {(this.props.privilege.admin || this.props.privilege.audit) ? <Tab value={5} style={{flexGrow: 1,}} label=\"Logs\" />:null}\r\n            </Tabs>\r\n            {this.state.currentTabID !== 0 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><ModelsView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 1 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} >\r\n                    <AssetsView\r\n                        token={this.props.token}\r\n                        privilege={this.props.privilege}\r\n                        username={this.props.username}\r\n                        changePlanActive={this.state.changePlanActive}\r\n                        updateChangePlan={this.updateChangePlan}\r\n                        changePlanID ={this.state.changePlanID}\r\n                        changePlanStep={this.state.changePlanStep}\r\n                        incrementChangePlanStep={this.incrementChangePlanStep}\r\n                        changePlanName={this.state.changePlanName}\r\n                    />\r\n                </Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 2 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><UsersView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 3 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><DatacenterManagerView token={this.props.token} privilege={this.props.privilege} username={this.props.username} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 4 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 4}\r\n                id={`simple-tabpanel-0`}\r\n                aria-labelledby={`simple-tab-0`}\r\n            >\r\n                <Container className={classes.tab} ><StatisticsView token={this.props.token} privilege={this.props.privilege} /></Container>\r\n            </Typography>}\r\n            {this.state.currentTabID !== 5 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 5}\r\n                id={`tab-panel-logs`}\r\n                aria-labelledby={`tab-panel-logs`}\r\n            >\r\n                <Container className={classes.tab} ><LogsView /></Container>\r\n            </Typography>}\r\n            { this.state.currentTabID !== 6 ? null :\r\n            <Typography\r\n                component=\"div\"\r\n                role=\"tabpanel\"\r\n                hidden={this.state.currentTabID !== 6}\r\n                id={`tab-panel-logs`}\r\n                aria-labelledby={`tab-panel-logs`}\r\n            >\r\n                <Container className={classes.tab} >\r\n                    <ChangePlansView\r\n                        token={this.props.token}\r\n                        privilege={this.props.privilege}\r\n                        username={this.props.username}\r\n                        updateChangePlan={this.updateChangePlan}\r\n                    />\r\n                </Container>\r\n            </Typography>}\r\n            </ErrorBoundry>\r\n        </div>);\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(useStyles)(TabViewer);\r\n","import React from \"react\";\r\n\r\nimport axios from 'axios';\r\n\r\nimport Login from \"./Login\";\r\nimport TabViewer from \"./Tabs\";\r\nimport getURL from './helpers/functions/GetURL';\r\nimport * as Constants from \"./Constants\";\r\nimport ErrorBoundary from \"./errors/ErrorBoundry\";\r\n\r\nconst storedToken = 'token';\r\nconst storedPrivilege = 'privilege';\r\nconst storedLoggedIn = 'loggedIn';\r\nconst storedUsername = 'username';\r\n\r\nexport default class PageSelector extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\ttoken: sessionStorage.getItem(storedToken) || '',\r\n\t\t\tprivilege: sessionStorage.getItem(storedPrivilege) || '',\r\n\t\t\tloggedIn: sessionStorage.getItem(storedLoggedIn) || '',\r\n\t\t\tusername: sessionStorage.getItem(storedUsername) || '',\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\taxios.defaults.headers.common['token'] = this.state.token;\r\n\t\taxios.defaults.headers.common['privilege'] = this.state.privilege;\r\n\t}\r\n\r\n\tlogin = (token, username, privilege) => {\r\n\t\tconsole.log(privilege);\r\n\t\tsessionStorage.setItem(storedToken, token);\r\n\t\tsessionStorage.setItem(storedPrivilege, JSON.stringify(privilege));\r\n\t\tsessionStorage.setItem(storedLoggedIn, true);\r\n\t\tsessionStorage.setItem(storedUsername, username);\r\n\r\n\t\taxios.defaults.headers.common['token'] = token;\r\n\t\taxios.defaults.headers.common['privilege'] = privilege;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: token,\r\n\t\t\tprivilege: privilege,\r\n\t\t\tloggedIn: true,\r\n\t\t\tusername: username,\r\n\t\t});\r\n\r\n\t\twindow.history.replaceState({}, \"Hyposoft Asset Management\", \"/\")\r\n\t}\r\n\r\n\tloginWithOAuth = (token, username, privilege) => {\r\n\r\n\t\tsessionStorage.setItem(storedToken, token);\r\n\t\tsessionStorage.setItem(storedPrivilege, privilege);\r\n\t\tsessionStorage.setItem(storedLoggedIn, true);\r\n\t\tsessionStorage.setItem(storedUsername, username);\r\n\r\n\t\taxios.defaults.headers.common['token'] = token;\r\n\t\taxios.defaults.headers.common['privilege'] = privilege;\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: token,\r\n\t\t\tprivilege: privilege,\r\n\t\t\tloggedIn: true,\r\n\t\t\tusername: username,\r\n\t\t}, () => { window.history.replaceState({}, \"Hyposoft Asset Management\", \"/\") });\r\n\t}\r\n\r\n\tlogout = () => {\r\n\t\taxios.get(getURL('users/', 'logout'));\r\n\r\n\t\tthis.setState({\r\n\t\t\ttoken: '',\r\n\t\t\tprivilege: '',\r\n\t\t\tloggedIn: false,\r\n\t\t\tusername: '',\r\n\t\t});\r\n\r\n\t\tsessionStorage.removeItem(storedToken);\r\n\t\tsessionStorage.removeItem(storedPrivilege);\r\n\t\tsessionStorage.removeItem(storedLoggedIn);\r\n\t\tsessionStorage.removeItem(storedUsername);\r\n\r\n\t\twindow.history.replaceState({}, \"Hyposoft Asset Management\", \"/\")\r\n\t\tconsole.log(window.location.href);\r\n\t\tconsole.log(Constants.SHIB_REDIRECT_URI);\r\n\t\t//window.location = Constants.SHIB_REDIRECT_URI;\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tvar privilege = \"\";\r\n\t\ttry {\r\n\t\t\tprivilege = JSON.parse(this.state.privilege);\r\n\t\t} catch {\r\n\t\t\tprivilege = this.state.privilege;\r\n\t\t}\r\n\t\tconsole.log(\"privilege: \");\r\n\t\tconsole.log(privilege);\r\n\r\n\t\treturn (\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{this.state.loggedIn ?\r\n\t\t\t\t\t\t<TabViewer\r\n\t\t\t\t\t\t\ttoken={this.state.token}\r\n\t\t\t\t\t\t\tusername={this.state.username}\r\n\t\t\t\t\t\t\tprivilege={privilege}\r\n\t\t\t\t\t\t\tlogout={this.logout}\r\n\t\t\t\t\t\t/> :\r\n\t\t\t\t\t\t<Login\r\n\t\t\t\t\t\t\tloginFunc={this.login}\r\n\t\t\t\t\t\t\tshib={this.props.redirected}\r\n\t\t\t\t\t\t\tloginFuncOAuth={this.loginWithOAuth}\r\n\t\t\t\t\t\t/>}\r\n\t\t\t\t</div>\r\n\t\t\t</ErrorBoundary>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport PageSelector from './javascript/PageSelector';\n\nReactDOM.render(<PageSelector redirected={document.referrer}/>, document.getElementById('root'));\n"],"sourceRoot":""}
